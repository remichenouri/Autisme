# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tYyBZXlbNHUGJELlLOMJWGZVmxY346Yd
"""

import streamlit as st

import joblib
import prince

st.set_page_config(
    page_title="D√©pistage Autisme",
    page_icon="üß©",
    layout="wide",
    initial_sidebar_state="expanded"
)


import base64
import hashlib
import os
import pickle
import numpy as np
import pandas as pd
import requests
from concurrent.futures import ThreadPoolExecutor
from io import BytesIO
from PIL import Image
import streamlit.components.v1 as components
import plotly.express as px


for folder in ['data_cache', 'image_cache', 'model_cache', 'theme_cache']:
    os.makedirs(folder, exist_ok=True)


if "aq10_total" not in st.session_state:
    st.session_state.aq10_total = 0

if "aq10_responses" not in st.session_state:
    st.session_state.aq10_responses = []

def initialize_session_state():
    """Initialise l'√©tat de session pour conserver les configurations entre les recharges"""
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True

        # Par d√©faut, commencer sur la page d'accueil
        default_tool = "üè† Accueil"

        # R√©cup√©rer le param√®tre de s√©lection de l'URL s'il existe
        try:
            # Pour les versions r√©centes de Streamlit (1.30.0+)
            if "selection" in st.query_params:
                selection = st.query_params["selection"]
                # Mapping entre les valeurs des liens et les options du menu
                selection_mapping = {
                    "üìù Test AQ-10": "ü§ñ Pr√©diction par IA",
                    "ü§ñ Pr√©diction par IA": "ü§ñ Pr√©diction par IA",
                    "üîç Exploration des Donn√©es": "üîç Exploration des Donn√©es"
                }

                if selection in selection_mapping:
                    st.session_state.tool_choice = selection_mapping[selection]
                else:
                    st.session_state.tool_choice = default_tool
            else:
                st.session_state.tool_choice = default_tool
        except:
            try:
                query_params = st.experimental_get_query_params()
                if "selection" in query_params:
                    selection = query_params["selection"][0]  # experimental_get_query_params retourne une liste
                    selection_mapping = {
                        "üìù Test AQ-10": "ü§ñ Pr√©diction par IA",
                        "ü§ñ Pr√©diction par IA": "ü§ñ Pr√©diction par IA",
                        "üîç Exploration des Donn√©es": "üîç Exploration des Donn√©es"
                    }

                    if selection in selection_mapping:
                        st.session_state.tool_choice = selection_mapping[selection]
                    else:
                        st.session_state.tool_choice = default_tool
                else:
                    st.session_state.tool_choice = default_tool
            except:
                st.session_state.tool_choice = default_tool

        st.session_state.data_exploration_expanded = True

def set_custom_theme():
    css_path = "theme_cache/custom_theme.css"
    os.makedirs(os.path.dirname(css_path), exist_ok=True)

    if os.path.exists(css_path):
        with open(css_path, 'r') as f:
            custom_theme = f.read()
    else:
        custom_theme = """
        <style>
        /* ================ Variables Globales Optimis√©es ================ */
        :root {
            --primary: #2c3e50 !important;
            --secondary: #3498db !important;
            --accent: #e74c3c !important;
            --background: #f8f9fa !important;
            --sidebar-bg: #ffffff !important;
            --sidebar-border: #e9ecef !important;
            --text-primary: #2c3e50 !important;
            --text-secondary: #6c757d !important;
            --sidebar-width-collapsed: 60px !important;
            --sidebar-width-expanded: 240px !important;
            --sidebar-transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
            --shadow-light: 0 2px 8px rgba(0,0,0,0.08) !important;
            --shadow-medium: 0 4px 16px rgba(0,0,0,0.12) !important;
        }

        /* ================ Structure Principale ================ */
        [data-testid="stAppViewContainer"] {
            background-color: var(--background) !important;
        }

        /* ================ Sidebar Compacte et Professionnelle ================ */
        [data-testid="stSidebar"] {
            /* Dimensions optimis√©es */
            width: var(--sidebar-width-collapsed) !important;
            min-width: var(--sidebar-width-collapsed) !important;
            max-width: var(--sidebar-width-collapsed) !important;
            height: 100vh !important;
            
            /* Position fixe */
            position: fixed !important;
            left: 0 !important;
            top: 0 !important;
            z-index: 999999 !important;
            
            /* Style moderne */
            background: var(--sidebar-bg) !important;
            border-right: 1px solid var(--sidebar-border) !important;
            box-shadow: var(--shadow-light) !important;
            
            /* √âlimination du d√©filement */
            overflow: hidden !important;
            padding: 0 !important;
            
            /* Transition fluide */
            transition: var(--sidebar-transition) !important;
        }

        /* √âtat √©tendu au survol */
        [data-testid="stSidebar"]:hover {
            width: var(--sidebar-width-expanded) !important;
            min-width: var(--sidebar-width-expanded) !important;
            max-width: var(--sidebar-width-expanded) !important;
            box-shadow: var(--shadow-medium) !important;
            overflow-y: auto !important;
        }

        /* Contenu interne optimis√© */
        [data-testid="stSidebar"] > div {
            width: var(--sidebar-width-expanded) !important;
            padding: 12px 8px !important;
            height: 100vh !important;
            overflow: hidden !important;
        }

        [data-testid="stSidebar"]:hover > div {
            overflow-y: auto !important;
            padding: 16px 12px !important;
        }

        /* ================ Masquage des Barres de D√©filement ================ */
        [data-testid="stSidebar"]::-webkit-scrollbar,
        [data-testid="stSidebar"] > div::-webkit-scrollbar {
            width: 0px !important;
            background: transparent !important;
        }

        [data-testid="stSidebar"] > div {
            -ms-overflow-style: none !important;
            scrollbar-width: none !important;
        }

        /* ================ En-t√™te Professionnel ================ */
        [data-testid="stSidebar"] h2 {
            font-size: 0 !important;
            margin: 0 0 20px 0 !important;
            padding: 12px 0 !important;
            border-bottom: 1px solid var(--sidebar-border) !important;
            text-align: center !important;
            transition: all 0.3s ease !important;
            position: relative !important;
            height: 60px !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
        }

        /* Ic√¥ne en mode r√©duit */
        [data-testid="stSidebar"] h2::before {
            content: "üß©" !important;
            font-size: 28px !important;
            display: block !important;
            margin: 0 !important;
        }

        /* Texte complet au survol */
        [data-testid="stSidebar"]:hover h2 {
            font-size: 1.4rem !important;
            color: var(--primary) !important;
            font-weight: 600 !important;
        }

        [data-testid="stSidebar"]:hover h2::before {
            font-size: 20px !important;
            margin-right: 8px !important;
        }

        /* ================ Options de Navigation Modernis√©es ================ */
        [data-testid="stSidebar"] .stRadio {
            padding: 0 !important;
            margin: 0 !important;
        }

        [data-testid="stSidebar"] .stRadio > div {
            display: flex !important;
            flex-direction: column !important;
            gap: 4px !important;
            padding: 0 !important;
        }

        [data-testid="stSidebar"] .stRadio label {
            display: flex !important;
            align-items: center !important;
            padding: 10px 6px !important;
            margin: 0 !important;
            border-radius: 8px !important;
            transition: all 0.3s ease !important;
            cursor: pointer !important;
            position: relative !important;
            height: 44px !important;
            overflow: hidden !important;
            background: transparent !important;
        }

        /* Ic√¥nes centr√©es en mode r√©duit */
        [data-testid="stSidebar"] .stRadio label > div:first-child {
            display: none !important;
        }

        [data-testid="stSidebar"] .stRadio label span {
            font-size: 0 !important;
            transition: all 0.3s ease !important;
            width: 100% !important;
            text-align: center !important;
            position: relative !important;
        }

        /* Affichage des ic√¥nes uniquement */
        [data-testid="stSidebar"] .stRadio label span::before {
            font-size: 22px !important;
            display: block !important;
            width: 100% !important;
            text-align: center !important;
        }

        /* Mapping des ic√¥nes pour chaque option */
        [data-testid="stSidebar"] .stRadio label:nth-child(1) span::before { content: "üè†" !important; }
        [data-testid="stSidebar"] .stRadio label:nth-child(2) span::before { content: "üîç" !important; }
        [data-testid="stSidebar"] .stRadio label:nth-child(3) span::before { content: "üß†" !important; }
        [data-testid="stSidebar"] .stRadio label:nth-child(4) span::before { content: "ü§ñ" !important; }
        [data-testid="stSidebar"] .stRadio label:nth-child(5) span::before { content: "üìö" !important; }
        [data-testid="stSidebar"] .stRadio label:nth-child(6) span::before { content: "‚ÑπÔ∏è" !important; }

        /* Mode √©tendu - affichage du texte */
        [data-testid="stSidebar"]:hover .stRadio label span {
            font-size: 14px !important;
            font-weight: 500 !important;
            text-align: left !important;
            padding-left: 12px !important;
        }

        [data-testid="stSidebar"]:hover .stRadio label span::before {
            font-size: 18px !important;
            position: absolute !important;
            left: -8px !important;
            top: 50% !important;
            transform: translateY(-50%) !important;
            width: auto !important;
        }

        /* Effets de survol */
        [data-testid="stSidebar"] .stRadio label:hover {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef) !important;
            transform: translateX(3px) !important;
            box-shadow: var(--shadow-light) !important;
        }

        /* Option s√©lectionn√©e */
        [data-testid="stSidebar"] .stRadio label[data-checked="true"] {
            background: linear-gradient(135deg, var(--secondary), #2980b9) !important;
            color: white !important;
            box-shadow: var(--shadow-medium) !important;
        }

        [data-testid="stSidebar"] .stRadio label[data-checked="true"]:hover {
            background: linear-gradient(135deg, #2980b9, var(--secondary)) !important;
            transform: translateX(5px) !important;
        }

        /* ================ Contenu Principal Adaptatif ================ */
        .main .block-container {
            margin-left: calc(var(--sidebar-width-collapsed) + 16px) !important;
            padding: 1.5rem !important;
            max-width: calc(100vw - var(--sidebar-width-collapsed) - 32px) !important;
            transition: var(--sidebar-transition) !important;
        }

        /* ================ Indicateur Visuel Subtil ================ */
        [data-testid="stSidebar"]::after {
            content: "‚Ä∫" !important;
            position: absolute !important;
            right: 6px !important;
            top: 50% !important;
            transform: translateY(-50%) !important;
            font-size: 12px !important;
            color: var(--text-secondary) !important;
            opacity: 0.5 !important;
            transition: all 0.3s ease !important;
            font-weight: bold !important;
        }

        [data-testid="stSidebar"]:hover::after {
            opacity: 0 !important;
            transform: translateY(-50%) translateX(10px) !important;
        }

        /* ================ Zone de Trigger Invisible ================ */
        .sidebar-trigger-zone {
            position: fixed !important;
            left: 0 !important;
            top: 0 !important;
            width: 10px !important;
            height: 100vh !important;
            z-index: 999998 !important;
            background: transparent !important;
        }

        /* ================ Responsive Design ================ */
        @media (max-width: 768px) {
            [data-testid="stSidebar"] {
                transform: translateX(-100%) !important;
            }
            
            [data-testid="stSidebar"]:hover {
                transform: translateX(0) !important;
                width: 280px !important;
                min-width: 280px !important;
                max-width: 280px !important;
            }
            
            .main .block-container {
                margin-left: 0 !important;
                max-width: 100vw !important;
                padding: 1rem !important;
            }
            
            .sidebar-trigger-zone {
                width: 15px !important;
            }
        }

        /* ================ Am√©liorations G√©n√©rales ================ */
        .stButton > button {
            background: linear-gradient(135deg, var(--secondary), #2980b9) !important;
            color: white !important;
            border-radius: 8px !important;
            border: none !important;
            padding: 10px 20px !important;
            font-weight: 500 !important;
            transition: all 0.3s ease !important;
            box-shadow: var(--shadow-light) !important;
        }

        .stButton > button:hover {
            transform: translateY(-2px) !important;
            box-shadow: var(--shadow-medium) !important;
            background: linear-gradient(135deg, #2980b9, var(--secondary)) !important;
        }

        /* Suppression des alertes ind√©sirables */
        .stAlert, [data-testid="stAlert"] {
            border: none !important;
            background: transparent !important;
        }
        </style>

        <script>
        // Script JavaScript optimis√©
        document.addEventListener('DOMContentLoaded', function() {
            // Cr√©er la zone de trigger si elle n'existe pas
            if (!document.querySelector('.sidebar-trigger-zone')) {
                const triggerZone = document.createElement('div');
                triggerZone.className = 'sidebar-trigger-zone';
                document.body.appendChild(triggerZone);
            }
            
            const sidebar = document.querySelector('[data-testid="stSidebar"]');
            const triggerZone = document.querySelector('.sidebar-trigger-zone');
            
            if (sidebar && triggerZone) {
                let isExpanded = false;
                let hoverTimeout;
                
                function expandSidebar() {
                    clearTimeout(hoverTimeout);
                    isExpanded = true;
                    sidebar.style.overflow = 'visible';
                }
                
                function collapseSidebar() {
                    hoverTimeout = setTimeout(() => {
                        isExpanded = false;
                        sidebar.style.overflow = 'hidden';
                    }, 200);
                }
                
                // Gestion des √©v√©nements
                [sidebar, triggerZone].forEach(element => {
                    element.addEventListener('mouseenter', expandSidebar);
                    element.addEventListener('mouseleave', collapseSidebar);
                });
                
                // Attribution des √©tats pour les options s√©lectionn√©es
                const observer = new MutationObserver(() => {
                    const radioLabels = sidebar.querySelectorAll('.stRadio label');
                    radioLabels.forEach(label => {
                        const input = label.querySelector('input[type="radio"]');
                        if (input && input.checked) {
                            label.setAttribute('data-checked', 'true');
                        } else {
                            label.setAttribute('data-checked', 'false');
                        }
                    });
                });
                
                observer.observe(sidebar, { 
                    childList: true, 
                    subtree: true,
                    attributes: true 
                });
            }
        });
        </script>
        """
        
        with open(css_path, 'w') as f:
            f.write(custom_theme)

    st.markdown(custom_theme, unsafe_allow_html=True)

def show_navigation_menu():
    """Menu de navigation optimis√© et professionnel"""
    st.markdown("## üß© Autisme - Navigation")
    st.markdown("Choisissez un outil :")

    # Options optimis√©es avec ic√¥nes coh√©rentes
    options = [
        "üè† Accueil",
        "üîç Exploration", 
        "üß† Analyse ML",
        "ü§ñ Pr√©diction par IA",
        "üìö Documentation",
        "‚ÑπÔ∏è √Ä propos"
    ]

    if 'tool_choice' not in st.session_state or st.session_state.tool_choice not in options:
        st.session_state.tool_choice = "üè† Accueil"

    current_index = options.index(st.session_state.tool_choice)

    tool_choice = st.radio(
        "",
        options,
        label_visibility="collapsed",
        index=current_index,
        key="main_navigation"
    )

    if tool_choice != st.session_state.tool_choice:
        st.session_state.tool_choice = tool_choice

    return tool_choice

set_custom_theme()

def load_visualization_libraries():
    global plt, px, go, sns

    if 'plt' not in globals():
        import matplotlib.pyplot as plt
    if 'px' not in globals():
        import plotly.express as px
    if 'go' not in globals():
        import plotly.graph_objects as go
    if 'sns' not in globals():
        import seaborn as sns

def load_ml_libraries():
    global LGBMClassifier, RandomForestClassifier, LogisticRegression, XGBClassifier
    global StandardScaler, OneHotEncoder, ColumnTransformer, Pipeline, utils
    global chi2_contingency, mannwhitneyu, prince

    if 'RandomForestClassifier' not in globals():
        from sklearn.ensemble import RandomForestClassifier
    if 'LogisticRegression' not in globals():
        from sklearn.linear_model import LogisticRegression
    if 'StandardScaler' not in globals():
        from sklearn.preprocessing import StandardScaler
    if 'OneHotEncoder' not in globals():
        from sklearn.preprocessing import OneHotEncoder
    if 'ColumnTransformer' not in globals():
        from sklearn.compose import ColumnTransformer
    if 'Pipeline' not in globals():
        from sklearn.pipeline import Pipeline
    if 'XGBClassifier' not in globals():
        from xgboost import XGBClassifier
    if 'LGBMClassifier' not in globals():
        from lightgbm import LGBMClassifier
    if 'utils' not in globals():
        from sklearn import utils
    if 'chi2_contingency' not in globals():
        from scipy.stats import chi2_contingency
    if 'mannwhitneyu' not in globals():
        from scipy.stats import mannwhitneyu
    if 'prince' not in globals():
        import prince

@st.cache_resource
def train_advanced_model(df):
    """
    Entra√Æne un mod√®le Random Forest pour la pr√©diction du TSA et retourne
    le mod√®le, le pr√©processeur et les noms des features.

    Args:
        df (pd.DataFrame): DataFrame contenant les donn√©es d'entra√Ænement

    Returns:
        tuple: (mod√®le entra√Æn√©, pr√©processeur, noms des features)
    """
    load_ml_libraries()
    load_metrics_libraries()

    try:

        if 'TSA' not in df.columns:
            st.error("La colonne 'TSA' n'existe pas dans le dataframe")
            return None, None, None

        X = df.drop(columns=['TSA'])
        y = df['TSA'].map({'Yes': 1, 'No': 0})

        numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()
        categorical_cols = X.select_dtypes(include=['object', 'category']).columns.tolist()

        preprocessor = ColumnTransformer(
            transformers=[
                ('num', StandardScaler(), numerical_cols),
                ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
            ],
            remainder='passthrough',
            verbose_feature_names_out=False
        )

        rf_classifier = RandomForestClassifier(
            n_estimators=100,
            max_depth=8,
            min_samples_split=10,
            min_samples_leaf=2,
            max_features='sqrt',
            bootstrap=True,
            random_state=42,
            n_jobs=-1
        )

        pipeline = Pipeline([
            ('preprocessor', preprocessor),
            ('classifier', rf_classifier)
        ])

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        pipeline.fit(X_train, y_train)

        try:
            feature_names = preprocessor.get_feature_names_out()
        except:

            feature_names = [f"feature_{i}" for i in range(pipeline.transform(X.iloc[[0]]).shape[1])]

        return pipeline, preprocessor, feature_names

    except Exception as e:
        st.error(f"Erreur lors de l'entra√Ænement du mod√®le: {str(e)}")
        return None, None, None

def get_question_text(question_number):
    """Fonction utilitaire pour obtenir le texte des questions AQ-10"""
    questions = {
        1: "Je remarque souvent de petits bruits que les autres ne remarquent pas.",
        2: "Je me concentre g√©n√©ralement davantage sur l'ensemble que sur les petits d√©tails.",
        3: "Je trouve facile de faire plusieurs choses en m√™me temps.",
        4: "S'il y a une interruption, je peux rapidement reprendre ce que je faisais.",
        5: "Je trouve facile de ¬´ lire entre les lignes ¬ª quand quelqu'un me parle.",
        6: "Je sais comment savoir si la personne qui m'√©coute commence √† s'ennuyer.",
        7: "Quand je lis une histoire, j'ai du mal √† comprendre les intentions des personnages.",
        8: "J'aime collecter des informations sur des cat√©gories de choses (par exemple : types de voitures, d'oiseaux, de trains, de plantes, etc.).",
        9: "Je trouve facile de comprendre ce que quelqu'un pense ou ressent rien qu'en regardant son visage.",
        10: "J'ai du mal √† comprendre les intentions des gens."
    }
    return questions.get(question_number, f"Question {question_number} non d√©finie")


def load_metrics_libraries():
    global accuracy_score, precision_score, recall_score, f1_score
    global roc_auc_score, confusion_matrix, classification_report
    global cross_val_score, train_test_split

    if 'accuracy_score' not in globals():
        from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
        from sklearn.metrics import roc_auc_score, confusion_matrix, classification_report
    if 'cross_val_score' not in globals():
        from sklearn.model_selection import cross_val_score
    if 'train_test_split' not in globals():
        from sklearn.model_selection import train_test_split


@st.cache_data(ttl=86400)
def get_img_with_href(img_url, target_url, as_banner=False):
    """
    Cr√©e une image cliquable avec un lien (ou non cliquable si target_url est None, vide ou '#')
    """
    if "drive.google.com" in img_url and "/d/" in img_url:
        file_id = img_url.split("/d/")[1].split("/")[0]
        img_url = f"https://drive.google.com/uc?export=view&id={file_id}"

    cache_filename = hashlib.md5(img_url.encode()).hexdigest() + ".webp"
    cache_dir = "image_cache"
    cache_path = os.path.join(cache_dir, cache_filename)
    os.makedirs(cache_dir, exist_ok=True)

    try:
        if os.path.exists(cache_path):
            with open(cache_path, "rb") as f:
                img_data = f.read()
            img = Image.open(BytesIO(img_data))
        else:
            response = requests.get(img_url, timeout=15)
            response.raise_for_status()

            if len(response.content) == 0:
                raise Exception("Contenu vide t√©l√©charg√©")

            img = Image.open(BytesIO(response.content))

            max_width = 1200 if as_banner else 800
            if img.width > max_width:
                ratio = max_width / img.width
                new_height = int(img.height * ratio)
                img = img.resize((max_width, new_height), Image.LANCZOS)

            buffer = BytesIO()
            img.save(buffer, format="WEBP", quality=85, optimize=True)

            with open(cache_path, "wb") as f:
                f.write(buffer.getvalue())

            buffer.seek(0)
            img_data = buffer.getvalue()

        img_str = base64.b64encode(img_data).decode()

        if as_banner:
            style = 'style="width:100%;height:600px;display:block;object-fit:cover;border-radius:10px;" loading="lazy"'
        else:
            style = 'style="width:100%;height:auto;display:block;object-fit:contain;margin:0 auto;padding:0;" loading="lazy"'

        container_style = 'style="width:100%; padding:10px; background-color:white; border-radius:10px; overflow:hidden; margin-bottom:20px;"'

        # Ne pas ajouter de lien si target_url est None, vide ou '#'
        if target_url and target_url != "#":
            html_code = f'<div {container_style}><a href="{target_url}" target="_blank" style="display:block; margin:0; padding:0; line-height:0;"><img src="data:image/webp;base64,{img_str}" {style}></a></div>'
        else:
            html_code = f'<div {container_style}><img src="data:image/webp;base64,{img_str}" {style}></div>'

        return html_code
    except Exception as e:
        return f'<div style="text-align:center;padding:20px;background:#f0f2f6;border-radius:10px;"><p>Image non disponible ({str(e)})</p></div>'

@st.cache_data(ttl=86400)
def load_dataset():
    try:
        ds1_id = '1ai1QlLzn0uo-enw4IzC53jJ8qoPc845G'
        ds2_id = '1MOEhPxMNZH8LvXahvYAKiVFb9t8vAxaE'
        ds3_id = '12B-scaR0TF7TuJzelIqmlxXDjnew67-K'
        ds4_id = '1U9buLTKR_XuLWu9l3SOgvF6d9cS_YTFO'
        ds5_id = '1NdXYppnmiheLFtvrdRHDk-W-zHKO0wYp'
        final_id = '1mm6sRacDmoL941POmydQgzdVAi9lFPit'

        cache_dir = "data_cache"
        os.makedirs(cache_dir, exist_ok=True)
        final_path = os.path.join(cache_dir, "final_dataset.csv")

        if os.path.exists(final_path):
            df = pd.read_csv(final_path)
            df_ds1 = pd.read_csv(os.path.join(cache_dir, "ds1.csv"))
            df_ds2 = pd.read_csv(os.path.join(cache_dir, "ds2.csv"))
            df_ds3 = pd.read_csv(os.path.join(cache_dir, "ds3.csv"))
            df_ds4 = pd.read_csv(os.path.join(cache_dir, "ds4.csv"))
            df_ds5 = pd.read_csv(os.path.join(cache_dir, "ds5.csv"))
        else:
            url_final = f'https://drive.google.com/uc?export=download&id={final_id}'
            df = pd.read_csv(url_final)
            df.to_csv(final_path, index=False)

            with ThreadPoolExecutor(max_workers=5) as executor:
                futures = []
                urls = [
                    (f'https://drive.google.com/uc?export=download&id={ds1_id}', "ds1.csv"),
                    (f'https://drive.google.com/uc?export=download&id={ds2_id}', "ds2.csv"),
                    (f'https://drive.google.com/uc?export=download&id={ds3_id}', "ds3.csv"),
                    (f'https://drive.google.com/uc?export=download&id={ds4_id}', "ds4.csv"),
                    (f'https://drive.google.com/uc?export=download&id={ds5_id}', "ds5.csv")
                ]

                for url, filename in urls:
                    futures.append(executor.submit(download_and_save_dataset, url, os.path.join(cache_dir, filename)))

                df_ds1, df_ds2, df_ds3, df_ds4, df_ds5 = [future.result() for future in futures]

        rename_dict = {'tsa': 'TSA', 'gender': 'Genre'}
        df = df.rename(columns={k: v for k, v in rename_dict.items() if k in df.columns})

        if 'Unnamed: 0' in df.columns:
            df = df.drop(columns=['Unnamed: 0'])

        if 'TSA' in df.columns: df['TSA'] = df['TSA'].str.title()
        if 'Genre' in df.columns: df['Genre'] = df['Genre'].str.capitalize()

        aq_columns = [col for col in df.columns if col.startswith('A') and col[1:].isdigit()]
        if aq_columns:
            df['Score_A10'] = df[aq_columns].sum(axis=1)

        if 'Statut_testeur' not in df.columns:
            df['Statut_testeur'] = 'Famille'
        else:
            df['Statut_testeur'].fillna('Famille', inplace=True)

        df_stats = {
            'mean_by_tsa': df.groupby('TSA').mean(numeric_only=True) if 'TSA' in df.columns else pd.DataFrame(),
            'count_by_tsa': df.groupby('TSA').count() if 'TSA' in df.columns else pd.DataFrame(),
            'categorical_cols': df.select_dtypes(include=['object']).columns.tolist(),
            'numeric_cols': df.select_dtypes(exclude=['object']).columns.tolist()
        }

        return df, df_ds1, df_ds2, df_ds3, df_ds4, df_ds5, df_stats
    except Exception as e:
        st.error(f"Erreur lors du chargement: {str(e)}")
        return pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), {}
        pass

def download_and_save_dataset(url, filepath):
    """Fonction auxiliaire pour t√©l√©charger et sauvegarder un dataset"""
    try:
        df = pd.read_csv(url)
        df.to_csv(filepath, index=False)
        return df
    except Exception as e:
        st.error(f"Erreur lors du t√©l√©chargement de {url}: {str(e)}")
        return pd.DataFrame()

palette = {"No": "#1f77b4", "Yes": "#ff7f0e"}

def create_mann_whitney_visualization(data, variable):
    group1 = data[data["TSA"] == "Yes"][variable].dropna()
    group2 = data[data["TSA"] == "No"][variable].dropna()

    fig = go.Figure()

    fig.add_trace(go.Box(
        y=group1,
        name="TSA",
        marker_color=palette["Yes"]
    ))

    fig.add_trace(go.Box(
        y=group2,
        name="Non-TSA",
        marker_color=palette["No"]
    ))

    fig.update_layout(
        title=f"Comparaison de {variable} entre groupes TSA et non-TSA",
        yaxis_title=variable,
        boxmode="group"
    )

    return fig

def create_distribution_chart(data, variable):
    fig = px.histogram(data, x=variable, color="TSA")
    return fig

def create_distribution_chart(data, variable):
    fig = px.histogram(data, x=variable, color="TSA",
                      barmode="group",
                      labels={"count": "Fr√©quence", "TSA": "Diagnostic TSA"},
                      color_discrete_map={"No": "#1f77b4", "Yes": "#ff7f0e"})

    fig.update_layout(
        title=f"Distribution de {variable} par diagnostic",
        xaxis_title=variable,
        yaxis_title="Fr√©quence",
        legend_title="Diagnostic TSA"
    )
    return fig

palette = {"No": "#1f77b4", "Yes": "#ff7f0e"}

def create_chi_squared_visualization(data, variable):
    cross_tab = pd.crosstab(data[variable], data["TSA"])
    data_grouped = pd.DataFrame({
        variable: [],
        "TSA": [],
        "count": [],
        "percentage": []
    })

    for cat in cross_tab.index:
        for tsa in ["No", "Yes"]:
            count = cross_tab.loc[cat, tsa]
            total = cross_tab.loc[cat].sum()
            percentage = (count / total) * 100

            data_grouped = data_grouped._append({
                variable: cat,
                "TSA": tsa,
                "count": count,
                "percentage": percentage
            }, ignore_index=True)

    fig = px.bar(data_grouped, x=variable, y="percentage", color="TSA",
                barmode="group",
                labels={"percentage": "Pourcentage (%)", "TSA": "Diagnostic TSA"},
                color_discrete_map=palette)

    fig.update_layout(
        title=f"R√©partition de {variable} par diagnostic (%)",
        xaxis_title=variable,
        yaxis_title="Pourcentage (%)",
        legend_title="Diagnostic TSA"
    )
    return fig

@st.cache_data(ttl=3600, max_entries=100)
def create_plotly_figure(df, x=None, y=None, color=None, names=None, kind='histogram', title=None):
    """Cr√©e une visualisation Plotly avec mise en cache et optimisations de performance"""

    sample_threshold = 10000
    if len(df) > sample_threshold:
        df = df.sample(sample_threshold, random_state=42)

    if color and color not in df.columns:
        color = None

    categorical_palette = {0: "#3498db", 1: "#2ecc71"}
    palette = {"Yes": "#3498db", "No": "#2ecc71", "Unknown": "#95a5a6"}
    base_layout = dict(
        height=500,
        margin=dict(l=20, r=20, t=40, b=20),
        template="simple_white",
        modebar_remove=['sendDataToCloud', 'select2d', 'lasso2d', 'autoScale2d'],
        hovermode='closest'
    )

    try:
        is_categorical_aq = x and isinstance(x, str) and x.startswith('A') and x[1:].isdigit() and len(x) <= 3

        if is_categorical_aq and kind in ['histogram', 'bar']:
            counts = df[x].value_counts().reset_index()
            counts.columns = [x, 'count']
            fig = px.bar(counts, x=x, y='count',
                        color=x,
                        color_discrete_map=categorical_palette,
                        title=f"Distribution de {x} (cat√©gorielle)")
            fig.update_layout(xaxis_title=f"Valeur de {x}", yaxis_title="Nombre d'occurrences", **base_layout)

        elif kind == 'histogram':
            nbins = 20 if len(df) < 5000 else 10
            marginal = "box" if len(df) < 3000 else None
            fig = px.histogram(df, x=x, color=color, color_discrete_map=palette,
                              marginal=marginal, nbins=nbins)
            fig.update_layout(**base_layout)

        elif kind == 'box':
            points = "all" if len(df) < 1000 else False
            fig = px.box(df, x=x, y=y, color=color, color_discrete_map=palette,
                        points=points, notched=len(df) > 200)
            fig.update_layout(**base_layout)

        elif kind == 'bar':
            fig = px.bar(df, x=x, y=y, color=color, color_discrete_map=palette)
            fig.update_layout(**base_layout)

        elif kind == 'scatter':
            opacity = 1.0 if len(df) < 500 else 0.7 if len(df) < 2000 else 0.5
            fig = px.scatter(df, x=x, y=y, color=color, color_discrete_map=palette, opacity=opacity)
            fig.update_layout(**base_layout)

        elif kind == 'pie':
            if names and isinstance(names, str) and names.startswith('A') and names[1:].isdigit() and len(names) <= 3:
                values_counts = df[names].value_counts().reset_index()
                values_counts.columns = [names, 'count']
                fig = px.pie(values_counts, values='count', names=names,
                          color=names,
                          color_discrete_map=categorical_palette,
                          title=f"R√©partition {names}")
            else:
                fig = px.pie(df, names=names, color=color, color_discrete_map=palette)
            fig.update_layout(**base_layout)

        elif kind == 'violin':
            box = len(df) < 2000
            fig = px.violin(df, x=x, y=y, color=color, color_discrete_map=palette, box=box)
            fig.update_layout(**base_layout)

        elif kind == 'count':
            fig = px.histogram(df, x=x, color=color, color_discrete_map=palette,
                            title=f"Comptage de {x}")
            fig.update_layout(yaxis_title="Nombre d'occurrences", **base_layout)

        if title:
            fig.update_layout(title=title)

        return fig
    except Exception as e:
        st.error(f"Erreur lors de la cr√©ation du graphique: {str(e)}")
        return None

def show_home_page():
    """Page d'accueil am√©lior√©e avec design moderne et responsive"""
    
    # CSS sp√©cifique corrig√© - SUPPRIMER les r√®gles conflictuelles
    st.markdown("""
    <style>
    /* Suppression des r√®gles CSS conflictuelles pour la sidebar */
    /* NE PAS red√©finir les propri√©t√©s de [data-testid="stSidebar"] */
    
    /* Suppression des barres bleues ind√©sirables */
    .stAlert, [data-testid="stAlert"] {
        border: none !important;
        background: transparent !important;
    }
    
    /* Am√©lioration du contenu principal */
    .main .block-container {
        padding-top: 1rem !important;
        max-width: 1200px !important;
    }
    
    /* Style pour les cartes d'information */
    .info-card-modern {
        background: white;
        border-radius: 15px;
        padding: 25px;
        margin: 15px 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border-left: 4px solid #3498db;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .info-card-modern:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    /* Timeline responsive */
    .timeline-container {
        background-color: #f8f9fa;
        padding: 25px;
        border-radius: 15px;
        margin: 25px 0;
        overflow-x: auto;
    }
    
    .timeline-item {
        min-width: 160px;
        text-align: center;
        margin: 0 15px;
        flex-shrink: 0;
    }
    
    .timeline-year {
        background: linear-gradient(135deg, #3498db, #2ecc71);
        color: white;
        padding: 12px;
        border-radius: 8px;
        font-weight: bold;
        font-size: 0.95rem;
    }
    
    .timeline-text {
        margin-top: 12px;
        font-size: 0.9rem;
        color: #2c3e50;
        line-height: 1.4;
    }
    </style>
    """, unsafe_allow_html=True)

    # En-t√™te principal am√©lior√©
    st.markdown("""
    <div style="background: linear-gradient(90deg, #3498db, #2ecc71);
                padding: 40px 25px; border-radius: 20px; margin-bottom: 35px; text-align: center;">
        <h1 style="color: white; font-size: 2.8rem; margin-bottom: 15px;
                   text-shadow: 0 2px 4px rgba(0,0,0,0.3); font-weight: 600;">
            üß© Comprendre les Troubles du Spectre Autistique
        </h1>
        <p style="color: rgba(255,255,255,0.95); font-size: 1.3rem;
                  max-width: 800px; margin: 0 auto; line-height: 1.6;">
            Une approche moderne et scientifique pour le d√©pistage pr√©coce
        </p>
    </div>
    """, unsafe_allow_html=True)

    # Image Ghibli (conserv√©e)
    image_url = "https://drive.google.com/file/d/1fY4J-WgufGTF6AgorFOspVKkHiRKEaiW/view?usp=drive_link"
    st.markdown(get_img_with_href(image_url, None, as_banner=True), unsafe_allow_html=True)

    # Section "Qu'est-ce que l'autisme ?" am√©lior√©e
    st.markdown("""
    <div class="info-card-modern">
        <h2 style="color: #3498db; margin-bottom: 25px; font-size: 2.2rem; text-align: center;">
            üî¨ Qu'est-ce que l'autisme ?
        </h2>
        <p style="font-size: 1.2rem; line-height: 1.8; text-align: justify;
                  max-width: 900px; margin: 0 auto; color: #2c3e50;">
            Les <strong>Troubles du Spectre Autistique (TSA)</strong> sont des conditions neurod√©veloppementales
            qui affectent la fa√ßon dont une personne per√ßoit et interagit avec le monde. Caract√©ris√©s par des
            diff√©rences dans la communication sociale, les interactions sociales et par des comportements ou
            int√©r√™ts restreints et r√©p√©titifs, les TSA se manifestent sur un large spectre de sympt√¥mes et de
            niveaux de fonctionnement.
        </p>
    </div>
    """, unsafe_allow_html=True)

    # Timeline de l'√©volution am√©lior√©e
    st.markdown("""
    <h2 style="color: #3498db; margin: 45px 0 25px 0; text-align: center; font-size: 2.2rem;">
        üìÖ √âvolution de la compr√©hension de l'autisme
    </h2>
    """, unsafe_allow_html=True)

    st.markdown("""
    <div class="timeline-container">
        <div style="display: flex; justify-content: space-between; min-width: 700px;">
            <div class="timeline-item">
                <div class="timeline-year">1943</div>
                <div class="timeline-text">Leo Kanner d√©crit l'autisme infantile</div>
            </div>
            <div class="timeline-item">
                <div class="timeline-year">1980</div>
                <div class="timeline-text">L'autisme entre dans le DSM-III</div>
            </div>
            <div class="timeline-item">
                <div class="timeline-year">2013</div>
                <div class="timeline-text">Le DSM-5 introduit les TSA</div>
            </div>
            <div class="timeline-item">
                <div class="timeline-year">Aujourd'hui</div>
                <div class="timeline-text">Approche neurodiversit√©</div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

   # Section "Le spectre autistique" avec HTML simplifi√©
    st.markdown("## üåà Le spectre autistique")

    st.markdown("""
    <div style="background-color: white; padding: 25px; border-radius: 15px;
               box-shadow: 0 4px 15px rgba(0,0,0,0.08); border-left: 4px solid #3498db;">
        <p style="font-size: 1.1rem; line-height: 1.7; color: #2c3e50; margin-bottom: 20px;">
            L'autisme est aujourd'hui compris comme un <strong>spectre</strong> de conditions,
            refl√©tant la grande variabilit√© des manifestations.
        </p>
        <p style="font-size: 1rem; color: #34495e; margin-bottom: 15px;">Cette conception reconna√Æt que :</p>
        <ul style="color: #34495e; padding-left: 25px; line-height: 1.6;">
            <li><strong>Chaque personne autiste</strong> pr√©sente un profil unique de forces et de d√©fis</li>
            <li><strong>Les manifestations</strong> varient en intensit√© et en expression</li>
            <li><strong>Les niveaux de soutien</strong> n√©cessaires peuvent diff√©rer consid√©rablement</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("### Les trois niveaux de soutien du DSM-5 :")

    # Utiliser les colonnes Streamlit avec des composants natifs
    niveau_col1, niveau_col2, niveau_col3 = st.columns(3)

    with niveau_col1:
        st.success("**Niveau 1**\n\nN√©cessite un soutien")

    with niveau_col2:
        st.warning("**Niveau 2**\n\nN√©cessite un soutien important")

    with niveau_col3:
        st.error("**Niveau 3**\n\nN√©cessite un soutien tr√®s important")

    # Section "Contexte du projet" corrig√©e avec composants natifs
    st.header("üìä Contexte du projet")

    # Utiliser un container natif au lieu du HTML
    with st.container():
        st.write("""
        Ce projet s'inscrit dans le cadre de l'analyse des donn√©es li√©es au diagnostic des
        **Troubles du Spectre de l'Autisme (TSA)**. L'autisme n'est pas une maladie
        mais une **diff√©rence neurologique** affectant le fonctionnement du cerveau.
        """)

        st.write("""
        Notre √©quipe a travaill√© sur **5 jeux de donn√©es publics** repr√©sentant plus de
        5000 personnes de diff√©rentes origines (√âtats-Unis, Nouvelle-Z√©lande, Arabie Saoudite...)
        pour identifier les facteurs associ√©s √† la pr√©sence d'un TSA.
        """)

    # Section pr√©valence avec m√©triques natives
    st.subheader("üìà Pr√©valence de l'autisme")

    # Utiliser les composants info natifs Streamlit
    st.info("""
    **Donn√©es cl√©s sur l'autisme :**

    ‚Ä¢ **1 √† 2%** de la population mondiale est concern√©e
    ‚Ä¢ En France, environ **700 000 personnes** sont concern√©es
    ‚Ä¢ Ratio historique gar√ßons/filles d'environ **4:1** (aujourd'hui remis en question)
    """)

    # Alternative avec m√©triques si vous pr√©f√©rez
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("Population mondiale", "1-2%", "700 000 en France")

    with col2:
        st.metric("Participants √©tudi√©s", "5000+", "Origines diverses")

    with col3:
        st.metric("Ratio historique", "4:1", "En √©volution")


    # Section "√Ä qui s'adresse ce projet" moderne
    st.markdown("""
    <h2 style="color: #3498db; margin: 45px 0 25px 0; text-align: center; font-size: 2.2rem;">
        üéØ √Ä qui s'adresse ce projet
    </h2>
    """, unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 10, 1])

    with col2:
        # Grille 2x2 pour les publics cibles
        col_a, col_b = st.columns(2)

        with col_a:
            st.markdown("""
            <div style="background: linear-gradient(135deg, #e8f4fd, #d1ecf1);
                       border-radius: 15px; padding: 25px; margin-bottom: 20px; height: 180px;
                       border-left: 4px solid #3498db;">
                <h4 style="color: #2980b9; margin-top: 0;">üî¨ Chercheurs en sant√©</h4>
                <p style="color: #34495e; line-height: 1.6; font-size: 0.95rem;">
                    Analyse d√©taill√©e permettant d'√©tayer des hypoth√®ses scientifiques et confirmer
                    des tendances cliniques dans le domaine des TSA.
                </p>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div style="background: linear-gradient(135deg, #fff8e1, #ffecb3);
                       border-radius: 15px; padding: 25px; height: 180px;
                       border-left: 4px solid #ffa726;">
                <h4 style="color: #f57c00; margin-top: 0;">üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Familles et particuliers</h4>
                <p style="color: #bf360c; line-height: 1.6; font-size: 0.95rem;">
                    Outils d'auto-√©valuation et d'information pour r√©pondre aux questions
                    ou suspicions de TSA et faciliter l'orientation.
                </p>
            </div>
            """, unsafe_allow_html=True)

        with col_b:
            st.markdown("""
            <div style="background: linear-gradient(135deg, #e8f5e8, #c8e6c9);
                       border-radius: 15px; padding: 25px; margin-bottom: 20px; height: 180px;
                       border-left: 4px solid #4caf50;">
                <h4 style="color: #388e3c; margin-top: 0;">ü©∫ Professionnels de sant√©</h4>
                <p style="color: #2e7d32; line-height: 1.6; font-size: 0.95rem;">
                    R√©sultats exploitables permettant d'am√©liorer le d√©pistage et la prise
                    en charge des personnes avec TSA.
                </p>
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div style="background: linear-gradient(135deg, #fce4ec, #f8bbd9);
                       border-radius: 15px; padding: 25px; height: 180px;
                       border-left: 4px solid #e91e63;">
                <h4 style="color: #c2185b; margin-top: 0;">üèõÔ∏è D√©cideurs publics</h4>
                <p style="color: #ad1457; line-height: 1.6; font-size: 0.95rem;">
                    Donn√©es et analyses pouvant informer les politiques publiques et orienter
                    les d√©cisions de financement.
                </p>
            </div>
            """, unsafe_allow_html=True)

    # Section "Accompagnement et soutien" am√©lior√©e
    st.markdown("""
    <h2 style="color: #3498db; margin: 45px 0 25px 0; text-align: center; font-size: 2.2rem;">
        ü§ù Accompagnement et soutien
    </h2>
    """, unsafe_allow_html=True)

    col1, col2, col3 = st.columns(3)

    support_cards = [
        {
            "title": "üå± Intervention pr√©coce",
            "items": ["Programmes de stimulation", "Accompagnement parental", "Th√©rapies comportementales", "Approches sensorimotrices"],
            "gradient": "linear-gradient(135deg, #3498db, #2980b9)"
        },
        {
            "title": "üìö Approches √©ducatives",
            "items": ["M√©thodes structur√©es", "Soutien √† l'inclusion", "Am√©nagements adapt√©s", "Programmes individualis√©s"],
            "gradient": "linear-gradient(135deg, #2ecc71, #27ae60)"
        },
        {
            "title": "üë• Suivi multidisciplinaire",
            "items": ["Orthophonie", "Ergoth√©rapie", "Psychomotricit√©", "Soutien psychologique"],
            "gradient": "linear-gradient(135deg, #9b59b6, #8e44ad)"
        }
    ]

    for i, (card, col) in enumerate(zip(support_cards, [col1, col2, col3])):
        with col:
            items_html = "".join([f"<li>{item}</li>" for item in card['items']])
            st.markdown(f"""
            <div style="background: {card['gradient']}; color: white;
                       padding: 25px; border-radius: 15px; height: 280px;
                       box-shadow: 0 6px 20px rgba(0,0,0,0.15);">
                <h3 style="border-bottom: 2px solid rgba(255,255,255,0.3);
                          padding-bottom: 12px; margin-bottom: 20px; font-size: 1.3rem;">
                    {card['title']}
                </h3>
                <ul style="padding-left: 20px; margin: 0; line-height: 1.8;">
                    {items_html}
                </ul>
            </div>
            """, unsafe_allow_html=True)

    # Section "Caract√©ristiques principales" am√©lior√©e
    st.markdown("""
    <h2 style="color: #3498db; margin: 45px 0 25px 0; text-align: center; font-size: 2.2rem;">
        üß† Caract√©ristiques principales
    </h2>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        <div class="info-card-modern" style="border-left-color: #3498db;">
            <h3 style="color: #3498db; margin-bottom: 20px;">üí¨ Communication sociale</h3>
            <ul style="line-height: 1.8; color: #2c3e50; padding-left: 20px;">
                <li>Diff√©rences dans la communication non verbale</li>
                <li>D√©fis dans les interactions sociales</li>
                <li>Interpr√©tation litt√©rale du langage</li>
                <li>Difficult√©s avec les r√®gles sociales implicites</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("""
        <div class="info-card-modern" style="border-left-color: #2ecc71;">
            <h3 style="color: #2ecc71; margin-bottom: 20px;">üîÑ Comportements et int√©r√™ts</h3>
            <ul style="line-height: 1.8; color: #2c3e50; padding-left: 20px;">
                <li>Int√©r√™ts sp√©cifiques et intenses</li>
                <li>Attachement aux routines</li>
                <li>Mouvements r√©p√©titifs</li>
                <li>Sensibilit√©s sensorielles particuli√®res</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

    # Section "Notre approche" finale
    st.markdown("""
    <h2 style="color: #3498db; margin: 45px 0 25px 0; text-align: center; font-size: 2.2rem;">
        üöÄ Notre approche
    </h2>
    """, unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 10, 1])

    with col2:
        st.markdown("""
        <div style="background: linear-gradient(90deg, #3498db, #2ecc71);
                   padding: 35px; border-radius: 20px; text-align: center; color: white;
                   box-shadow: 0 8px 25px rgba(52, 152, 219, 0.3);">
            <p style="font-size: 1.3rem; max-width: 800px; margin: 0 auto; line-height: 1.7;">
                Notre plateforme combine les connaissances scientifiques actuelles et l'intelligence artificielle
                pour am√©liorer la d√©tection pr√©coce et l'accompagnement des personnes autistes,
                dans une vision respectueuse de la neurodiversit√©.
            </p>
        </div>
        """, unsafe_allow_html=True)

    # Avertissement final stylis√©
    st.markdown("""
    <div style="margin: 40px 0 30px 0; padding: 20px; border-radius: 12px;
               border-left: 4px solid #e74c3c; background: linear-gradient(135deg, #fff5f5, #ffebee);
               box-shadow: 0 4px 12px rgba(231, 76, 60, 0.1);">
        <p style="font-size: 1rem; color: #c0392b; text-align: center; margin: 0; line-height: 1.6;">
            <strong style="color: #e74c3c;">‚ö†Ô∏è Avertissement :</strong>
            Les informations pr√©sent√©es sur cette plateforme sont √† titre informatif uniquement.
            Elles ne remplacent pas l'avis m√©dical professionnel.
        </p>
    </div>
    """, unsafe_allow_html=True)


def show_data_exploration():
    import plotly.express as px
    import plotly.graph_objects as go
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    from scipy.stats import chi2_contingency, mannwhitneyu

    df, df_ds1, df_ds2, df_ds3, df_ds4, df_ds5, df_stats = load_dataset()
    st.markdown("""
<div style="background: linear-gradient(90deg, #3498db, #2ecc71);
            padding: 40px 25px; border-radius: 20px; margin-bottom: 35px; text-align: center;">
    <h1 style="color: white; font-size: 2.8rem; margin-bottom: 15px;
               text-shadow: 0 2px 4px rgba(0,0,0,0.3); font-weight: 600;">
        üîç Exploration des Donn√©es TSA
    </h1>
    <p style="color: rgba(255,255,255,0.95); font-size: 1.3rem;
              max-width: 800px; margin: 0 auto; line-height: 1.6;">
        Une approche moderne et scientifique pour le d√©pistage pr√©coce
    </p>
</div>
""", unsafe_allow_html=True)

    if 'expanders_initialized' not in st.session_state:
        st.session_state.expanders_initialized = {
            'structure': True,
            'valeurs_manquantes': True,
            'pipeline': True,
            'variables_cles': True,
            'questionnaire': True,
            'composite': True,
            'statistiques': True,
            'correlation': True,
            'famd': True
        }

    with st.expander("üìÇ Structure des Donn√©es", expanded=True):
        st.markdown("""
            <div style="background:#fff3e0; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.05)">
                <h4 style="color:#e65100; border-bottom:1px solid #ffe0b2; padding-bottom:8px">Jeux de Donn√©es</h4>
                <ul style="padding-left:20px">
                    <li>'üìÅ' <strong>Dataset 1:</strong> <a href="https://www.kaggle.com/datasets/faizunnabi/autism-screening" target="_blank">Autism Screening Dataset</a> (n=1985)</li>
                    <li>'üìÅ' <strong>Dataset 2:</strong> <a href="https://archive.ics.uci.edu/ml/datasets/Autism+Screening+Adult" target="_blank">UCI Machine Learning Repository</a> (n=704)</li>
                    <li>'üìÅ' <strong>Dataset 3:</strong> <a href="https://data.gov.sa/" target="_blank">Open Data Saudi Arabia</a> (n=506)</li>
                    <li>'üìÅ' <strong>Dataset 4:</strong> <a href="https://www.kaggle.com/datasets/fabdelja/autism-screening-for-toddlers" target="_blank">Autism Screening for Toddlers</a> (n=1054)</li>
                    <li>'üìÅ' <strong>Dataset 5:</strong> <a href="https://www.kaggle.com/datasets/reevesii/global-autism-data" target="_blank">Global Autism Data</a> (n=800)</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
        tab_main, tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "Dataset Final", "Dataset 1", "Dataset 2", "Dataset 3", "Dataset 4", "Dataset 5"
        ])

        with tab_main:
            st.caption("Dataset Final")
            st.dataframe(df.head(5), use_container_width=True)
        with tab1:
            st.caption("Dataset 1")
            st.dataframe(df_ds1.head(5), use_container_width=True)
        with tab2:
            st.caption("Dataset 2")
            st.dataframe(df_ds2.head(5), use_container_width=True)
        with tab3:
            st.caption("Dataset 3")
            st.dataframe(df_ds3.head(5), use_container_width=True)
        with tab4:
            st.caption("Dataset 4")
            st.dataframe(df_ds4.head(5), use_container_width=True)
        with tab5:
            st.caption("Dataset 5")
            st.dataframe(df_ds5.head(5), use_container_width=True)

    with st.expander("üßº Pipeline de Nettoyage", expanded=True):
        st.markdown("""
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">√âtapes de Transformation des Donn√©es</h3>
            <p style="color: #7f8c8d;">Processus automatis√© pour pr√©parer les donn√©es √† l'analyse.</p>
        </div>
        """, unsafe_allow_html=True)
        col1, col2 = st.columns([1, 3])
        with col1:
            st.markdown("""
            <div style="background-color: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.05);">
                <h4 style="color: #3498db; margin-top: 0;">√âtapes de Transformation</h4>
                <ol style="padding-left: 20px; color: #2c3e50;">
                    <li><b>Uniformisation</b> des colonnes</li>
                    <li><b>Typage</b> des variables</li>
                    <li><b>Gestion</b> des valeurs manquantes</li>
                    <li><b>Encodage</b> cat√©goriel</li>
                    <li><b>Normalisation</b> des √©chelles</li>
                </ol>
            </div>
            """, unsafe_allow_html=True)
        with col2:
            avant_tab, apres_tab = st.tabs(["Avant Nettoyage", "Apr√®s Nettoyage"])
            with avant_tab:
                raw_data_sample = pd.DataFrame({
                    'A10_Score': [7, 5, None, 3],
                    'Age_Years': [29, None, 'unknown', 383],
                    'asd_traits': ['yes', 'no', 'no', 'yes']
                })
                st.dataframe(raw_data_sample.style.highlight_null(color='#ffcdd2'), use_container_width=True)
            with apres_tab:
                clean_data_sample = pd.DataFrame({
                    'A10': [7, 5, 4, 3],
                    'Age': [29, 35, 42, 38],
                    'TSA': ['Yes', 'No', 'No', 'Yes'],
                    'Statut_testeur': ['Famille', 'Famille', 'Famille', 'Famille']
                })
                st.dataframe(clean_data_sample, use_container_width=True)
                metrics_col1, metrics_col2 = st.columns(2)
                with metrics_col1:
                    st.metric("R√©duction des valeurs manquantes", "92%", "10% ‚Üí 0.8%")
                with metrics_col2:
                    st.metric("Anomalies corrig√©es", "100%", "14 anomalies d√©tect√©es")
                pass

    with st.expander("üìâ Analyse des Valeurs Manquantes", expanded=True):
        st.markdown("""
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">Analyse des Valeurs Manquantes</h3>
            <p style="color: #7f8c8d;">Visualisation et quantification des donn√©es manquantes dans le jeu de donn√©es.</p>
        </div>
        """, unsafe_allow_html=True)
        missing_percent = (df.isnull().sum() / len(df)) * 100
        missing_info = pd.DataFrame({
            'Colonne': missing_percent.index,
            'Pourcentage': missing_percent.values
        })
        missing_info = missing_info[missing_info['Pourcentage'] > 0].sort_values('Pourcentage', ascending=False)
        if not missing_info.empty:
            col1, col2 = st.columns([3, 2])
            with col1:
                fig = px.bar(
                    missing_info,
                    x='Pourcentage',
                    y='Colonne',
                    orientation='h',
                    title="Pourcentage de valeurs manquantes par colonne",
                    color='Pourcentage',
                    color_continuous_scale=px.colors.sequential.Blues,
                    text='Pourcentage'
                )
                fig.update_traces(texttemplate='%{text:.2f}%', textposition='outside')
                fig.update_layout(
                    height=400,
                    xaxis_title="Pourcentage (%)",
                    yaxis_title="",
                    coloraxis_showscale=False,
                    margin=dict(l=20, r=20, t=40, b=20),
                )
                st.plotly_chart(fig, use_container_width=True)
            with col2:
                st.metric(
                    "Nombre de colonnes avec valeurs manquantes",
                    missing_info.shape[0],
                    delta=f"{missing_info.shape[0]/df.shape[1]:.1%} des colonnes"
                )
                st.markdown("### D√©tail des valeurs manquantes")
                st.dataframe(missing_info, use_container_width=True)
                total_missing = (df.isnull().sum().sum() / (df.shape[0] * df.shape[1])) * 100
                st.info(f"Taux global de donn√©es manquantes : {total_missing:.2f}%")
        else:
            st.success("‚úÖ Aucune valeur manquante d√©tect√©e dans le jeu de donn√©es.")


    with st.expander("üìà Statistiques du Dataset Final", expanded=True):
        st.subheader("Statistiques Descriptives")
        tab1, tab2 = st.tabs(["Num√©riques", "Cat√©gorielles"])
        with tab1:
            st.write(df.describe())
        with tab2:
            categorical_stats = df.select_dtypes(include=['object']).describe().T
            st.dataframe(categorical_stats)

    with st.expander("üìä Distribution des Variables Cl√©s", expanded=True):
        st.markdown("""
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">Distribution des Variables Cl√©s</h3>
            <p style="color: #7f8c8d;">Analyse interactive des distributions par variable.</p>
        </div>
        """, unsafe_allow_html=True)

        # Dictionnaire de commentaires pour les variables
        variable_comments = {
            'A1': "Variable li√©e au questionnaire AQ-10 : √©value la capacit√© √† remarquer des d√©tails que d'autres pourraient manquer.",
            'A2': "Variable li√©e au questionnaire AQ-10 : √©value la capacit√© √† imaginer des histoires.",
            'A3': "Variable li√©e au questionnaire AQ-10 : √©value la pr√©f√©rence pour la socialisation vs activit√©s solitaires.",
            'A4': "Variable li√©e au questionnaire AQ-10 : √©value la tendance √† se concentrer sur un sujet sp√©cifique.",
            'A5': "Variable li√©e au questionnaire AQ-10 : √©value l'attention aux d√©tails num√©riques et dates.",
            'A6': "Variable li√©e au questionnaire AQ-10 : √©value la capacit√© √† comprendre les intentions des autres.",
            'A7': "Variable li√©e au questionnaire AQ-10 : √©value la capacit√© √† r√©agir de mani√®re appropri√©e socialement.",
            'A8': "Variable li√©e au questionnaire AQ-10 : √©value les interactions sociales en groupe.",
            'A9': "Variable li√©e au questionnaire AQ-10 : √©value la reconnaissance des √©motions chez autrui.",
            'A10': "Variable li√©e au questionnaire AQ-10 : √©value la capacit√© √† g√©rer plusieurs t√¢ches simultan√©ment.",
            'Jaunisse': "Indique si l'individu a eu une jaunisse √† la naissance, facteur potentiellement associ√© au risque d'autisme.",
            'Statut_testeur': "Indique la relation entre le testeur et la personne √©valu√©e (Famille, Professionnel de sant√©, Individu, etc.).",
        }

        # D√©finition par d√©faut pour les variables sans commentaire sp√©cifique
        default_comment = "Distribution de la variable dans l'ensemble du dataset."

        all_columns = [col for col in df.columns if col != 'TSA']
        analysis_var = st.selectbox("Choisir une variable √† analyser", all_columns, key="analysis_var_in_exploration")

        # Afficher le commentaire pour la variable s√©lectionn√©e
        comment = variable_comments.get(analysis_var, default_comment)
        st.info(comment)

        col1, col2 = st.columns(2)
        with col1:
            color_var = None  # Ne pas utiliser la coloration par TSA
            if analysis_var == 'Jaunisse':
                fig = px.histogram(df, x='Jaunisse',
                                   title=f"Distribution de la jaunisse dans le dataset")
                st.plotly_chart(fig, use_container_width=True)
            else:
                is_categorical_aq = analysis_var.startswith('A') and analysis_var[1:].isdigit() and len(analysis_var) <= 3
                if is_categorical_aq:
                    fig = create_plotly_figure(df, x=analysis_var, color=color_var, kind='bar', title=f"Distribution de {analysis_var} (cat√©gorielle)")
                else:
                    fig = create_plotly_figure(df, x=analysis_var, color=color_var, kind='histogram', title=f"Distribution de {analysis_var}")
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
        with col2:
            stats = df[analysis_var].describe().to_frame().T
            st.dataframe(stats, use_container_width=True)


    with st.expander("üìù Analyse des R√©ponses au Questionnaire AQ-10", expanded=True):
        st.subheader("Analyse des R√©ponses au Questionnaire AQ-10")
        question_tabs = st.tabs([f"Q{i+1}" for i in range(10)])
        for i, tab in enumerate(question_tabs):
            with tab:
                col1, col2 = st.columns([2,3])
                with col1:
                    st.write(f"**Question A{i+1} :**")
                    st.markdown("> " + get_question_text(i+1))
                with col2:
                    try:
                        values_counts = df[f'A{i+1}'].value_counts().reset_index()
                        values_counts.columns = [f'A{i+1}', 'count']
                        color_discrete_map = {0: "#2ecc71", 1: "#3498db"}
                        fig = px.pie(
                            values_counts,
                            values='count',
                            names=f'A{i+1}',
                            color=f'A{i+1}',
                            color_discrete_map=color_discrete_map,
                            title=f"R√©partition des r√©ponses A{i+1}"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        st.error(f"Erreur lors de la cr√©ation du graphique: {str(e)}")

    with st.expander("‚öôÔ∏è Cr√©ation de Variables Composites", expanded=True):
        st.subheader("Cr√©ation de Variables Composites")
        col1, col2 = st.columns(2)
        with col1:
            st.write("**Score A10 :**")
            st.markdown("""
            $$
            \\text{Score\\_A10} = \\sum_{i=1}^{10} A_i
            $$
            """)
            if 'TSA' in df.columns:
                yes_mean = df[df['TSA'] == 'Yes']['Score_A10'].mean()
                no_mean = df[df['TSA'] == 'No']['Score_A10'].mean()
                st.metric("Score Moyen (TSA)", f"{yes_mean:.1f} ¬± {df[df['TSA'] == 'Yes']['Score_A10'].std():.1f}")
                st.metric("Score Moyen (Non-TSA)", f"{no_mean:.1f} ¬± {df[df['TSA'] == 'No']['Score_A10'].std():.1f}")
            else:
                overall_mean = df['Score_A10'].mean()
                st.metric("Score Moyen", f"{overall_mean:.1f} ¬± {df['Score_A10'].std():.1f}")
        with col2:
            color_var = 'TSA' if 'TSA' in df.columns else None
            fig = create_plotly_figure(df, y='Score_A10', color=color_var, kind='violin', title="Distribution des Scores")
            if fig:
                st.plotly_chart(fig, use_container_width=True)

    with st.expander("üîó Matrice de Corr√©lation", expanded=True):
        try:
            df_corr = df.copy()
            if 'Jaunisse' in df_corr.columns:
                df_corr = df_corr.drop(columns=['Jaunisse'])
            if 'TSA' in df_corr.columns:
                df_corr['TSA_num'] = df_corr['TSA'].map({'Yes': 1, 'No': 0})
            categorical_cols = df_corr.select_dtypes(include=['object']).columns
            if not categorical_cols.empty:
                from sklearn.preprocessing import OneHotEncoder
                ohe = OneHotEncoder(sparse_output=False, drop='first')
                encoded_data = ohe.fit_transform(df_corr[categorical_cols])
                feature_names = ohe.get_feature_names_out(categorical_cols)
                encoded_df = pd.DataFrame(encoded_data, columns=feature_names)
                numeric_df = df_corr.select_dtypes(exclude=['object']).reset_index(drop=True)
                df_corr_processed = pd.concat([numeric_df, encoded_df], axis=1)
                corr_matrix = df_corr_processed.corr(numeric_only=True)
            else:
                df_corr_processed = df_corr.select_dtypes(exclude=['object'])
                corr_matrix = df_corr_processed.corr(numeric_only=True)

            mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
            fig, ax = plt.subplots(figsize=(14, 12))
            cmap = sns.diverging_palette(200, 120, as_cmap=True)
            sns.heatmap(
                corr_matrix,
                mask=mask,
                cmap=cmap,
                vmax=1.0,
                vmin=-1.0,
                center=0,
                square=True,
                linewidths=0.8,
                fmt='.2f',
                annot=True,
                annot_kws={"size": 9, "weight": "bold"},
                cbar_kws={"shrink": 0.8, "label": "Coefficient de corr√©lation"}
            )
            plt.title("Matrice de corr√©lation des variables", fontsize=16, pad=20)
            plt.xticks(rotation=45, ha='right', fontsize=9)
            plt.yticks(fontsize=9)
            plt.tight_layout()
            st.pyplot(fig)
        except Exception as e:
            st.error(f"Erreur lors du calcul de la matrice de corr√©lation: {str(e)}")


    with st.expander("üß™ Tests Statistiques", expanded=True):
        st.markdown("""
        <div style="background-color: #f0f7ff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <h4 style="color: #3498db; margin-top: 0;">Tests d'association statistique</h4>
            <p>√âvaluation des relations entre variables et diagnostic TSA</p>
        </div>
        """, unsafe_allow_html=True)

        test_type = st.radio(
            "Choisir le type de test:",
            ["Chi-carr√© (variables cat√©gorielles)", "Mann-Whitney (variables num√©riques)"],
            key="stat_test_type"
        )

        if test_type == "Chi-carr√© (variables cat√©gorielles)":
            from scipy.stats import chi2_contingency

            st.markdown("""
            **Test d'ind√©pendance du Chi-carr√© :** √âvalue si deux variables cat√©gorielles sont ind√©pendantes.
            Un p-value < 0.05 sugg√®re une relation significative.
            """)

            df = df.copy()
            categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
            aq_columns = [col for col in df.columns if col.startswith('A') and col[1:].isdigit()]
            categorical_cols.extend([col for col in aq_columns if col not in categorical_cols])

            if 'TSA' in categorical_cols:
                categorical_cols.remove('TSA')

                if categorical_cols:
                    cat_var = st.selectbox(
                        "S√©lectionner une variable cat√©gorielle:",
                        categorical_cols,
                        key="chi2_var_selector"
                    )

                    try:
                        contingency_table = pd.crosstab(df[cat_var], df['TSA'])
                        chi2_stat, p_val, dof, expected = chi2_contingency(contingency_table)

                        # R√©duction de la largeur avec colonnes optimis√©es
                        col1, col2, col3 = st.columns([2, 2, 3])

                        with col1:
                            st.markdown("### Table de contingence")
                            st.dataframe(contingency_table, use_container_width=True)

                        with col2:
                            st.markdown("### R√©sultats du test")
                            st.metric("Statistique œá¬≤", f"{chi2_stat:.3f}")
                            st.metric("p-value", f"{p_val:.5f}")
                            st.metric("Degr√©s de libert√©", dof)

                            if p_val < 0.05:
                                st.success("**Significatif** (p < 0.05)")
                            else:
                                st.info("**Non significatif** (p > 0.05)")

                        with col3:
                            # Graphique plus compact
                            contingency_percent = contingency_table.div(contingency_table.sum(axis=1), axis=0) * 100
                            fig = px.bar(
                                contingency_percent.reset_index().melt(id_vars=cat_var),
                                x=cat_var, y='value', color='TSA',
                                barmode='group',
                                color_discrete_map=palette,
                                labels={'value': 'Pourcentage (%)'},
                                title=f"Distribution par diagnostic"
                            )
                            fig.update_layout(height=300)  # Hauteur r√©duite
                            st.plotly_chart(fig, use_container_width=True)

                    except Exception as e:
                        st.error(f"Erreur lors du test Chi-carr√©: {str(e)}")
                else:
                    st.warning("Aucune variable cat√©gorielle trouv√©e.")

        else:  # Mann-Whitney
            st.markdown("""
            **Test de Mann-Whitney U :** Compare les distributions de deux groupes ind√©pendants.
            Un p-value < 0.05 sugg√®re une diff√©rence significative.
            """)

            numeric_cols = df.select_dtypes(include=['float', 'int']).columns.tolist()
            numeric_cols = [col for col in numeric_cols if not (col.startswith('A') and col[1:].isdigit() and len(col) <= 3)]

            if 'Score_A10' in numeric_cols:
                numeric_cols.remove('Score_A10')
                numeric_cols = ['Score_A10'] + numeric_cols

            if numeric_cols:
                num_var = st.selectbox(
                    "S√©lectionner une variable num√©rique:",
                    numeric_cols,
                    key="mw_var_selector"
                )

                try:
                    if 'TSA' in df.columns and df['TSA'].nunique() >= 2:
                        yes_group = df[df['TSA'] == 'Yes'][num_var].dropna()
                        no_group = df[df['TSA'] == 'No'][num_var].dropna()

                        if len(yes_group) > 0 and len(no_group) > 0:
                            stat, p_val = mannwhitneyu(yes_group, no_group, alternative='two-sided')

                            # Disposition compacte en 3 colonnes
                            col1, col2, col3 = st.columns([2, 2, 3])

                            with col1:
                                st.markdown("### Statistiques")
                                group_stats = df.groupby('TSA')[num_var].agg(['count', 'mean', 'std']).round(2)
                                st.dataframe(group_stats, use_container_width=True)

                            with col2:
                                st.markdown("### R√©sultats")
                                st.metric("Statistique U", f"{stat:.1f}")
                                st.metric("p-value", f"{p_val:.5f}")

                                if p_val < 0.05:
                                    st.success("**Significatif**")
                                else:
                                    st.info("**Non significatif**")

                            with col3:
                                # Box plot compact
                                fig = px.box(
                                    df.dropna(subset=[num_var]), x='TSA', y=num_var,
                                    color='TSA', color_discrete_map=palette,
                                    title=f"Comparaison {num_var}"
                                )
                                fig.update_layout(height=300)  # Hauteur r√©duite
                                st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.warning("Donn√©es insuffisantes pour le test.")
                    else:
                        st.warning("Dataset doit contenir une colonne 'TSA' avec au moins deux groupes.")
                except Exception as e:
                    st.error(f"Erreur lors du test: {str(e)}")
            else:
                st.warning("Aucune variable num√©rique trouv√©e.")

    with st.expander("üìê Analyse Factorielle (FAMD)", expanded=True):
        st.markdown("""
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">Analyse Factorielle Mixte (FAMD)</h3>
            <p style="color: #7f8c8d;">R√©duction de dimensions pour visualiser la structure des donn√©es et les relations entre variables.</p>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        L'**Analyse Factorielle de Donn√©es Mixtes (FAMD)** est une m√©thode particuli√®rement adapt√©e √† nos donn√©es car elle permet de traiter simultan√©ment:
        - Des variables num√©riques (comme l'√¢ge, les scores A1-A10)
        - Des variables cat√©gorielles (comme le genre, l'ethnie, les ant√©c√©dents familiaux)

        Cette m√©thode nous permet de projeter les donn√©es sur un plan √† deux dimensions pour visualiser les relations entre les variables et les individus.
        """)

        try:
            import prince
            from sklearn import utils
            import numpy as np

            df_famd = df.copy()
            if 'Jaunisse' in df_famd.columns:
                df_famd = df_famd.drop(columns=['Jaunisse'])
            df_famd = df_famd.reset_index(drop=True)

            class FAMD_Custom(prince.FAMD):
                """Classe personnalis√©e pour contourner le probl√®me d'indexation bool√©enne dans Prince"""
                def transform(self, X):
                    utils.validation.check_is_fitted(self, 's_')
                    return self.row_coordinates(X)

                def column_correlations_custom(self, X):
                    """M√©thode personnalis√©e pour calculer les corr√©lations des colonnes"""
                    row_pc = self.row_coordinates(X)
                    correlations = {}

                    for feature in X.columns:
                        if X[feature].dtype.kind in 'ifc':
                            corrs = []
                            for component in row_pc.columns:
                                corrs.append(np.corrcoef(X[feature], row_pc[component])[0, 1])
                            correlations[feature] = corrs

                        else:
                            means = {}
                            for component in row_pc.columns:
                                means[component] = []

                            for category in X[feature].unique():
                                mask = (X[feature] == category).values
                                for component in row_pc.columns:
                                    coord_mean = row_pc.loc[mask, component].mean()
                                    means[component].append(coord_mean)

                            max_abs = max(abs(v) for comp_means in means.values() for v in comp_means)
                            if max_abs > 0:
                                for component in means:
                                    means[component] = [v/max_abs for v in means[component]]

                            corrs = []
                            for component in row_pc.columns:
                                corrs.append(sum(means[component])/len(means[component]))
                            correlations[feature] = corrs

                    return pd.DataFrame(
                        data=[[correlations[feature][i] for feature in X.columns] for i in range(len(row_pc.columns))],
                        columns=X.columns
                    ).T

            for col in df_famd.select_dtypes(include=['object']).columns:
                df_famd[col] = df_famd[col].astype('category')

            for col in df_famd.select_dtypes(include=['number']).columns:
                df_famd[col] = df_famd[col].astype('float64')

            df_famd = df_famd.dropna()
            df_famd = df_famd.reset_index(drop=True)

            n_components = min(5, min(df_famd.shape) - 1)
            X_famd = df_famd.copy()

            famd = FAMD_Custom(
                n_components=n_components,
                n_iter=10,
                random_state=42,
                copy=True,
                engine='sklearn'
            )
            famd = famd.fit(X_famd)

            coordinates = famd.transform(X_famd)

            eigenvalues = famd.eigenvalues_
            explained_variance = eigenvalues / sum(eigenvalues)

            famd_tabs = st.tabs([
                "Projection des individus",
                "Cercle des corr√©lations",
                "FAMD score A10",
                "Cercle de corr√©lation Score A10",
                "Interpr√©tation"
            ])

            with famd_tabs[0]:
                st.subheader("Projection des individus")

                col1, col2 = st.columns([2, 1])

                with col1:
                    fig, ax = plt.subplots(figsize=(8, 5))
                    if 'TSA' in X_famd.columns:
                        coordinates_array = coordinates.values
                        for i, category in enumerate(X_famd['TSA'].unique()):
                            mask_array = (X_famd['TSA'] == category).values
                            color = "#e74c3c" if category == "Yes" else "#3498db"
                            ax.scatter(
                                coordinates_array[mask_array, 0],
                                coordinates_array[mask_array, 1],
                                label=category,
                                color=color,
                                alpha=0.6,
                                s=30
                            )
                        ax.legend(title="TSA")
                    else:
                        ax.scatter(coordinates.values[:, 0], coordinates.values[:, 1], alpha=0.7, s=30)

                    ax.set_xlabel(f'Comp. 1 ({explained_variance[0]:.1%})')
                    ax.set_ylabel(f'Comp. 2 ({explained_variance[1]:.1%})')
                    ax.set_title('Projection des individus', fontsize=12)
                    ax.grid(True, linestyle='--', alpha=0.7)
                    st.pyplot(fig)

                with col2:
                    st.markdown("### Variance expliqu√©e")
                    for i, var in enumerate(explained_variance[:3]):
                        st.metric(f"Composante {i+1}", f"{var:.1%}")

            with famd_tabs[1]:
                st.subheader("Cercle des corr√©lations")

                col1, col2 = st.columns([3, 2])

                with col1:
                    try:
                        if hasattr(famd, 'column_correlations'):
                            column_corr = famd.column_correlations(X_famd)
                        else:
                            column_corr = famd.column_correlations_custom(X_famd)

                        fig, ax = plt.subplots(figsize=(6, 6))
                        circle = plt.Circle((0, 0), 1, color='gray', fill=False, linestyle='--')
                        ax.add_artist(circle)

                        ax.axhline(y=0, color='gray', linestyle='-', alpha=0.3)
                        ax.axvline(x=0, color='gray', linestyle='-', alpha=0.3)

                        for i, var in enumerate(column_corr.index):
                            x = column_corr.iloc[i, 0]
                            y = column_corr.iloc[i, 1]

                            ax.arrow(0, 0, x, y, head_width=0.05, head_length=0.05, fc='blue', ec='blue', alpha=0.7)

                            # Texte plus petit et s√©lectif
                            if var == 'Score_A10':
                                ax.text(x*1.1, y*1.1, var, fontsize=10, color='red', fontweight='bold')
                            elif var in ['TSA', 'Age', 'Genre']:
                                ax.text(x*1.1, y*1.1, var, fontsize=8, color='green')

                        ax.set_xlim(-1.1, 1.1)
                        ax.set_ylim(-1.1, 1.1)
                        ax.set_xlabel(f'Comp. 1 ({explained_variance[0]:.1%})', fontsize=10)
                        ax.set_ylabel(f'Comp. 2 ({explained_variance[1]:.1%})', fontsize=10)
                        ax.set_title('Cercle des corr√©lations', fontsize=12)
                        ax.grid(True, linestyle='--', alpha=0.5)
                        st.pyplot(fig)

                    except Exception as e:
                        st.warning(f"Impossible de g√©n√©rer le cercle : {str(e)}")

                with col2:
                    st.markdown("### Variables principales")
                    st.write("Variables les plus contributives :")
                    key_vars = ['Score_A10', 'TSA', 'Age', 'Genre']
                    for var in key_vars:
                        if var in column_corr.index:
                            contrib = np.sqrt(column_corr.loc[var, 0]**2 + column_corr.loc[var, 1]**2)
                            st.write(f"‚Ä¢ **{var}** : {contrib:.3f}")

            with famd_tabs[2]:
                st.subheader("FAMD centr√©e sur Score A10")
                st.markdown("""
                Analyse sp√©cifique mettant en √©vidence la relation entre le Score A10 et le diagnostic TSA.
                """)

                try:
                    if 'Score_A10' in X_famd.columns:
                        a_vars_to_exclude = []
                        for i in range(1, 11):
                            col_name = f'A{i}'
                            if col_name in X_famd.columns:
                                a_vars_to_exclude.append(col_name)

                        # Cr√©er un nouveau dataframe en excluant explicitement les variables A1-A10
                        X_filtered = X_famd.drop(columns=a_vars_to_exclude, errors='ignore').copy()

                        # V√©rification que toutes les variables A1-A10 sont bien exclues
                        remaining_a_vars = [col for col in X_filtered.columns if col.startswith('A') and col[1:].isdigit()]
                        if remaining_a_vars:
                            st.warning(f"Variables A r√©siduelles : {remaining_a_vars}")
                            X_filtered = X_filtered.drop(columns=remaining_a_vars, errors='ignore')

                        # D√©finir les variables cl√©s pour l'analyse FAMD centr√©e sur Score_A10
                        key_vars = ['Score_A10', 'TSA']
                        for var in ['Age', 'Genre', 'Ethnie']:
                            if var in X_filtered.columns:
                                key_vars.append(var)

                        # Cr√©er le dataset final pour l'analyse
                        X_a10 = X_filtered[key_vars].copy()

                        famd_a10 = FAMD_Custom(
                            n_components=min(3, len(key_vars)-1),
                            n_iter=10,
                            random_state=42,
                            copy=True,
                            engine='sklearn'
                        )
                        famd_a10 = famd_a10.fit(X_a10)
                        coords_a10 = famd_a10.transform(X_a10)

                        # Disposition en colonnes comme la projection des individus
                        col1, col2 = st.columns([2, 1])

                        with col1:
                            # Cr√©ation du graphique de projection avec m√™me taille que projection individus
                            fig, ax = plt.subplots(figsize=(8, 5))
                            coords_array = coords_a10.values

                            if 'TSA' in X_a10.columns:
                                for category in X_a10['TSA'].unique():
                                    mask = (X_a10['TSA'] == category).values
                                    color = "#e74c3c" if category == "Yes" else "#3498db"
                                    ax.scatter(
                                        coords_array[mask, 0],
                                        coords_array[mask, 1],
                                        label=category,
                                        color=color,
                                        alpha=0.7,
                                        s=25
                                    )
                                ax.legend(title="TSA")

                            ax.set_xlabel('Composante 1', fontsize=10)
                            ax.set_ylabel('Composante 2', fontsize=10)
                            ax.set_title('FAMD centr√©e Score_A10', fontsize=12)
                            ax.grid(True, linestyle='--', alpha=0.7)
                            st.pyplot(fig)

                        with col2:
                            st.markdown("### Variance Score A10")
                            eigenvalues_a10 = famd_a10.eigenvalues_
                            explained_variance_a10 = eigenvalues_a10 / sum(eigenvalues_a10)
                            for i, var in enumerate(explained_variance_a10[:3]):
                                st.metric(f"Composante {i+1}", f"{var:.1%}")
                    else:
                        st.warning("La variable Score_A10 n'est pas disponible dans le dataset.")
                except Exception as e:
                    st.warning(f"Erreur lors de l'analyse FAMD : {str(e)}")

            with famd_tabs[3]:
                st.subheader("Cercle de corr√©lation Score A10")

                col1, col2 = st.columns([3, 2])

                with col1:
                    try:
                        if 'Score_A10' in X_famd.columns:
                            # Utiliser X_a10 et famd_a10 d√©finis pr√©c√©demment
                            if hasattr(famd_a10, 'column_correlations'):
                                column_corr_a10 = famd_a10.column_correlations(X_a10)
                            else:
                                st.info("Utilisation d'une m√©thode alternative pour calculer les corr√©lations...")
                                column_corr_a10 = famd_a10.column_correlations_custom(X_a10)

                            fig, ax = plt.subplots(figsize=(6, 6))
                            circle = plt.Circle((0, 0), 1, color='gray', fill=False, linestyle='--')
                            ax.add_artist(circle)

                            ax.axhline(y=0, color='gray', linestyle='-', alpha=0.3)
                            ax.axvline(x=0, color='gray', linestyle='-', alpha=0.3)

                            for i, var in enumerate(column_corr_a10.index):
                                x = column_corr_a10.iloc[i, 0]
                                y = column_corr_a10.iloc[i, 1]

                                ax.arrow(0, 0, x, y, head_width=0.05, head_length=0.05, fc='blue', ec='blue', alpha=0.7)

                                # Mise en √©vidence du Score_A10
                                if var == 'Score_A10':
                                    ax.text(x*1.1, y*1.1, var, fontsize=12, color='red', fontweight='bold')
                                else:
                                    ax.text(x*1.1, y*1.1, var, fontsize=10)

                            ax.set_xlim(-1.1, 1.1)
                            ax.set_ylim(-1.1, 1.1)
                            ax.set_xlabel(f'Composante 1', fontsize=10)
                            ax.set_ylabel(f'Composante 2', fontsize=10)
                            ax.set_title('Cercle des corr√©lations Score_A10', fontsize=12)
                            ax.grid(True, linestyle='--', alpha=0.5)
                            st.pyplot(fig)
                        else:
                            st.warning("La variable Score_A10 n'est pas disponible dans le dataset.")
                    except Exception as e:
                        st.warning(f"Impossible de g√©n√©rer le cercle des corr√©lations: {str(e)}")

                with col2:
                    st.markdown("### Analyse Score A10")
                    if 'column_corr_a10' in locals():
                        if 'Score_A10' in column_corr_a10.index:
                            score_contrib = np.sqrt(column_corr_a10.loc['Score_A10', 0]**2 + column_corr_a10.loc['Score_A10', 1]**2)
                            st.metric("Contribution Score A10", f"{score_contrib:.3f}")

                        st.markdown("**Variables corr√©l√©es :**")
                        for var in column_corr_a10.index:
                            if var != 'Score_A10':
                                contrib = np.sqrt(column_corr_a10.loc[var, 0]**2 + column_corr_a10.loc[var, 1]**2)
                                st.write(f"‚Ä¢ {var}: {contrib:.3f}")

            with famd_tabs[4]:
                st.subheader("Interpr√©tation des r√©sultats")

                col1, col2 = st.columns(2)

                with col1:
                    st.markdown("### Points cl√©s")
                    st.write(f"""
                    ‚Ä¢ **Variance expliqu√©e** : {explained_variance[0] + explained_variance[1]:.1%}
                    ‚Ä¢ **Variables discriminantes** : Score A10, TSA, Age
                    ‚Ä¢ **Regroupement TSA** : Patterns identifiables
                    """)

                with col2:
                    st.markdown("### Composantes principales")
                    summary_df = pd.DataFrame({
                        'Composante': [f"Comp. {i+1}" for i in range(min(3, len(eigenvalues)))],
                        'Variance (%)': (explained_variance[:3] * 100).round(2)
                    })
                    st.dataframe(summary_df, use_container_width=True)

                st.markdown("""
                ### Analyse d√©taill√©e

                L'analyse factorielle de donn√©es mixtes nous permet d'identifier plusieurs tendances importantes:

                1. **Structure des donn√©es** : Les deux premi√®res composantes principales expliquent environ {:.1%} de la variance totale, ce qui indique une bonne capture de la structure des donn√©es.

                2. **Variables discriminantes** : Les variables qui contribuent le plus √† la distinction entre les groupes incluent le Score A10 et d'autres variables d√©mographiques.

                3. **Regroupement des cas TSA** : On observe une tendance au regroupement des cas diagnostiqu√©s TSA dans l'espace factoriel, ce qui sugg√®re des patterns communs dans leurs profils.

                4. **Influence du Score A10** : Le Score A10 montre une corr√©lation significative avec la premi√®re composante principale, confirmant son importance dans le processus diagnostique.
                """.format(explained_variance[0] + explained_variance[1]))

                st.subheader("Tableau r√©capitulatif")
                summary_complete_df = pd.DataFrame({
                    'Composante': [f"Composante {i+1}" for i in range(len(eigenvalues))],
                    'Valeur propre': eigenvalues,
                    'Variance expliqu√©e (%)': explained_variance * 100,
                    'Variance cumul√©e (%)': np.cumsum(explained_variance) * 100
                })
                st.dataframe(summary_complete_df.style.format({
                    'Valeur propre': '{:.3f}',
                    'Variance expliqu√©e (%)': '{:.2f}%',
                    'Variance cumul√©e (%)': '{:.2f}%'
                }))

        except Exception as e:
            st.error(f"Erreur globale lors de l'analyse FAMD: {str(e)}")


def show_ml_analysis():
    import plotly.express as px
    import plotly.graph_objects as go
    from plotly.subplots import make_subplots
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib.pyplot as plt
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.preprocessing import StandardScaler, OneHotEncoder
    from sklearn.compose import ColumnTransformer
    from sklearn.pipeline import Pipeline
    from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
    from sklearn.metrics import roc_auc_score, confusion_matrix, classification_report, roc_curve
    from sklearn.metrics import balanced_accuracy_score, precision_recall_curve
    from sklearn.model_selection import cross_val_score, train_test_split, learning_curve
    import time
    import os

    # Configuration initiale
    os.environ['TQDM_DISABLE'] = '1'

    try:
        st.set_option('deprecation.showPyplotGlobalUse', False)
    except Exception:
        pass

    # Fonction d'entra√Ænement optimis√©e
    @st.cache_resource(show_spinner=False)
    def train_optimized_rf_model(_X_train, _y_train, _preprocessor, _X_test, _y_test):
        """Entra√Æne un mod√®le Random Forest optimis√© avec gestion d'erreurs"""
        try:
            rf = RandomForestClassifier(
                n_estimators=100,
                max_depth=10,
                min_samples_split=5,
                min_samples_leaf=2,
                random_state=42,
                n_jobs=-1
            )

            pipeline = Pipeline([
                ('preprocessor', _preprocessor),
                ('classifier', rf)
            ])

            start_time = time.time()
            pipeline.fit(_X_train, _y_train)
            training_time = time.time() - start_time

            # Pr√©dictions
            y_pred = pipeline.predict(_X_test)
            y_pred_proba = pipeline.predict_proba(_X_test)[:, 1]

            # M√©triques
            metrics = {
                'accuracy': accuracy_score(_y_test, y_pred),
                'precision': precision_score(_y_test, y_pred, zero_division=0),
                'recall': recall_score(_y_test, y_pred, zero_division=0),
                'f1': f1_score(_y_test, y_pred, zero_division=0),
                'auc': roc_auc_score(_y_test, y_pred_proba),
                'training_time': training_time
            }

            # Matrice de confusion
            cm = confusion_matrix(_y_test, y_pred)

            # Courbes
            fpr, tpr, _ = roc_curve(_y_test, y_pred_proba)
            precision_curve, recall_curve, _ = precision_recall_curve(_y_test, y_pred_proba)

            # Importance des features
            try:
                feature_names = pipeline.named_steps['preprocessor'].get_feature_names_out()
            except:
                feature_names = [f"feature_{i}" for i in range(len(pipeline.named_steps['classifier'].feature_importances_))]

            importances = pipeline.named_steps['classifier'].feature_importances_
            feature_importance = pd.DataFrame({
                'feature': feature_names,
                'importance': importances
            }).sort_values('importance', ascending=False)

            # Validation crois√©e
            cv_scores = cross_val_score(pipeline, _X_train, _y_train, cv=5, scoring='accuracy')

            return {
                'pipeline': pipeline,
                'metrics': metrics,
                'confusion_matrix': cm,
                'roc_curve': (fpr, tpr),
                'pr_curve': (precision_curve, recall_curve),
                'feature_importance': feature_importance,
                'cv_scores': cv_scores,
                'y_pred': y_pred,
                'y_pred_proba': y_pred_proba,
                'status': 'success'
            }

        except Exception as e:
            st.error(f"Erreur lors de l'entra√Ænement : {str(e)}")
            return {'status': 'error', 'message': str(e)}

    # Chargement et pr√©paration des donn√©es
    try:
        with st.spinner("Chargement des donn√©es..."):
            df, _, _, _, _, _, _ = load_dataset()

        # Nettoyage optimis√©
        aq_columns = [f'A{i}' for i in range(1, 11) if f'A{i}' in df.columns]
        if aq_columns:
            df = df.drop(columns=aq_columns)

        if 'Jaunisse' in df.columns:
            df = df.drop(columns=['Jaunisse'])

        if 'TSA' not in df.columns:
            st.error("‚ùå Colonne 'TSA' manquante dans le dataset")
            return

        # Pr√©paration des variables
        X = df.drop(columns=['TSA'])
        y = df['TSA'].map({'Yes': 1, 'No': 0})

        # V√©rification des donn√©es
        if X.empty or y.empty:
            st.error("‚ùå Donn√©es insuffisantes pour l'analyse")
            return

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

    except Exception as e:
        st.error(f"‚ùå Erreur de chargement des donn√©es : {str(e)}")
        return

    # Pr√©processeur
    numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()
    categorical_cols = X.select_dtypes(include=['object', 'category']).columns.tolist()

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', StandardScaler(), numerical_cols),
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
        ],
        remainder='passthrough',
        verbose_feature_names_out=False
    )
    st.markdown("""
<div style="background: linear-gradient(90deg, #3498db, #2ecc71);
            padding: 40px 25px; border-radius: 20px; margin-bottom: 35px; text-align: center;">
    <h1 style="color: white; font-size: 2.8rem; margin-bottom: 15px;
               text-shadow: 0 2px 4px rgba(0,0,0,0.3); font-weight: 600;">
        üß† Outil de D√©pistage TSA par Machine Learning
    </h1>
    <p style="color: rgba(255,255,255,0.95); font-size: 1.3rem;
              max-width: 800px; margin: 0 auto; line-height: 1.6;">
        Une approche moderne et scientifique pour le d√©pistage pr√©coce
    </p>
</div>
""", unsafe_allow_html=True)

    st.markdown("""
    <div style="background-color: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 30px;">
        <p style="font-size: 1.1rem; line-height: 1.6; text-align: center; margin: 0;">
        Cette section pr√©sente un outil d'aide au d√©pistage pr√©coce utilisant l'intelligence artificielle.
        L'objectif est d'identifier les profils √† risque n√©cessitant une √©valuation approfondie par un professionnel qualifi√©.
        </p>
    </div>
    """, unsafe_allow_html=True)

    # Onglets
    ml_tabs = st.tabs([
        "üìä Pr√©processing",
        "üöÄ Comparaison Rapide",
        "üå≤ Analyse Random Forest",
        "‚öôÔ∏è Optimisation D√©pistage"
    ])

    with ml_tabs[0]:
    # Styles CSS pour harmonisation
        st.markdown("""
        <style>
            .preprocessing-header {
                background: linear-gradient(90deg, #3498db, #2ecc71);
                padding: 30px 20px;
                border-radius: 15px;
                margin-bottom: 25px;
                text-align: center;
            }
            
            .info-card-modern {
                background: white;
                border-radius: 15px;
                padding: 25px;
                margin: 15px 0;
                box-shadow: 0 4px 15px rgba(0,0,0,0.08);
                border-left: 4px solid #3498db;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }
            
            .info-card-modern:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            }
            
            .metric-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin: 20px 0;
            }
            
            .metric-card {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 10px;
                text-align: center;
                border: 1px solid #e9ecef;
            }
            
            .section-title {
                color: #2c3e50;
                font-size: 1.8rem;
                border-bottom: 3px solid #3498db;
                padding-bottom: 10px;
                margin: 30px 0 20px 0;
            }
        </style>
        """, unsafe_allow_html=True)
    
        # En-t√™te de section harmonis√©
        st.markdown("""
        <div class="preprocessing-header">
            <h2 style="color: white; font-size: 2.2rem; margin-bottom: 10px;
                       text-shadow: 0 2px 4px rgba(0,0,0,0.3); font-weight: 600;">
                üîß Pipeline de Pr√©traitement des Donn√©es
            </h2>
            <p style="color: rgba(255,255,255,0.95); font-size: 1.1rem;
                      margin: 0 auto; line-height: 1.5;">
                Configuration des donn√©es pour optimiser la d√©tection des patterns pertinents
            </p>
        </div>
        """, unsafe_allow_html=True)
    
        # Carte d'introduction
        st.markdown("""
        <div class="info-card-modern">
            <div style="background-color: #e8f4fd; padding: 20px; border-radius: 10px; 
                        margin-bottom: 20px; border-left: 4px solid #3498db;">
                <h3 style="color: #2c3e50; margin-top: 0; display: flex; align-items: center;">
                    <span style="margin-right: 10px;">‚öôÔ∏è</span>
                    Configuration des Donn√©es pour le D√©pistage
                </h3>
                <p style="color: #34495e; margin-bottom: 0; line-height: 1.6;">
                    Les transformations appliqu√©es pour optimiser la d√©tection des patterns pertinents 
                    dans le processus de d√©pistage pr√©coce du TSA.
                </p>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
        # Conteneur principal avec deux colonnes
        col1, col2 = st.columns([1, 1], gap="large")
    
        # Colonne 1 - Structure du dataset
        with col1:
            st.markdown("""
            <div class="info-card-modern">
                <h3 class="section-title">üìã Structure du Dataset</h3>
                <div style="margin-top: 20px;">
            """, unsafe_allow_html=True)
            
            # Calculs existants conserv√©s
            total_samples = len(df)
            tsa_positive = (y == 1).sum()
    
            # M√©triques dans des cartes stylis√©es
            st.markdown(f"""
            <div class="metric-grid">
                <div class="metric-card">
                    <h4 style="color: #3498db; margin: 0 0 10px 0;">üìä √âchantillons</h4>
                    <div style="font-size: 2rem; font-weight: bold; color: #2c3e50;">
                        {total_samples:,}
                    </div>
                    <p style="color: #7f8c8d; margin: 5px 0 0 0; font-size: 0.9rem;">
                        Total des participants
                    </p>
                </div>
                <div class="metric-card">
                    <h4 style="color: #e74c3c; margin: 0 0 10px 0;">üéØ Cas √† Risque</h4>
                    <div style="font-size: 2rem; font-weight: bold; color: #2c3e50;">
                        {tsa_positive:,}
                    </div>
                    <p style="color: #7f8c8d; margin: 5px 0 0 0; font-size: 0.9rem;">
                        ({tsa_positive/total_samples:.1%} du total)
                    </p>
                </div>
            </div>
            """, unsafe_allow_html=True)
    
            # Espacement
            st.markdown("<div style='margin: 30px 0;'></div>", unsafe_allow_html=True)
    
            # Graphique de distribution conserv√©
            st.markdown("""
            <h4 style="color: #2c3e50; margin: 20px 0 15px 0; display: flex; align-items: center;">
                <span style="margin-right: 8px;">üìà</span>
                R√©partition des Cas
            </h4>
            """, unsafe_allow_html=True)
            
            fig_dist = px.pie(
                values=[tsa_positive, total_samples - tsa_positive],
                names=['TSA Positif', 'TSA N√©gatif'],
                color_discrete_sequence=['#e74c3c', '#3498db'],
                hole=0.4  # Donut chart plus moderne
            )
            fig_dist.update_layout(
                showlegend=True,
                font=dict(size=12),
                margin=dict(t=20, b=20, l=20, r=20)
            )
            st.plotly_chart(fig_dist, use_container_width=True)
            
            st.markdown("</div></div>", unsafe_allow_html=True)
    
        # Colonne 2 - Variables analys√©es
        with col2:
            st.markdown("""
            <div class="info-card-modern">
                <h3 class="section-title">üîß Variables Analys√©es</h3>
                <div style="margin-top: 20px;">
            """, unsafe_allow_html=True)
            
            # Tableau de preprocessing conserv√© mais stylis√©
            preprocessing_info = pd.DataFrame({
                'Type': ['Num√©riques', 'Cat√©gorielles', 'Total'],
                'Nombre': [len(numerical_cols), len(categorical_cols), len(numerical_cols) + len(categorical_cols)],
                'Traitement': ['Standardisation', 'Encodage One-Hot', '-']
            })
            
            st.markdown("""
            <h4 style="color: #2c3e50; margin: 20px 0 15px 0; display: flex; align-items: center;">
                <span style="margin-right: 8px;">üìä</span>
                R√©sum√© du Traitement
            </h4>
            """, unsafe_allow_html=True)
            
            st.dataframe(
                preprocessing_info, 
                use_container_width=True,
                hide_index=True
            )
    
            # Variables num√©riques avec style am√©lior√©
            st.markdown("""
            <div style="margin-top: 25px;">
                <h4 style="color: #2c3e50; margin: 15px 0; display: flex; align-items: center;">
                    <span style="margin-right: 8px;">üî¢</span>
                    Variables Num√©riques
                </h4>
                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; 
                            border-left: 3px solid #3498db;">
            """, unsafe_allow_html=True)
            
            for col in numerical_cols[:5]:
                st.markdown(f"‚Ä¢ **{col}**")
            if len(numerical_cols) > 5:
                st.markdown(f"*... et {len(numerical_cols) - 5} autres variables*")
            
            st.markdown("</div></div>", unsafe_allow_html=True)
    
            # Variables cat√©gorielles avec style am√©lior√©
            st.markdown("""
            <div style="margin-top: 20px;">
                <h4 style="color: #2c3e50; margin: 15px 0; display: flex; align-items: center;">
                    <span style="margin-right: 8px;">üìù</span>
                    Variables Cat√©gorielles
                </h4>
                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; 
                            border-left: 3px solid #2ecc71;">
            """, unsafe_allow_html=True)
            
            for col in categorical_cols[:5]:
                st.markdown(f"‚Ä¢ **{col}**")
            if len(categorical_cols) > 5:
                st.markdown(f"*... et {len(categorical_cols) - 5} autres variables*")
            
            st.markdown("</div></div></div></div>", unsafe_allow_html=True)
    
        # Note informative finale
        st.markdown("""
        <div class="info-card-modern" style="margin-top: 30px;">
            <div style="display: flex; align-items: center; background-color: #fff3cd; 
                        padding: 15px; border-radius: 8px; border-left: 4px solid #ffc107;">
                <span style="font-size: 1.5rem; margin-right: 15px;">üí°</span>
                <div>
                    <strong style="color: #856404;">Note Importante :</strong>
                    <p style="margin: 5px 0 0 0; color: #856404; line-height: 1.5;">
                        Ce preprocessing garantit une normalisation optimale des donn√©es pour 
                        am√©liorer la performance des algorithmes de machine learning dans le 
                        contexte du d√©pistage pr√©coce du TSA.
                    </p>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

    with ml_tabs[1]:
        st.markdown("""
        <div class="preprocessing-header">
            <h2 style="color: white; font-size: 2.2rem; margin-bottom: 10px;
                       text-shadow: 0 2px 4px rgba(0,0,0,0.3); font-weight: 600;">
                üöÄ Comparaison rapide des algorithmes
            </h2>
            <p style="color: rgba(255,255,255,0.95); font-size: 1.1rem;
                      margin: 0 auto; line-height: 1.5;">
                Configuration des donn√©es pour optimiser la d√©tection des patterns pertinents
            </p>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div style="background-color: #eaf6fc; padding: 20px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #3498db;">
            <h3 style="color: #2c3e50; margin-top: 0;">Crit√®res de s√©lection pour le d√©pistage</h3>
            <ul style="color: #34495e;">
                <li>ü©∫ <strong>Sensibilit√© √©lev√©e</strong> (d√©tection des vrais cas)</li>
                <li>‚ö° <strong>Rapidit√© d'ex√©cution</strong></li>
                <li>üìà <strong>Stabilit√© des r√©sultats</strong></li>
                <li>üîç <strong>Interpr√©tabilit√© clinique</strong></li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        # R√©sultats simul√©s Lazy Predict
        @st.cache_data(ttl=3600)
        def get_lazy_predict_results():
            return pd.DataFrame({
                "LGBMClassifier": {"Accuracy": 0.963, "Recall": 0.95, "F1 Score": 0.963, "Time": 0.17},
                "RandomForestClassifier": {"Accuracy": 0.956, "Recall": 0.96, "F1 Score": 0.956, "Time": 0.38},
                "XGBClassifier": {"Accuracy": 0.956, "Recall": 0.94, "F1 Score": 0.955, "Time": 0.17},
                "ExtraTreesClassifier": {"Accuracy": 0.951, "Recall": 0.93, "F1 Score": 0.951, "Time": 0.69},
                "GradientBoostingClassifier": {"Accuracy": 0.948, "Recall": 0.92, "F1 Score": 0.947, "Time": 0.52}
            }).T

        lazy_results = get_lazy_predict_results()

        # Tableau stylis√©
        def style_dataframe(df):
            return df.style.background_gradient(
                cmap='Blues',
                subset=['Accuracy', 'Recall', 'F1 Score']
            ).background_gradient(
                cmap='Blues_r',
                subset=['Time']
            ).format({
                'Accuracy': '{:.1%}',
                'Recall': '{:.1%}',
                'F1 Score': '{:.1%}',
                'Time': '{:.2f}s'
            })

        st.markdown("### üìä R√©sultats comparatifs")
        st.dataframe(style_dataframe(lazy_results), use_container_width=True)

        # Top 3 des mod√®les
        st.markdown("### üèÜ Top 3 des mod√®les pour le d√©pistage")

        top_3 = lazy_results.nlargest(3, 'Accuracy')

        col1, col2, col3 = st.columns(3)

        models_info = [
            ("LGBMClassifier", "ü•á", "#1e3a8a"),
            ("RandomForestClassifier", "ü•à", "#1e40af"),
            ("XGBClassifier", "ü•â", "#1d4ed8")
        ]

        for i, ((model_name, medal, color), col) in enumerate(zip(models_info, [col1, col2, col3])):
            if model_name in top_3.index:
                row = top_3.loc[model_name]
                with col:
                    st.markdown(f"""
                    <div style="background: linear-gradient(135deg, {color}, #60a5fa); padding: 25px; border-radius: 15px; text-align: center; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                        <div style="font-size: 2rem; margin-bottom: 10px;">{medal}</div>
                        <h3 style="color: white; margin: 0; font-size: 1.1rem;">{model_name}</h3>
                        <hr style="border-color: rgba(255,255,255,0.3); margin: 15px 0;">
                        <div style="color: white;">
                            <p style="margin: 5px 0; font-size: 1.1rem;"><strong>Pr√©cision: {row['Accuracy']:.1%}</strong></p>
                            <p style="margin: 5px 0;">Sensibilit√©: {row['Recall']:.1%}</p>
                            <p style="margin: 5px 0;">F1-Score: {row['F1 Score']:.1%}</p>
                            <p style="margin: 5px 0;">Temps: {row['Time']:.2f}s</p>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)

        # Graphiques comparatifs
        st.markdown("### üìà Visualisations comparatives")
        fig_scatter = px.scatter(
                lazy_results.reset_index(),
                x='Time',
                y='Accuracy',
                size='Recall',
                color='F1 Score',
                hover_name='index',
                title="Performance vs Temps d'ex√©cution",
                labels={'Time': 'Temps (secondes)', 'Accuracy': 'Pr√©cision'},
                color_continuous_scale='Blues'
            )
        fig_scatter.update_layout(height=500)
        st.plotly_chart(fig_scatter, use_container_width=True)

        st.info("""
        **üéØ Pourquoi choisir Random Forest pour le d√©pistage ?**

        - **Excellent √©quilibre** sensibilit√©/sp√©cificit√© (96% de sensibilit√©)
        - **Interpr√©tation clinique** via l'importance des caract√©ristiques
        - **Robustesse** aux donn√©es manquantes et bruit√©es
        - **Stabilit√©** des pr√©dictions sur diff√©rentes populations
        """)

    with ml_tabs[2]:
        st.markdown("""
        <div class="preprocessing-header">
            <h2 style="color: white; font-size: 2.2rem; margin-bottom: 10px;
                       text-shadow: 0 2px 4px rgba(0,0,0,0.3); font-weight: 600;">
                üå≤ Analyse Random Forest pour le d√©pistage
            </h2>
            <p style="color: rgba(255,255,255,0.95); font-size: 1.1rem;
                      margin: 0 auto; line-height: 1.5;">
                Configuration des donn√©es pour optimiser la d√©tection des patterns pertinents
            </p>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div style="background-color: #e8f5e9; padding: 20px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #2ecc71;">
            <h3 style="color: #2c3e50; margin-top: 0;">Configuration optimale pour le d√©pistage</h3>
            <p style="color: #34495e;">Le mod√®le Random Forest a √©t√© configur√© sp√©cifiquement pour maximiser la d√©tection des cas TSA tout en maintenant une pr√©cision √©lev√©e.</p>
        </div>
        """, unsafe_allow_html=True)

        with st.spinner("ü§ñ Entra√Ænement du mod√®le Random Forest en cours..."):
            rf_results = train_optimized_rf_model(X_train, y_train, preprocessor, X_test, y_test)

        if rf_results.get('status') != 'success':
            st.error(f"‚ùå √âchec de l'entra√Ænement : {rf_results.get('message', 'Erreur inconnue')}")
            return

        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric(
                "üéØ Accuracy",
                f"{rf_results['metrics']['accuracy']:.1%}",
                "Performance globale"
            )
        with col2:
            st.metric(
                "üì° Sensibilit√©",
                f"{rf_results['metrics']['recall']:.1%}",
                "D√©tection des vrais cas"
            )
        with col3:
            st.metric(
                "üìà AUC-ROC",
                f"{rf_results['metrics']['auc']:.3f}",
                "Capacit√© discriminante"
            )

        rf_tabs = st.tabs([
            "üìä Performances d√©taill√©es",
            "üîç Matrice de confusion",
            "üìà Courbes de performance",
            "üåü Importance des variables"
        ])

        with rf_tabs[0]:
            st.subheader("üìä M√©triques de performance d√©taill√©es")

            col1, col2 = st.columns(2)

            with col1:
                metrics_df = pd.DataFrame({
                    'M√©trique': ['Accuracy', 'Precision', 'Recall', 'F1-Score', 'AUC-ROC'],
                    'Score': [
                        rf_results['metrics']['accuracy'],
                        rf_results['metrics']['precision'],
                        rf_results['metrics']['recall'],
                        rf_results['metrics']['f1'],
                        rf_results['metrics']['auc']
                    ]
                })

                fig_metrics = px.bar(
                    metrics_df,
                    x='Score',
                    y='M√©trique',
                    orientation='h',
                    title="Scores de performance",
                    color='Score',
                    color_continuous_scale='Blues'
                )
                fig_metrics.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig_metrics, use_container_width=True)

            with col2:
                st.markdown("### üè• Interpr√©tation clinique")

                recall_value = rf_results['metrics']['recall']
                precision_value = rf_results['metrics']['precision']

                if recall_value >= 0.95:
                    st.success("‚úÖ **Sensibilit√© excellente** : D√©tecte 95%+ des cas TSA")
                elif recall_value >= 0.90:
                    st.info("‚ÑπÔ∏è **Sensibilit√© tr√®s bonne** : D√©tecte 90%+ des cas")
                else:
                    st.warning("‚ö†Ô∏è **Sensibilit√© √† am√©liorer** : Risque de cas manqu√©s")

                if precision_value >= 0.95:
                    st.success("‚úÖ **Pr√©cision excellente** : 95%+ des alertes sont justifi√©es")
                elif precision_value >= 0.90:
                    st.info("‚ÑπÔ∏è **Pr√©cision tr√®s bonne** : 90%+ des alertes sont fiables")
                else:
                    st.warning("‚ö†Ô∏è **Pr√©cision √† am√©liorer** : Risque de fausses alertes")

                st.metric(
                    "‚è±Ô∏è Temps d'entra√Ænement",
                    f"{rf_results['metrics']['training_time']:.2f}s",
                    "Adapt√© √† l'usage clinique"
                )

        with rf_tabs[1]:
            st.subheader("üîç Matrice de confusion")

            cm = rf_results['confusion_matrix']

            fig_cm = go.Figure(data=go.Heatmap(
                z=cm,
                x=['Pr√©dit: Non-TSA', 'Pr√©dit: TSA'],
                y=['R√©el: Non-TSA', 'R√©el: TSA'],
                colorscale='Blues',
                text=cm,
                texttemplate="%{text}",
                textfont={"size": 24, "color": "white"},
                hoverongaps=False,
                showscale=True
            ))

            fig_cm.update_layout(
                title="Matrice de confusion - Random Forest",
                xaxis_title="Pr√©diction du mod√®le",
                yaxis_title="R√©alit√© terrain",
                height=500,
                font_size=14
            )

            st.plotly_chart(fig_cm, use_container_width=True)

            if len(cm.ravel()) == 4:
                tn, fp, fn, tp = cm.ravel()

                col1, col2, col3 = st.columns(3)

                with col1:
                    st.metric("‚úÖ Vrais Positifs", tp, "Cas TSA correctement identifi√©s")
                    st.metric("‚úÖ Vrais N√©gatifs", tn, "Cas normaux correctement identifi√©s")

                with col2:
                    st.metric("‚ùå Faux Positifs", fp, "Fausses alertes")
                    st.metric("‚ùå Faux N√©gatifs", fn, "Cas TSA manqu√©s")

                with col3:
                    specificity = tn / (tn + fp) if (tn + fp) > 0 else 0
                    npv = tn / (tn + fn) if (tn + fn) > 0 else 0

                    st.metric("üéØ Sp√©cificit√©", f"{specificity:.1%}", "√âviter les fausses alertes")
                    st.metric("üõ°Ô∏è VPN", f"{npv:.1%}", "Fiabilit√© des cas n√©gatifs")

        with rf_tabs[2]:
            st.subheader("üìà Courbes de performance")

            col1, col2 = st.columns(2)

            with col1:
                fpr, tpr = rf_results['roc_curve']
                auc_score = rf_results['metrics']['auc']

                fig_roc = go.Figure()

                fig_roc.add_trace(go.Scatter(
                    x=fpr, y=tpr,
                    mode='lines',
                    name=f'Random Forest (AUC = {auc_score:.3f})',
                    line=dict(color='#e74c3c', width=3),
                    fill='tonexty'
                ))

                fig_roc.add_trace(go.Scatter(
                    x=[0, 1], y=[0, 1],
                    mode='lines',
                    name='R√©f√©rence (AUC = 0.5)',
                    line=dict(color='gray', dash='dash', width=2)
                ))

                fig_roc.update_layout(
                    title='Courbe ROC',
                    xaxis_title='Taux de Faux Positifs',
                    yaxis_title='Taux de Vrais Positifs',
                    height=400,
                    showlegend=True
                )

                st.plotly_chart(fig_roc, use_container_width=True)

            with col2:
                precision_curve, recall_curve = rf_results['pr_curve']

                fig_pr = go.Figure()

                fig_pr.add_trace(go.Scatter(
                    x=recall_curve, y=precision_curve,
                    mode='lines',
                    name='Random Forest',
                    line=dict(color='#2ecc71', width=3),
                    fill='tonexty'
                ))

                baseline_precision = (y_test == 1).mean()
                fig_pr.add_trace(go.Scatter(
                    x=[0, 1], y=[baseline_precision, baseline_precision],
                    mode='lines',
                    name=f'Baseline ({baseline_precision:.2f})',
                    line=dict(color='gray', dash='dash', width=2)
                ))

                fig_pr.update_layout(
                    title='Courbe Precision-Recall',
                    xaxis_title='Recall (Sensibilit√©)',
                    yaxis_title='Precision',
                    height=400,
                    showlegend=True
                )

                st.plotly_chart(fig_pr, use_container_width=True)

            st.subheader("üîÑ Validation crois√©e")
            cv_scores = rf_results['cv_scores']

            col1, col2 = st.columns(2)

            with col1:
                cv_metrics = {
                    'Score moyen': cv_scores.mean(),
                    '√âcart-type': cv_scores.std(),
                    'Score min': cv_scores.min(),
                    'Score max': cv_scores.max()
                }

                for metric, value in cv_metrics.items():
                    st.metric(metric, f"{value:.3f}")

            with col2:
                fig_cv = go.Figure(data=go.Bar(
                    x=[f'Fold {i+1}' for i in range(len(cv_scores))],
                    y=cv_scores,
                    marker_color='lightblue',
                    text=cv_scores,
                    texttemplate='%{text:.3f}',
                    textposition='outside'
                ))

                fig_cv.add_hline(
                    y=cv_scores.mean(),
                    line_dash="dash",
                    line_color="red",
                    annotation_text=f"Moyenne: {cv_scores.mean():.3f}"
                )

                fig_cv.update_layout(
                    title="Scores de validation crois√©e",
                    xaxis_title="Pli",
                    yaxis_title="Accuracy",
                    height=400
                )

                st.plotly_chart(fig_cv, use_container_width=True)

        with rf_tabs[3]:
            st.subheader("üåü Importance des variables")

            feature_importance = rf_results['feature_importance'].head(10)

            fig_importance = px.bar(
                feature_importance,
                x='importance',
                y='feature',
                orientation='h',
                title="Top 10 des variables les plus importantes",
                labels={'importance': 'Score d\'importance', 'feature': 'Variable'},
                color='importance',
                color_continuous_scale='Blues',
                text='importance'
            )

            fig_importance.update_traces(
                texttemplate='%{text:.3f}',
                textposition='outside'
            )
            fig_importance.update_layout(
                height=500,
                yaxis={'categoryorder': 'total ascending'},
                showlegend=False
            )

            st.plotly_chart(fig_importance, use_container_width=True)

            col1, col2 = st.columns(2)

            with col1:
                top_feature = feature_importance.iloc[0]
                st.success(f"""
                **üéØ Variable la plus importante :**

                **{top_feature['feature']}**

                - Score : {top_feature['importance']:.3f}
                - Contribution : {(top_feature['importance']/feature_importance['importance'].sum())*100:.1f}%
                """)

            with col2:
                top_5 = feature_importance.head(5)
                fig_pie = px.pie(
                    top_5,
                    values='importance',
                    names='feature',
                    title="Top 5 - R√©partition de l'influence",
                    color_discrete_sequence=px.colors.sequential.Blues_r
                )
                fig_pie.update_traces(
                    textposition='inside',
                    textinfo='percent+label',
                    textfont_size=14  
                )
                fig_pie.update_layout(
                    height=500,  #
                    showlegend=False,
                    font=dict(size=14)
                )
                st.plotly_chart(fig_pie, use_container_width=True)

    with ml_tabs[3]:
        st.markdown("""
        <div class="preprocessing-header">
            <h2 style="color: white; font-size: 2.2rem; margin-bottom: 10px;
                       text-shadow: 0 2px 4px rgba(0,0,0,0.3); font-weight: 600;">
                ‚öôÔ∏è Optimisation pour le d√©pistage clinique
            </h2>
            <p style="color: rgba(255,255,255,0.95); font-size: 1.1rem;
                      margin: 0 auto; line-height: 1.5;">
                Configuration des donn√©es pour optimiser la d√©tection des patterns pertinents
            </p>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div style="background-color: #f8f5f2; padding: 20px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #e67e22;">
            <h3 style="color: #2c3e50; margin-top: 0;">Adaptation au contexte clinique</h3>
            <p style="color: #34495e;">
            Personnalisation des param√®tres du mod√®le pour s'adapter aux besoins sp√©cifiques du d√©pistage TSA.
            </p>
        </div>
        """, unsafe_allow_html=True)

        if rf_results.get('status') == 'success':
            y_pred_proba = rf_results['y_pred_proba']

            st.subheader("üéØ R√©glage du seuil de d√©cision")

            col1, col2 = st.columns([2, 1])

            with col1:
                threshold = st.slider(
                    "Seuil de probabilit√© pour d√©clencher une alerte",
                    min_value=0.0,
                    max_value=1.0,
                    value=0.3,
                    step=0.05,
                    help="Plus le seuil est bas, plus le mod√®le sera sensible (d√©tectera plus de cas mais avec plus de fausses alertes)"
                )

                y_pred_adjusted = (y_pred_proba >= threshold).astype(int)
                adjusted_recall = recall_score(y_test, y_pred_adjusted)
                adjusted_precision = precision_score(y_test, y_pred_adjusted, zero_division=0)
                adjusted_f1 = f1_score(y_test, y_pred_adjusted, zero_division=0)

                met_col1, met_col2, met_col3 = st.columns(3)

                with met_col1:
                    st.metric("Sensibilit√© ajust√©e", f"{adjusted_recall:.1%}")
                with met_col2:
                    st.metric("Pr√©cision ajust√©e", f"{adjusted_precision:.1%}")
                with met_col3:
                    st.metric("F1-Score ajust√©", f"{adjusted_f1:.1%}")

            with col2:
                fig_gauge = go.Figure(go.Indicator(
                    mode = "gauge+number+delta",
                    value = adjusted_recall * 100,
                    domain = {'x': [0, 1], 'y': [0, 1]},
                    title = {'text': "Sensibilit√© (%)"},
                    delta = {'reference': recall_score(y_test, rf_results['y_pred']) * 100},
                    gauge = {
                        'axis': {'range': [0, 100]},
                        'bar': {'color': "darkblue"},
                        'steps': [
                            {'range': [0, 80], 'color': "lightgray"},
                            {'range': [80, 95], 'color': "yellow"},
                            {'range': [95, 100], 'color': "lightgreen"}
                        ],
                        'threshold': {
                            'line': {'color': "red", 'width': 4},
                            'thickness': 0.75,
                            'value': 95
                        }
                    }
                ))
                fig_gauge.update_layout(height=300)
                st.plotly_chart(fig_gauge, use_container_width=True)

            st.subheader("üìä Impact du seuil sur les performances")

            thresholds = np.linspace(0.1, 0.9, 17)
            metrics_by_threshold = []

            for t in thresholds:
                y_pred_t = (y_pred_proba >= t).astype(int)
                metrics_by_threshold.append({
                    'Seuil': t,
                    'Sensibilit√©': recall_score(y_test, y_pred_t),
                    'Pr√©cision': precision_score(y_test, y_pred_t, zero_division=0),
                    'F1-Score': f1_score(y_test, y_pred_t, zero_division=0)
                })

            df_thresholds = pd.DataFrame(metrics_by_threshold)

            fig_threshold = px.line(
                df_thresholds,
                x='Seuil',
                y=['Sensibilit√©', 'Pr√©cision', 'F1-Score'],
                title="√âvolution des m√©triques selon le seuil de d√©cision",
                labels={'value': 'Score', 'variable': 'M√©trique'},
                color_discrete_sequence=['#1f77b4', '#ff7f0e', '#2ca02c']
            )

            fig_threshold.add_vline(
                x=threshold,
                line_dash="dash",
                line_color="red",
                annotation_text=f"Seuil actuel: {threshold}"
            )

            fig_threshold.update_layout(height=400)
            st.plotly_chart(fig_threshold, use_container_width=True)

        st.subheader("üìã Protocole de d√©pistage recommand√©")

        st.markdown("""
        <div style="background: linear-gradient(90deg, #3498db, #2ecc71); padding: 20px; border-radius: 10px; color: white; margin: 20px 0;">
            <h4 style="margin: 0 0 15px 0;">üîÑ Processus de d√©pistage en 4 √©tapes</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
                    <strong>1. Pr√©-d√©pistage</strong><br>
                    Application automatique du mod√®le sur questionnaire initial
                </div>
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
                    <strong>2. √âvaluation</strong><br>
                    Entretien structur√© si probabilit√© > 30%
                </div>
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
                    <strong>3. Orientation</strong><br>
                    Vers sp√©cialiste si confirmation des signaux
                </div>
                <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;">
                    <strong>4. Suivi</strong><br>
                    Re-test √† 6 mois pour cas n√©gatifs persistants
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

        st.subheader("üéØ Recommandations par contexte d'utilisation")

        context_col1, context_col2, context_col3 = st.columns(3)

        with context_col1:
            st.info("""
            **üè• D√©pistage de masse**

            - Seuil recommand√© : **0.2**
            - Priorit√© : Sensibilit√© maximale
            - Objectif : Ne manquer aucun cas
            """)

        with context_col2:
            st.success("""
            **üë®‚Äç‚öïÔ∏è Consultation sp√©cialis√©e**

            - Seuil recommand√© : **0.5**
            - Priorit√© : √âquilibre optimal
            - Objectif : Aide au diagnostic
            """)

        with context_col3:
            st.warning("""
            **üî¨ Recherche clinique**

            - Seuil recommand√© : **0.7**
            - Priorit√© : Pr√©cision √©lev√©e
            - Objectif : Cohortes homog√®nes
            """)

        st.markdown("""
        <div style="margin-top: 30px; padding: 20px; border-radius: 10px; border-left: 4px solid #e74c3c; background-color: rgba(231, 76, 60, 0.1);">
            <h4 style="color: #e74c3c; margin-top: 0;">‚ö†Ô∏è Avertissement important</h4>
            <p style="font-size: 1rem; margin-bottom: 10px;">
            <strong>Ce mod√®le est un outil d'aide au d√©pistage pr√©coce et ne remplace en aucun cas :</strong>
            </p>
            <ul style="margin-left: 20px;">
                <li>Une √©valuation clinique compl√®te par un professionnel qualifi√©</li>
                <li>Les outils de diagnostic standardis√©s (ADOS, ADI-R, etc.)</li>
                <li>L'expertise clinique et l'anamn√®se d√©taill√©e</li>
            </ul>
            <p style="margin-top: 15px; font-style: italic;">
            Les r√©sultats doivent toujours √™tre interpr√©t√©s dans le contexte clinique global du patient.
            </p>
        </div>
        """, unsafe_allow_html=True)


def show_aq10_and_prediction():
    """Interface modernis√©e du questionnaire AQ-10 bas√©e sur le design des images"""
    
    # CSS personnalis√© pour le questionnaire
    st.markdown("""
    <style>
    .aq10-container {
        background: white;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        margin: 20px 0;
    }
    
    .aq10-header {
        background: linear-gradient(90deg, #3498db, #2ecc71);
        padding: 30px;
        border-radius: 20px;
        text-align: center;
        margin-bottom: 30px;
    }
    
    .question-card {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 25px;
        margin: 20px 0;
        border-left: 4px solid #3498db;
    }
    
    .question-text {
        font-size: 1.1rem;
        color: #2c3e50;
        line-height: 1.6;
        margin-bottom: 20px;
    }
    
    .response-button {
        display: inline-block;
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        padding: 12px 20px;
        margin: 5px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
        min-width: 150px;
    }
    
    .response-button:hover {
        border-color: #3498db;
        background: #e8f4fd;
        transform: translateY(-2px);
    }
    
    .response-button.selected {
        background: #3498db;
        color: white;
        border-color: #3498db;
    }
    
    .progress-bar {
        background: #e9ecef;
        border-radius: 10px;
        height: 8px;
        margin: 20px 0;
        overflow: hidden;
    }
    
    .progress-fill {
        background: linear-gradient(90deg, #3498db, #2ecc71);
        height: 100%;
        transition: width 0.3s ease;
    }
    </style>
    """, unsafe_allow_html=True)

    # En-t√™te du questionnaire
    st.markdown("""
    <div class="aq10-header">
        <h1 style="color: white; font-size: 2.5rem; margin-bottom: 15px;
                   text-shadow: 0 2px 4px rgba(0,0,0,0.3); font-weight: 600;">
            üß© Questionnaire AQ-10
        </h1>
        <p style="color: rgba(255,255,255,0.95); font-size: 1.2rem;
                  margin: 0 auto; line-height: 1.5;">
            Ce questionnaire aide √† √©valuer les traits autistiques potentiels. 
            R√©pondez √† toutes les questions puis compl√©tez vos informations personnelles 
            pour obtenir une pr√©diction par intelligence artificielle.
        </p>
    </div>
    """, unsafe_allow_html=True)

    # Initialisation des variables de session
    if "current_question" not in st.session_state:
        st.session_state.current_question = 1
    
    if "aq10_responses" not in st.session_state:
        st.session_state.aq10_responses = {}
    
    if "show_results" not in st.session_state:
        st.session_state.show_results = False

    # Conteneur principal
    with st.container():
        if not st.session_state.show_results:
            # Barre de progression
            progress = (st.session_state.current_question - 1) / 10
            st.markdown(f"""
            <div class="progress-bar">
                <div class="progress-fill" style="width: {progress * 100}%"></div>
            </div>
            <p style="text-align: center; color: #7f8c8d; margin: 10px 0;">
                Question {st.session_state.current_question} sur 10
            </p>
            """, unsafe_allow_html=True)

            # Affichage de la question actuelle
            current_q = st.session_state.current_question
            question_text = get_question_text(current_q)
            
            st.markdown(f"""
            <div class="question-card">
                <div class="question-text">
                    <strong>üî∏ {current_q}. {question_text}</strong>
                </div>
            </div>
            """, unsafe_allow_html=True)

            # Options de r√©ponse
            st.markdown("### R√©pondez aux 10 questions suivantes :")
            
            response_options = [
                ("Tout √† fait d'accord", 1),
                ("Plut√¥t d'accord", 1),
                ("Plut√¥t pas d'accord", 0),
                ("Pas du tout d'accord", 0)
            ]

            # Cr√©er les boutons de r√©ponse en colonnes
            cols = st.columns(4)
            selected_response = st.session_state.aq10_responses.get(f"A{current_q}", None)

            for i, (option_text, option_value) in enumerate(response_options):
                with cols[i]:
                    button_class = "response-button selected" if selected_response == option_value and i < 2 else "response-button"
                    if st.button(option_text, key=f"btn_{current_q}_{i}", use_container_width=True):
                        st.session_state.aq10_responses[f"A{current_q}"] = option_value
                        st.rerun()

            # Boutons de navigation
            st.markdown("<br>", unsafe_allow_html=True)
            nav_col1, nav_col2, nav_col3 = st.columns([1, 2, 1])
            
            with nav_col1:
                if st.session_state.current_question > 1:
                    if st.button("‚¨ÖÔ∏è Pr√©c√©dent", use_container_width=True):
                        st.session_state.current_question -= 1
                        st.rerun()

            with nav_col3:
                if st.session_state.current_question < 10:
                    if f"A{current_q}" in st.session_state.aq10_responses:
                        if st.button("Suivant ‚û°Ô∏è", use_container_width=True):
                            st.session_state.current_question += 1
                            st.rerun()
                else:
                    # Bouton pour terminer le questionnaire
                    if len(st.session_state.aq10_responses) == 10:
                        if st.button("‚úÖ Terminer le questionnaire", use_container_width=True, type="primary"):
                            st.session_state.show_results = True
                            st.rerun()

            # R√©sum√© des r√©ponses
            if st.session_state.aq10_responses:
                st.markdown("### üìä R√©sum√© de vos r√©ponses")
                responses_summary = []
                for i in range(1, 11):
                    if f"A{i}" in st.session_state.aq10_responses:
                        value = st.session_state.aq10_responses[f"A{i}"]
                        status = "‚úÖ" if value == 1 else "‚ùå"
                        responses_summary.append(f"Q{i}: {status}")
                
                # Affichage en grille
                summary_cols = st.columns(5)
                for i, summary in enumerate(responses_summary):
                    with summary_cols[i % 5]:
                        st.write(summary)

        else:
            # Affichage des r√©sultats
            show_aq10_results()

def show_aq10_results():
    """Affiche les r√©sultats du questionnaire AQ-10 et la pr√©diction IA"""
    
    # Calcul du score total
    total_score = sum(st.session_state.aq10_responses.values())
    
    st.markdown("""
    <div class="aq10-header">
        <h2 style="color: white; font-size: 2.2rem; margin-bottom: 15px;">
            üìä R√©sultats de votre Questionnaire AQ-10
        </h2>
    </div>
    """, unsafe_allow_html=True)

    # Score et interpr√©tation
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown(f"""
        <div style="background: white; border-radius: 20px; padding: 30px; 
                   text-align: center; box-shadow: 0 8px 25px rgba(0,0,0,0.1);">
            <h3 style="color: #2c3e50; margin-bottom: 20px;">Votre Score AQ-10</h3>
            <div style="font-size: 4rem; font-weight: bold; color: #3498db; margin: 20px 0;">
                {total_score}/10
            </div>
            <p style="color: #7f8c8d; font-size: 1.1rem;">
                {"Score √©lev√© - Consultation recommand√©e" if total_score >= 6 
                 else "Score mod√©r√© - Surveillance sugg√©r√©e" if total_score >= 4 
                 else "Score faible - Profil neurotypique probable"}
            </p>
        </div>
        """, unsafe_allow_html=True)

    # Formulaire pour informations personnelles
    st.markdown("### üë§ Informations compl√©mentaires pour la pr√©diction IA")
    
    with st.form("personal_info_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            age = st.number_input("√Çge", min_value=1, max_value=100, value=25)
            genre = st.selectbox("Genre", ["M", "F"])
            ethnie = st.selectbox("Ethnie", ["White-European", "Asian", "Middle Eastern", "Black", "Latino", "Others"])
        
        with col2:
            status_testeur = st.selectbox("Qui remplit ce questionnaire ?", 
                                        ["Famille", "Professionnel de sant√©", "Individu", "Autre"])
            antecedents = st.selectbox("Ant√©c√©dents familiaux de TSA", ["Yes", "No"])
        
        submitted = st.form_submit_button("ü§ñ Obtenir la pr√©diction IA", use_container_width=True, type="primary")
        
        if submitted:
            # Pr√©parer les donn√©es pour la pr√©diction
            user_data = {
                'Age': age,
                'Genre': genre,
                'Ethnie': ethnie,
                'Statut_testeur': status_testeur,
                'Antecedents_familiaux': antecedents,
                'Score_A10': total_score
            }
            
            # Ajouter les r√©ponses individuelles
            for i in range(1, 11):
                user_data[f'A{i}'] = st.session_state.aq10_responses[f'A{i}']
            
            # Simulation de pr√©diction (remplacer par votre mod√®le r√©el)
            prediction_proba = simulate_prediction(user_data)
            
            show_prediction_results(prediction_proba, total_score)

    # Bouton pour recommencer
    if st.button("üîÑ Recommencer le questionnaire"):
        st.session_state.current_question = 1
        st.session_state.aq10_responses = {}
        st.session_state.show_results = False
        st.rerun()

def simulate_prediction(user_data):
    """Simulation de pr√©diction - remplacer par le mod√®le r√©el"""
    import random
    # Simulation bas√©e sur le score AQ-10 et d'autres facteurs
    base_prob = user_data['Score_A10'] / 10 * 0.7
    age_factor = 0.1 if user_data['Age'] < 18 else 0.05
    family_factor = 0.2 if user_data['Antecedents_familiaux'] == 'Yes' else 0
    
    total_prob = min(base_prob + age_factor + family_factor + random.uniform(-0.1, 0.1), 0.95)
    return max(total_prob, 0.05)

def show_prediction_results(probability, aq10_score):
    """Affiche les r√©sultats de la pr√©diction IA"""
    
    risk_level = "√âlev√©" if probability > 0.7 else "Mod√©r√©" if probability > 0.4 else "Faible"
    color = "#e74c3c" if probability > 0.7 else "#f39c12" if probability > 0.4 else "#2ecc71"
    
    st.markdown(f"""
    <div style="background: {color}; color: white; padding: 25px; 
               border-radius: 15px; margin: 25px 0; text-align: center;">
        <h3 style="margin-bottom: 15px;">ü§ñ R√©sultat de l'Intelligence Artificielle</h3>
        <div style="font-size: 2.5rem; font-weight: bold; margin: 15px 0;">
            {probability:.1%}
        </div>
        <p style="font-size: 1.2rem;">
            Probabilit√© de pr√©sence de traits autistiques - Niveau de risque: {risk_level}
        </p>
    </div>
    """, unsafe_allow_html=True)

    # Recommandations
    st.markdown("### üí° Recommandations")
    
    if probability > 0.7:
        st.error("""
        **Risque √©lev√© d√©tect√©**
        - Consultation avec un professionnel sp√©cialis√© recommand√©e
        - √âvaluation diagnostique compl√®te sugg√©r√©e
        - Ce r√©sultat ne constitue pas un diagnostic
        """)
    elif probability > 0.4:
        st.warning("""
        **Risque mod√©r√© d√©tect√©**
        - Surveillance et suivi recommand√©s
        - Consultation possible avec un professionnel
        - R√©√©valuation dans quelques mois
        """)
    else:
        st.success("""
        **Risque faible d√©tect√©**
        - Profil neurotypique probable
        - Surveillance de routine suffisante
        - Consultez si pr√©occupations persistent
        """)

    # Avertissement l√©gal
    st.warning("""
    ‚ö†Ô∏è **Avertissement Important**
    
    Cette pr√©diction est g√©n√©r√©e par un algorithme d'intelligence artificielle √† des fins d'aide au d√©pistage uniquement. 
    Elle ne remplace en aucun cas l'avis d'un professionnel de sant√© qualifi√©. 
    Pour un diagnostic d√©finitif, consultez un psychiatre ou psychologue sp√©cialis√© dans les troubles du spectre autistique.
    """)
                    
def show_documentation():
    st.markdown("""
<div style="background: linear-gradient(90deg, #3498db, #2ecc71);
            padding: 40px 25px; border-radius: 20px; margin-bottom: 35px; text-align: center;">
    <h1 style="color: white; font-size: 2.8rem; margin-bottom: 15px;
               text-shadow: 0 2px 4px rgba(0,0,0,0.3); font-weight: 600;">
        üìö Documentation
    </h1>
    <p style="color: rgba(255,255,255,0.95); font-size: 1.3rem;
              max-width: 800px; margin: 0 auto; line-height: 1.6;">
        Une approche moderne et scientifique pour le d√©pistage pr√©coce
    </p>
</div>
""", unsafe_allow_html=True)
    
    new_image_url = "https://drive.google.com/file/d/1ZGjB0A_9v3SqgeZRk1ZC_ofvIxAANwfs/view?usp=drive_link"
    st.markdown(get_img_with_href(new_image_url, None, as_banner=True), unsafe_allow_html=True)


    with st.expander("üìã √Ä propos du questionnaire AQ-10", expanded=True):
        st.markdown("""
        ### Le questionnaire AQ-10

        L'AQ-10 est une version abr√©g√©e du Quotient du Spectre Autistique (AQ), un outil de d√©pistage valid√© scientifiquement.

        - **D√©velopp√© par** : Professeur Simon Baron-Cohen et son √©quipe √† l'Universit√© de Cambridge
        - **Objectif** : Identifier rapidement les traits autistiques chez les adultes et adolescents
        - **Utilisation** : Outil de d√©pistage initial, non diagnostique
        - **Validation** : √âtudes internationales avec sensibilit√© et sp√©cificit√© √©lev√©es
        """)

        st.markdown("""
        ### Interpr√©tation des scores

        - **Score ‚â• 6** : D√©pistage positif, sugg√©rant la pr√©sence de traits autistiques significatifs
        - **Score < 6** : D√©pistage n√©gatif

        Un d√©pistage positif n'est pas un diagnostic mais indique qu'une √©valuation plus approfondie pourrait √™tre b√©n√©fique.
        """)

    with st.expander("üß† Signification des questions", expanded=True):
        st.markdown("""
        ### Comprendre les questions du test AQ-10

        Chaque question √©value un aspect sp√©cifique des traits associ√©s aux TSA :
        """)

        q_tabs = st.tabs(["Q1-3", "Q4-7", "Q8-10"])

        with q_tabs[0]:
            st.markdown("""
            #### Questions 1 √† 3

            **Q1: Je remarque souvent de petits bruits que les autres ne remarquent pas.**
            - √âvalue l'hypersensibilit√© sensorielle, trait fr√©quent dans les TSA

            **Q2: Je me concentre g√©n√©ralement davantage sur l'ensemble que sur les petits d√©tails.**
            - √âvalue la tendance √† la coh√©rence centrale (vision d'ensemble vs d√©tails)

            **Q3: Je trouve facile de faire plusieurs choses en m√™me temps.**
            - √âvalue les fonctions ex√©cutives et la flexibilit√© cognitive
            """)

        with q_tabs[1]:
            st.markdown("""
            #### Questions 4 √† 7

            **Q4: S'il y a une interruption, je peux rapidement reprendre ce que je faisais.**
            - √âvalue la flexibilit√© attentionnelle et l'adaptation aux changements

            **Q5: Je trouve facile de ¬´ lire entre les lignes ¬ª quand quelqu'un me parle.**
            - √âvalue la compr√©hension des messages implicites et du langage indirect

            **Q6: Je sais comment savoir si la personne qui m'√©coute commence √† s'ennuyer.**
            - √âvalue la capacit√© √† d√©tecter les signaux sociaux non verbaux

            **Q7: Quand je lis une histoire, j'ai du mal √† comprendre les intentions des personnages.**
            - √âvalue la th√©orie de l'esprit (comprendre les √©tats mentaux d'autrui)
            """)

        with q_tabs[2]:
            st.markdown("""
            #### Questions 8 √† 10

            **Q8: J'aime collecter des informations sur des cat√©gories de choses.**
            - √âvalue la tendance aux int√©r√™ts restreints et sp√©cifiques

            **Q9: Je trouve facile de comprendre ce que quelqu'un pense ou ressent rien qu'en regardant son visage.**
            - √âvalue la capacit√© √† lire les expressions faciales

            **Q10: J'ai du mal √† comprendre les intentions des gens.**
            - √âvalue la compr√©hension des intentions et motivations sociales
            """)

    with st.expander("üîç Sources Acad√©miques", expanded=True):
        st.markdown("""
          <div style="border-left:4px solid #1e88e5; padding-left:15px; margin-bottom:20px">
              <h3 style="color:#1e88e5">R√©f√©rences Bibliographiques</h3>
          </div>
          """, unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
              st.markdown("""
              <div style="background:#f8f9fa; padding:15px; border-radius:8px; height:100%">
                  <h4 style="color:#0d47a1; border-bottom:1px solid #ddd; padding-bottom:8px">Manuels de R√©f√©rence</h4>
                  <ul style="padding-left:20px">
                      <li>American Psychiatric Association. (2013). <em>Diagnostic and statistical manual of mental disorders</em> (5th ed.). <a href="https://doi.org/10.1176/appi.books.9780890425596" target="_blank">DOI</a></li>
                      <li>World Health Organization. (2019). <em>International classification of diseases</em> (11th ed.). <a href="https://icd.who.int/" target="_blank">Site web</a></li>
                      <li>Baron-Cohen, S. (2017). <em>The Pattern Seekers: How Autism Drives Human Invention</em>. <a href="https://www.simonandschuster.com/books/The-Pattern-Seekers/Simon-Baron-Cohen/9781541647145" target="_blank">√âditeur</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        with col2:
              st.markdown("""
              <div style="background:#f8f9fa; padding:15px; border-radius:8px; height:100%">
                  <h4 style="color:#0d47a1; border-bottom:1px solid #ddd; padding-bottom:8px">√âtudes Fondatrices</h4>
                  <ul style="padding-left:20px">
                      <li>Bergeron, M., & H√©bert, M. (2006). <em>√âvaluation d'une intervention de groupe d'approche f√©ministe aupr√®s de femmes victimes d'agression sexuelle</em>.</li>
                      <li>Mottron, L. (2020). <em>L'intervention pr√©coce pour enfants autistes : Nouveaux principes pour soutenir une autre intelligence</em>.</li>
                      <li>Silberman, S. (2015). <em>NeuroTribes: The Legacy of Autism and the Future of Neurodiversity</em>. <a href="https://www.penguinrandomhouse.com/books/310415/neurotribes-by-steve-silberman/" target="_blank">√âditeur</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        st.markdown("""
          <div style="margin-top:20px; background:#f8f9fa; padding:15px; border-radius:8px">
              <h4 style="color:#0d47a1; border-bottom:1px solid #ddd; padding-bottom:8px">Articles Scientifiques R√©cents</h4>
              <ul style="padding-left:20px">
                  <li>Culotta, L. et al. (2024). "Brain Structural Differences in Autism Spectrum Disorder". <em>Journal of Autism and Developmental Disorders</em>.</li>
                  <li>Anderson, J. S. (2023). "Connectivity Patterns in the Autistic Brain". <em>Autism Research</em>, 16(3), 456-472.</li>
                  <li>Grandin, T. (2023). "The Autistic Brain: Updated Perspectives". <em>Journal of Neuropsychology</em>, 15(2), 112-128.</li>
                  <li>Baron-Cohen, S. (2022). "Autism, Invention, and the STEM Connection". <em>Nature Neuroscience</em>, 25(1), 45-57.</li>
              </ul>
          </div>
          """, unsafe_allow_html=True)

    with st.expander("üß† Ressources sur l'Autisme", expanded=True):
        st.markdown("""
          <div style="border-left:4px solid #4caf50; padding-left:15px; margin-bottom:20px">
              <h3 style="color:#4caf50">Comprendre l'Autisme</h3>
          </div>
          """, unsafe_allow_html=True)

        st.markdown("""
          <h4 style="color:#2e7d32; margin-top:20px">Vid√©os √âducatives</h4>
          """, unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("""
              <div style="background:#f1f8e9; padding:15px; border-radius:8px; height:100%">
                  <h5 style="color:#33691e">Conf√©rences TED</h5>
                  <ul style="padding-left:20px">
                      <li><a href="https://www.ted.com/talks/temple_grandin_the_world_needs_all_kinds_of_minds?language=fr" target="_blank">Temple Grandin : Le monde a besoin de toutes sortes d'esprits</a></li>
                      <li><a href="https://www.youtube.com/watch?v=kHmvZBQjB0g" target="_blank">Comment l'autisme stimule l'invention humaine - Simon Baron-Cohen</a></li>
                      <li><a href="https://www.ted.com/talks/steve_silberman_the_forgotten_history_of_autism" target="_blank">Steve Silberman : L'histoire oubli√©e de l'autisme</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        with col2:
            st.markdown("""
              <div style="background:#f1f8e9; padding:15px; border-radius:8px; height:100%">
                  <h5 style="color:#33691e">Documentaires</h5>
                  <ul style="padding-left:20px">
                      <li><a href="https://www.youtube.com/watch?v=J9ZxvR_cm94" target="_blank">The Reason I Jump - Bande annonce officielle</a></li>
                      <li><a href="https://www.youtube.com/watch?v=Lr4_dOorquQ" target="_blank">Autism: The Musical - HBO Documentary</a></li>
                      <li><a href="https://www.arte.tv/fr/videos/RC-014294/dans-la-tete-des-autistes/" target="_blank">Dans la t√™te des autistes - Arte</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        st.markdown("""
          <h4 style="color:#2e7d32; margin-top:20px">Sites Web et Organisations</h4>
          """, unsafe_allow_html=True)

        col1, col2, col3 = st.columns(3)

        with col1:
              st.markdown("""
              <div style="background:#f1f8e9; padding:15px; border-radius:8px; height:100%">
                  <h5 style="color:#33691e">France</h5>
                  <ul style="padding-left:20px">
                      <li><a href="https://www.autisme-france.fr" target="_blank">Autisme France</a></li>
                      <li><a href="https://www.autismeinfoservice.fr" target="_blank">Autisme Info Service</a></li>
                      <li><a href="https://maisondelautisme.gouv.fr" target="_blank">Maison de l'autisme</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        with col2:
              st.markdown("""
              <div style="background:#f1f8e9; padding:15px; border-radius:8px; height:100%">
                  <h5 style="color:#33691e">International</h5>
                  <ul style="padding-left:20px">
                      <li><a href="https://www.autismspeaks.org" target="_blank">Autism Speaks</a></li>
                      <li><a href="https://www.autism.org" target="_blank">National Autistic Society (UK)</a></li>
                      <li><a href="https://www.cdc.gov/ncbddd/autism/" target="_blank">CDC - Autism Spectrum Disorder</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        with col3:
              st.markdown("""
              <div style="background:#f1f8e9; padding:15px; border-radius:8px; height:100%">
                  <h5 style="color:#33691e">Recherche et Formation</h5>
                  <ul style="padding-left:20px">
                      <li><a href="https://www.gncra.fr" target="_blank">GNCRA - Groupement National des CRA</a></li>
                      <li><a href="https://researchautism.org" target="_blank">Research Autism</a></li>
                      <li><a href="https://www.autism-uni.org" target="_blank">Autism&Uni</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        st.markdown("""
          <h4 style="color:#2e7d32; margin-top:20px">Livres Recommand√©s</h4>
          <div style="display:flex; overflow-x:auto; padding:10px 0; gap:15px">
              <div style="min-width:200px; background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1)">
                  <div style="width:100%; height:120px; background:#e8f5e9; display:flex; align-items:center; justify-content:center; border-radius:5px; margin-bottom:10px">
                      <span style="font-weight:bold; color:#2e7d32">NeuroTribes</span>
                  </div>
                  <h5 style="margin:10px 0 5px 0">NeuroTribes</h5>
                  <p style="font-size:0.9rem; margin:0">Steve Silberman (2015)</p>
              </div>
              <div style="min-width:200px; background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1)">
                  <div style="width:100%; height:120px; background:#e3f2fd; display:flex; align-items:center; justify-content:center; border-radius:5px; margin-bottom:10px">
                      <span style="font-weight:bold; color:#1565c0">The Autistic Brain</span>
                  </div>
                  <h5 style="margin:10px 0 5px 0">The Autistic Brain</h5>
                  <p style="font-size:0.9rem; margin:0">Temple Grandin (2014)</p>
              </div>
              <div style="min-width:200px; background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1)">
                  <div style="width:100%; height:120px; background:#fff3e0; display:flex; align-items:center; justify-content:center; border-radius:5px; margin-bottom:10px">
                      <span style="font-weight:bold; color:#e65100">Uniquely Human</span>
                  </div>
                  <h5 style="margin:10px 0 5px 0">Uniquely Human</h5>
                  <p style="font-size:0.9rem; margin:0">Barry M. Prizant (2022)</p>
              </div>
              <div style="min-width:200px; background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1)">
                  <div style="width:100%; height:120px; background:#f3e5f5; display:flex; align-items:center; justify-content:center; border-radius:5px; margin-bottom:10px">
                      <span style="font-weight:bold; color:#6a1b9a">The Pattern Seekers</span>
                  </div>
                  <h5 style="margin:10px 0 5px 0">The Pattern Seekers</h5>
                  <p style="font-size:0.9rem; margin:0">Simon Baron-Cohen (2021)</p>
              </div>
          </div>
          """, unsafe_allow_html=True)

    with st.expander("üìä Donn√©es et Mod√®les", expanded=True):
        st.markdown("""
          <div style="border-left:4px solid #ff9800; padding-left:15px; margin-bottom:20px">
              <h3 style="color:#ff9800">Sources des Donn√©es et Mod√©lisation</h3>
          </div>
          """, unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
              st.markdown("""
              <div style="background:#fff3e0; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.05)">
                  <h4 style="color:#e65100; border-bottom:1px solid #ffe0b2; padding-bottom:8px">Jeux de Donn√©es</h4>
                  <ul style="padding-left:20px">
                      <li>üìÅ <a href="https://www.kaggle.com/datasets/faizunnabi/autism-screening" target="_blank">Autism Screening Dataset</a> (n=1985)</li>
                      <li>üìÅ <a href="https://archive.ics.uci.edu/ml/datasets/Autism+Screening+Adult" target="_blank">UCI Machine Learning Repository</a> (n=704)</li>
                      <li>üìÅ <a href="https://data.gov.sa/" target="_blank">Open Data Saudi Arabia</a> (n=506)</li>
                      <li>üìÅ <a href="https://www.kaggle.com/datasets/fabdelja/autism-screening-for-toddlers" target="_blank">Autism Screening for Toddlers</a> (n=1054)</li>
                      <li>üìÅ <a href="https://www.kaggle.com/datasets/reevesii/global-autism-data" target="_blank">Global Autism Data</a> (n=800)</li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        with col2:
              st.markdown("""
              <div style="background:#fff3e0; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.05)">
                  <h4 style="color:#e65100; border-bottom:1px solid #ffe0b2; padding-bottom:8px">Mod√®les Utilis√©s</h4>
                  <div style="display:grid; grid-template-columns:repeat(2,1fr); gap:10px; margin-top:10px">
                      <div style="padding:10px; background:#e3f2fd; border-radius:5px; box-shadow:0 1px 3px rgba(0,0,0,0.1)">
                          <h5 style="margin:0 0 8px 0; color:#0d47a1">Random Forest</h5>
                          <ul style="margin:0; padding-left:15px; font-size:0.9rem">
                              <li>n_estimators=100</li>
                              <li>max_depth=10</li>
                              <li>min_samples_split=10</li>
                              <li>min_samples_leaf=1</li>
                          </ul>
                      </div>
                      <div style="padding:10px; background:#e8f5e9; border-radius:5px; box-shadow:0 1px 3px rgba(0,0,0,0.1)">
                          <h5 style="margin:0 0 8px 0; color:#1b5e20">LightGBM</h5>
                          <ul style="margin:0; padding-left:15px; font-size:0.9rem">
                              <li>learning_rate=0.1</li>
                              <li>max_depth=15</li>
                              <li>n_estimators=150</li>
                              <li>boosting_type='gbdt'</li>
                          </ul>
                      </div>
                      <div style="padding:10px; background:#fff8e1; border-radius:5px; box-shadow:0 1px 3px rgba(0,0,0,0.1)">
                          <h5 style="margin:0 0 8px 0; color:#ff6f00">XGBoost</h5>
                          <ul style="margin:0; padding-left:15px; font-size:0.9rem">
                              <li>learning_rate=0.1</li>
                              <li>max_depth=5</li>
                              <li>n_estimators=100</li>
                              <li>objective='binary:logistic'</li>
                          </ul>
                      </div>
                      <div style="padding:10px; background:#f3e5f5; border-radius:5px; box-shadow:0 1px 3px rgba(0,0,0,0.1)">
                          <h5 style="margin:0 0 8px 0; color:#4a148c">Logistic Regression</h5>
                          <ul style="margin:0; padding-left:15px; font-size:0.9rem">
                              <li>C=1.0</li>
                              <li>penalty='l2'</li>
                              <li>solver='lbfgs'</li>
                              <li>max_iter=200</li>
                          </ul>
                      </div>
                  </div>
              </div>
              """, unsafe_allow_html=True)

    with st.expander("üìù R√©f√©rences Techniques", expanded=True):
        st.markdown("""
        <div style="border-left:4px solid #9c27b0; padding-left:15px; margin-bottom:20px">
            <h3 style="color:#9c27b0">Stack Technologique</h3>
        </div>
        """, unsafe_allow_html=True)

        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("""
            <div style="background:#fff; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1); height:100%">
                <h4 style="color:#4a148c; border-bottom:1px solid #e1bee7; padding-bottom:8px">
                    <span style="font-size:1.2rem; margin-right:5px">'üìö'</span> Biblioth√®ques Principales
                </h4>
                <ul style="padding-left:20px; margin-top:10px">
                    <li><strong>Scikit-learn 1.3.2</strong> - Mod√®les et pr√©traitement</li>
                    <li><strong>Plotly 5.18.0</strong> - Visualisations interactives</li>
                    <li><strong>XGBoost 2.0.3</strong> - Mod√®les boosting</li>
                    <li><strong>LightGBM 4.1.0</strong> - Mod√®les gradient boosting</li>
                    <li><strong>Pandas 2.1.3</strong> - Manipulation des donn√©es</li>
                    <li><strong>NumPy 1.26.0</strong> - Calculs num√©riques</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown("""
            <div style="background:#fff; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1); height:100%">
                <h4 style="color:#4a148c; border-bottom:1px solid #e1bee7; padding-bottom:8px">
                    <span style="font-size:1.2rem; margin-right:5px">üñ•Ô∏è</span> Infrastructure
                </h4>
                <ul style="padding-left:20px; margin-top:10px">
                    <li><strong>Streamlit 1.29.0</strong> - Interface utilisateur</li>
                    <li><strong>Docker 24.0.7</strong> - Conteneurisation</li>
                    <li><strong>AWS EC2 t3.large</strong> - H√©bergement</li>
                    <li><strong>GitHub Actions</strong> - CI/CD</li>
                    <li><strong>Python 3.10</strong> - Langage principal</li>
                    <li><strong>NGINX</strong> - Serveur web</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            st.markdown("""
            <div style="background:#fff; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1); height:100%">
                <h4 style="color:#4a148c; border-bottom:1px solid #e1bee7; padding-bottom:8px">
                    <span style="font-size:1.2rem; margin-right:5px">üîó</span> Sources Externes
                </h4>
                <ul style="padding-left:20px; margin-top:10px">
                    <li><a href="https://autism-resources.org" target="_blank"><strong>Autism Resources Initiative</strong></a></li>
                    <li><a href="https://www.cdc.gov/ncbddd/autism/data.html" target="_blank"><strong>CDC Autism Data</strong></a></li>
                    <li><a href="https://www.kaggle.com/datasets" target="_blank"><strong>Kaggle Datasets</strong></a></li>
                    <li><a href="https://archive.ics.uci.edu/ml/" target="_blank"><strong>UCI ML Repository</strong></a></li>
                    <li><a href="https://huggingface.co/datasets" target="_blank"><strong>Hugging Face Datasets</strong></a></li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

def show_about_page():
    st.markdown("""
    <div style="background: linear-gradient(90deg, #3498db, #2ecc71); 
                padding: 40px 20px; border-radius: 20px; margin-bottom: 30px; text-align: center;">
        <h1 style="color: white; font-size: 2.8rem; margin-bottom: 15px; text-shadow: 0 2px 4px rgba(0,0,0,0.3);">
            ‚ÑπÔ∏è √Ä propos du Projet
        </h1>
        <p style="color: rgba(255,255,255,0.9); font-size: 1.3rem; max-width: 800px; margin: 0 auto; line-height: 1.6;">
            Une initiative innovante pour am√©liorer le d√©pistage pr√©coce des Troubles du Spectre Autistique
        </p>
    </div>
    """, unsafe_allow_html=True)



    image_url = "https://drive.google.com/file/d/1tbARR43xi1GCnfY9XrEc-O2FbMnTmPcW/view?usp=sharing"
    st.markdown(get_img_with_href(image_url, "#", as_banner=False), unsafe_allow_html=True)

    st.markdown("""
    <div style="background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); 
                padding: 30px; border-radius: 15px; margin-bottom: 30px;">
        <h2 style="color: #2c3e50; text-align: center; margin-bottom: 25px; font-size: 2.2rem;">
            üéØ Contexte du Projet
        </h2>
        <div style="max-width: 900px; margin: 0 auto;">
            <p style="font-size: 1.1rem; line-height: 1.8; text-align: justify; margin-bottom: 20px; color: #34495e;">
                Ce projet a √©t√© d√©velopp√© dans le cadre d'une √©tude approfondie sur les m√©thodes de d√©pistage 
                des Troubles du Spectre Autistique (TSA). Notre approche combine l'analyse de donn√©es massives, 
                l'intelligence artificielle et l'expertise clinique pour cr√©er un outil d'aide au diagnostic pr√©coce.
            </p>
            <p style="font-size: 1.1rem; line-height: 1.8; text-align: justify; color: #34495e;">
                L'objectif principal est de faciliter l'identification pr√©coce des signaux d'alerte, permettant 
                ainsi une intervention plus rapide et plus efficace pour les personnes concern√©es et leurs familles.
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("## üéØ Objectifs du Projet")
    
    col1, col2, col3 = st.columns(3)
    
    objectives = [
        {
            "icon": "üîç",
            "title": "Identifier les facteurs",
            "description": "Analyser les variables associ√©es √† la pr√©sence d'un TSA √† partir de donn√©es multiples",
            "color": "#3498db"
        },
        {
            "icon": "üìä",
            "title": "Explorer les donn√©es",
            "description": "D√©couvrir des tendances et biais dans les jeux de donn√©es internationaux",
            "color": "#2ecc71"
        },
        {
            "icon": "ü§ñ",
            "title": "Construire des mod√®les",
            "description": "D√©velopper des outils pr√©dictifs pour l'aide √† l'√©valuation du TSA",
            "color": "#9b59b6"
        }
    ]
    
    for i, (obj, col) in enumerate(zip(objectives, [col1, col2, col3])):
        with col:
            st.markdown(f"""
            <div style="background: linear-gradient(135deg, {obj['color']}, {obj['color']}cc); 
                        color: white; padding: 25px; border-radius: 15px; height: 280px; 
                        box-shadow: 0 8px 25px rgba(0,0,0,0.15); transition: transform 0.3s ease;">
                <div style="text-align: center; margin-bottom: 20px;">
                    <div style="font-size: 3rem; margin-bottom: 15px;">{obj['icon']}</div>
                    <h3 style="margin: 0; font-size: 1.4rem; font-weight: 600;">{obj['title']}</h3>
                </div>
                <p style="font-size: 1rem; line-height: 1.5; text-align: center; margin: 0;">
                    {obj['description']}
                </p>
            </div>
            """, unsafe_allow_html=True)

    st.markdown("""
    <div style="background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%); 
                padding: 30px; border-radius: 15px; margin: 30px 0;">
        <h2 style="color: #8b4513; text-align: center; margin-bottom: 25px; font-size: 2.2rem;">
            üìö Sources de Donn√©es
        </h2>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
                    gap: 20px; max-width: 1000px; margin: 0 auto;">
            <div style="background: rgba(255,255,255,0.8); padding: 20px; border-radius: 10px;">
                <h4 style="color: #8b4513; margin-bottom: 10px;">üåç Couverture Internationale</h4>
                <p style="margin: 0; color: #5d4e37;">Plus de 5000 participants de diff√©rentes origines g√©ographiques</p>
            </div>
            <div style="background: rgba(255,255,255,0.8); padding: 20px; border-radius: 10px;">
                <h4 style="color: #8b4513; margin-bottom: 10px;">üìä Donn√©es Diversifi√©es</h4>
                <p style="margin: 0; color: #5d4e37;">5 jeux de donn√©es publics combin√©s et harmonis√©s</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                padding: 30px; border-radius: 15px; margin: 30px 0;">
        <h2 style="color: white; text-align: center; margin-bottom: 25px; font-size: 2.2rem;">
            üë• √âquipe du Projet
        </h2>
        <div style="max-width: 1000px; margin: 0 auto;">
            <p style="font-size: 1.2rem; line-height: 1.6; color: rgba(255,255,255,0.9); text-align: center; margin-bottom: 30px;">
                Ce projet a √©t√© r√©alis√© par une √©quipe de futurs data analysts passionn√©s par l'innovation en sant√© digitale.
            </p>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 20px;">
                <div style="background: rgba(255,255,255,0.15); padding: 20px; border-radius: 10px; 
                            text-align: center; backdrop-filter: blur(10px); 
                            display: flex; flex-direction: column; justify-content: center; align-items: center;">
                    <div style="font-size: 2.5rem; margin-bottom: 10px;">üë®‚Äçüíª</div>
                    <h4 style="color: white; margin: 0; font-size: 1.2rem; text-align: center; 
                               display: flex; align-items: center; justify-content: center; height: auto;">
                        R√©mi CHENOURI
                    </h4>
                    <p style="color: rgba(255,255,255,0.8); margin: 5px 0 0 0; font-size: 0.9rem; 
                              text-align: center;">Futur Data Analyst</p>
                </div>
                <div style="background: rgba(255,255,255,0.15); padding: 20px; border-radius: 10px; 
                            text-align: center; backdrop-filter: blur(10px); 
                            display: flex; flex-direction: column; justify-content: center; align-items: center;">
                    <div style="font-size: 2.5rem; margin-bottom: 10px;">üë©‚Äçüíª</div>
                    <h4 style="color: white; margin: 0; font-size: 1.2rem; text-align: center; 
                               display: flex; align-items: center; justify-content: center; height: auto;">
                        Alexandre BERNARD
                    </h4>
                    <p style="color: rgba(255,255,255,0.8); margin: 5px 0 0 0; font-size: 0.9rem; 
                              text-align: center;">Futur Data Analyst</p>
                </div>
                <div style="background: rgba(255,255,255,0.15); padding: 20px; border-radius: 10px; 
                            text-align: center; backdrop-filter: blur(10px); 
                            display: flex; flex-direction: column; justify-content: center; align-items: center;">
                    <div style="font-size: 2.5rem; margin-bottom: 10px;">üë®‚Äçüíª</div>
                    <h4 style="color: white; margin: 0; font-size: 1.2rem; text-align: center; 
                               display: flex; align-items: center; justify-content: center; height: auto;">
                        Laurence SOUPPARAZAYA
                    </h4>
                    <p style="color: rgba(255,255,255,0.8); margin: 5px 0 0 0; font-size: 0.9rem; 
                              text-align: center;">Future Data Analyst</p>
                </div>
                <div style="background: rgba(255,255,255,0.15); padding: 20px; border-radius: 10px; 
                            text-align: center; backdrop-filter: blur(10px); 
                            display: flex; flex-direction: column; justify-content: center; align-items: center;">
                    <div style="font-size: 2.5rem; margin-bottom: 10px;">üë©‚Äçüíª</div>
                    <h4 style="color: white; margin: 0; font-size: 1.2rem; text-align: center; 
                               display: flex; align-items: center; justify-content: center; height: auto;">
                        Ahmed IBNABASSE
                    </h4>
                    <p style="color: rgba(255,255,255,0.8); margin: 5px 0 0 0; font-size: 0.9rem; 
                              text-align: center;">Future Data Analyst</p>
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("""
    <div style="background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); 
                padding: 30px; border-radius: 15px; margin: 30px 0;">
        <h2 style="color: #2c3e50; text-align: center; margin-bottom: 20px; font-size: 2.2rem;">
            üôè Remerciements
        </h2>
        <div style="text-align: center; max-width: 700px; margin: 0 auto;">
            <p style="font-size: 1.2rem; line-height: 1.7; color: #2c3e50; margin-bottom: 15px;">
                Nous remercions toutes les personnes ayant contribu√© √† ce projet, en particulier 
                <strong>notre mentor Yohan Cohen</strong> pour son soutien et ses conseils pr√©cieux 
                tout au long de cette recherche.
            </p>
            <p style="font-size: 1.1rem; color: #34495e; font-style: italic;">
                Un remerciement sp√©cial √† toutes les familles et individus qui ont particip√© aux √©tudes 
                ayant permis la constitution de ces jeux de donn√©es.
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("""
    <div style="background: linear-gradient(135deg, #d299c2 0%, #fef9d7 100%); 
                padding: 25px; border-radius: 15px; margin: 30px 0;">
        <h2 style="color: #8b4513; text-align: center; margin-bottom: 20px; font-size: 2rem;">
            üìÑ Licence et Utilisation
        </h2>
        <div style="text-align: center; max-width: 800px; margin: 0 auto;">
            <p style="font-size: 1.1rem; line-height: 1.6; color: #5d4e37;">
                Cette application est mise √† disposition sous licence open-source. 
                Le code et les donn√©es anonymis√©es sont disponibles pour des fins de recherche uniquement.
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    st.markdown("""
    <div style="border: 2px solid #e74c3c; border-radius: 10px; padding: 20px; 
                background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%); margin-top: 30px;">
        <h3 style="color: #c62828; margin-top: 0; text-align: center;">
            ‚ö†Ô∏è Avertissement Important
        </h3>
        <p style="font-size: 1rem; color: #b71c1c; text-align: center; margin: 0; font-weight: 500;">
            Cette application est un outil d'aide au d√©pistage pr√©coce et ne remplace en aucun cas 
            une √©valuation clinique compl√®te par un professionnel de sant√© qualifi√©.
        </p>
    </div>
    """, unsafe_allow_html=True)

    pass

def main():
    if "initialized" not in st.session_state:
        set_custom_theme()
        st.session_state.initialized = True

        if "aq10_total" not in st.session_state:
            st.session_state.aq10_total = 0

        if "expanders_initialized" not in st.session_state:
            st.session_state.expanders_initialized = {
                'structure': True,
                'valeurs_manquantes': False,
                'pipeline': False,
                'variables_cles': True,
                'questionnaire': False,
                'composite': False,
                'statistiques': False,
                'correlation': False,
                'famd': False
            }

    if 'df' not in st.session_state:
        with st.spinner("Chargement des donn√©es..."):
            st.session_state.df, st.session_state.df_ds1, st.session_state.df_ds2, st.session_state.df_ds3, st.session_state.df_ds4, st.session_state.df_ds5, st.session_state.df_stats = load_dataset()

    with st.sidebar:
        st.markdown('<p class="sidebar-title">üß© Autisme - Navigation</p>', unsafe_allow_html=True)
        pages = [
            "üè† Accueil",
            "üîç Exploration",
            "üß† Analyse ML",
            "ü§ñ Pr√©diction par IA",
            "üìö Documentation",
            "‚ÑπÔ∏è √Ä propos"
        ]
        selection = st.sidebar.radio("Choisissez un outil :", pages)

    palette = {
        "Yes": "#3498db",
        "No": "#2ecc71",
        "Unknown": "#95a5a6"
    }

    if "üè† Accueil" in selection:
        show_home_page()
    elif "üîç Exploration" in selection:
        show_data_exploration()
    elif "üß† Analyse ML" in selection:
        show_ml_analysis()
    elif "ü§ñ Pr√©diction par IA" in selection:
        show_aq10_and_prediction()
    elif "üìö Documentation" in selection:
        show_documentation()
    elif "‚ÑπÔ∏è √Ä propos" in selection:
        show_about_page()

if __name__ == "__main__":
    main()


