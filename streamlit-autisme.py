# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tYyBZXlbNHUGJELlLOMJWGZVmxY346Yd
"""

import streamlit as st

import joblib
import prince

st.set_page_config(
    page_title="D√©pistage Autisme",
    page_icon="üß©",
    layout="wide",
    initial_sidebar_state="expanded"
)


import base64
import hashlib
import os
import pickle
import numpy as np
import pandas as pd
import requests
from concurrent.futures import ThreadPoolExecutor
from io import BytesIO
from PIL import Image
import streamlit.components.v1 as components
import plotly.express as px


for folder in ['data_cache', 'image_cache', 'model_cache', 'theme_cache']:
    os.makedirs(folder, exist_ok=True)


if "aq10_total" not in st.session_state:
    st.session_state.aq10_total = 0

if "aq10_responses" not in st.session_state:
    st.session_state.aq10_responses = []

def initialize_session_state():
    """Initialise l'√©tat de session pour conserver les configurations entre les recharges"""
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
        
        # Par d√©faut, commencer sur la page d'accueil
        default_tool = "üè† Accueil"
        
        # R√©cup√©rer le param√®tre de s√©lection de l'URL s'il existe
        try:
            # Pour les versions r√©centes de Streamlit (1.30.0+)
            if "selection" in st.query_params:
                selection = st.query_params["selection"]
                # Mapping entre les valeurs des liens et les options du menu
                selection_mapping = {
                    "üìù Test AQ-10": "ü§ñ Pr√©diction par IA",
                    "ü§ñ Pr√©diction par IA": "ü§ñ Pr√©diction par IA",
                    "üîç Exploration des Donn√©es": "üîç Exploration des Donn√©es"
                }
                
                if selection in selection_mapping:
                    st.session_state.tool_choice = selection_mapping[selection]
                else:
                    st.session_state.tool_choice = default_tool
            else:
                st.session_state.tool_choice = default_tool
        except:
            # Fallback pour les versions plus anciennes de Streamlit
            try:
                query_params = st.experimental_get_query_params()
                if "selection" in query_params:
                    selection = query_params["selection"][0]  # experimental_get_query_params retourne une liste
                    selection_mapping = {
                        "üìù Test AQ-10": "ü§ñ Pr√©diction par IA",
                        "ü§ñ Pr√©diction par IA": "ü§ñ Pr√©diction par IA",
                        "üîç Exploration des Donn√©es": "üîç Exploration des Donn√©es"
                    }
                    
                    if selection in selection_mapping:
                        st.session_state.tool_choice = selection_mapping[selection]
                    else:
                        st.session_state.tool_choice = default_tool
                else:
                    st.session_state.tool_choice = default_tool
            except:
                st.session_state.tool_choice = default_tool
        
        st.session_state.data_exploration_expanded = True

def show_navigation_menu():
    st.markdown("## Autisme - Navigation")

    st.markdown("Choisissez un outil :")


    options = ["üè† Accueil",
             "üîç Exploration des Donn√©es",
             "üß† Analyse ML",
             "ü§ñ Pr√©diction par IA",
             "üìö Documentation",
             "‚ÑπÔ∏è √Ä propos"]


    if 'tool_choice' not in st.session_state or st.session_state.tool_choice not in options:
        st.session_state.tool_choice = "üè† Accueil"

    current_index = options.index(st.session_state.tool_choice)


    tool_choice = st.radio(
        "",
        options,
        label_visibility="collapsed",
        index=current_index,
        extended=True
    )

    if tool_choice != st.session_state.tool_choice:
        st.session_state.tool_choice = tool_choice

    return tool_choice

def set_custom_theme():
    css_path = "theme_cache/custom_theme.css"
    os.makedirs(os.path.dirname(css_path), exist_ok=True)

    if os.path.exists(css_path):
        with open(css_path, 'r') as f:
            custom_theme = f.read()
    else:

        custom_theme = """
        <style>
        /* Variables globales */
        :root {
            --primary: #3498db;
            --secondary: #2ecc71;
            --background: #f0f2f6;
            --card-bg: white;
            --text: #2c3e50;
        }

        /* Styles g√©n√©raux du conteneur */
        [data-testid="stAppViewContainer"] {
            background-color: var(--background);
        }

        h1, h2, h3, h4, h5, h6 {
            color: var(--text);
            font-weight: 600;
            font-family: 'Segoe UI', sans-serif;
        }

        /* Correction de la navigation - SOLUTION PRINCIPALE */
        [data-testid="stSidebar"] {
            background-color: #f5f7fa;
            border-right: 2px solid var(--primary);
            padding-top: 2rem;
            width: 250px !important; /* Largeur augment√©e */
        }
        [data-testid="stSidebar"] label {
        margin-bottom: 14px !important;
        padding: 8px 12px !important;
        border-radius: 8px;
        transition: background 0.2s;
        }
        [data-testid="stSidebar"] label:hover {
            background: #eaf2f8 !important;
        }
        .sidebar-title {
            margin-bottom: 2rem !important;
        }... /* Assurer que le contenu est correctement dimensionn√© */
        [data-testid="stSidebarContent"] {
            width: 100%;
            overflow: auto;
            background-color: #f5f7fa !important;
        }

        /* Am√©lioration du texte dans la sidebar */
        [data-testid="stSidebar"] label,
        [data-testid="stSidebar"] div,
        [data-testid="stSidebar"] p,
        [data-testid="stSidebar"] span {
            color: #2c3e50 !important;
            font-weight: 500 !important;
            font-size: 1rem !important;
            white-space: normal !important;
            overflow-wrap: break-word !important;
            word-wrap: break-word !important;
        }

        /* Am√©lioration sp√©cifique pour les expanders */
        [data-testid="stSidebar"] .streamlit-expanderHeader {
            white-space: normal !important;
            overflow-wrap: break-word !important;
            word-wrap: break-word !important;
            hyphens: auto !important;
            padding-right: 10px !important;
        }

        /* Titre de la sidebar plus visible */
        .sidebar-title {
            font-size: 1.5rem;
            color: #3498db;
            margin-bottom: 1.5rem;
            text-align: center;
            border-bottom: 2px solid #3498db;
            padding-bottom: 0.5rem;
        }

        /* Am√©lioration pour le menu de radiobuttons */
        [data-testid="stSidebar"] div[role="radiogroup"] label {
            color: #2c3e50 !important;
            font-weight: 500 !important;
            font-size: 0.95rem !important;
            margin-bottom: 5px !important;
            white-space: normal !important;
            overflow-wrap: break-word !important;
            line-height: 1.4 !important;
            padding: 5px 10px !important;
            display: block !important;
            width: 100% !important;
        }

        .sidebar .sidebar-content {
            background-color: #f5f7fa !important;
            border-right: 2px solid #3498db !important;
        }

        .sidebar .sidebar-content .streamlit-expanderHeader,
        .sidebar .sidebar-content label,
        .sidebar .sidebar-content div,
        .sidebar .sidebar-content p,
        .sidebar .sidebar-content span {
            color: #2c3e50 !important;
            font-weight: 500 !important;
        }

        .sidebar .sidebar-content label {
            color: #2c3e50 !important;
            font-weight: 500 !important;
            font-size: 1rem !important;
        }

        /* Styles des cartes et conteneurs */
        .header-container {
            display: flex;
            align-items: center;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            padding: 1.5rem;
            border-radius: 10px;
            color: white;
            margin-bottom: 1.5rem;
        }

        .app-title {
            font-size: 2.2rem;
            font-weight: bold;
            margin-left: 1rem;
        }

        .puzzle-title {
            display: flex;
            align-items: center;
            gap: 15px;
            font-size: 2.2rem;
            color: var(--primary);
            font-weight: bold;
            margin-bottom: 1rem;
        }

        .puzzle-icon {
            font-size: 2.2rem;
        }

        .main .block-container {
            padding-top: 0.7rem !important;
            padding-bottom: 0.7rem !important;
        }

        [data-testid="stVerticalBlock"] {
            gap: 0.5rem !important;
        }

        .element-container {
            margin-bottom: 0.5rem !important;
        }

        .css-1544g2n.e1fqkh3o4 {
            padding-top: 2rem !important;
            padding-bottom: 0.5rem !important;
        }

        /* Styles des info-cards */
        .info-card {
            background-color: var(--card-bg);
            border-radius: 12px;
            padding: 1rem !important;
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border-top: 5px solid var(--primary);
            margin-bottom: 10px !important;
        }

        .info-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 20px rgba(0, 0, 0, 0.15);
        }

        .card-title {
            color: var(--primary);
            font-size: 1.4rem;
            font-weight: bold;
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--primary);
            padding-bottom: 0.5rem;
        }
        div[role="radiogroup"] input[type="radio"]:checked + div {
        background-color: #3498db !important;
        color: white !important;
        border-color: #2980b9 !important;
        font-weight: 600 !important;
        box-shadow: 0 2px 5px rgba(52, 152, 219, 0.4) !important;
    }

        /* Styles des questions et formulaires */
        .question-container {
            background-color: white;
            padding: 12px 15px !important;
            border-radius: 12px;
            margin-bottom: 12px !important;
            box-shadow: 0 3px 10px rgba(0,0,0,0.08);
            border-left: 4px solid var(--primary);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .question-container:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .question-text {
            font-size: 1.1rem;
            font-weight: 500;
            color: var(--text);
            margin-bottom: 15px;
            line-height: 1.5;
        }

        .questionnaire-title {
            color: var(--primary);
            font-size: 2rem;
            margin-bottom: 2rem;
            padding-bottom: 0.8rem;
            border-bottom: 2px solid var(--primary);
        }

        /* Styles des radiobuttons */
        div[role="radiogroup"] {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            gap: 5px !important;
            margin-top: 10px;
            margin-bottom: 15px !important;
        }

        div[role="radiogroup"] label {
        color: #2c3e50 !important;  /* Texte fonc√© */
        padding-right: 15px !important;
        margin-bottom: 5px !important;
        font-weight: 500 !important;
        font-size: 1rem !important;
        white-space: normal !important;
        overflow-wrap: break-word !important;
        line-height: 1.4 !important;
        padding: 5px 10px !important;
        display: block !important;
        width: 100% !important;
    }


        div[role="radiogroup"] label > div:first-child {
            display: none !important;
        }

        input[type="radio"] + div {
            background: #f5f7fa !important;
            color: var(--text);
            border-radius: 38px !important;
            padding: 10px 20px !important;
            border: 1px solid #dfe4ea;
            transition: all 0.3s ease;
            font-weight: 500;
        }... input[type="radio"] + div:hover {
            background: #e9f0ff !important;
            border-color: var(--primary);
            transform: translateY(-1px);
        }

        /* Styles des boutons et CTA */
        .cta-button {
            background: linear-gradient(135deg, var(--primary), #2980b9);
            color: white;
            padding: 0.9rem 1.5rem;
            border-radius: 30px;
            font-weight: bold;
            text-align: center;
            display: inline-block;
            text-decoration: none;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(52, 152, 219, 0.3);
            width: 80%;
        }

        .cta-button:hover {
            background: linear-gradient(135deg, #2980b9, var(--primary));
            box-shadow: 0 6px 15px rgba(52, 152, 219, 0.4);
            transform: translateY(-2px);
        }

        .stButton > button {
            width: 100%;
            padding: 0.8rem 1rem !important;
            font-size: 1.1rem !important;
            margin-top: 1rem;
        }

        /* Styles des expanders et tabs */
        .streamlit-expanderHeader {
            background-color: #f5f7fa;
            border-radius: 8px;
            font-weight: 600;
            padding: 10px 15px !important;
            border-left: 4px solid var(--primary);
            transition: all 0.2s ease;
        }

        .streamlit-expanderHeader:hover {
            background-color: #eef1f5;
            transform: translateX(2px);
        }

        .stTabs [data-baseweb="tab-list"] {
            gap: 2px;
        }

        .stTabs [data-baseweb="tab"] {
            height: 40px;
            white-space: pre-wrap;
            background-color: #f5f7fa;
            border-radius: 5px 5px 0 0;
            gap: 1px;
            padding-left: 15px;
            padding-right: 15px;
        }

        .stTabs [aria-selected="true"] {
            background-color: var(--primary) !important;
            color: white !important;
        }

        /* Styles divers */
        [data-testid="stDataFrame"] {
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        [data-testid="stMetricValue"] {
            font-weight: 600;
            color: var(--primary);
            font-size: 1.2rem;
        }

        [data-testid="stMetricDelta"] {
            font-size: 0.9rem;
        }

        div[data-baseweb="select"] > div {
            border-radius: 8px;
            background-color: white;
            transition: all 0.2s ease;
        }

        div[data-baseweb="select"] > div:hover {
            border-color: var(--primary);
        }

        pre {
            white-space: pre-wrap;
            word-wrap: break-word;
            overflow-wrap: break-word;
            overflow-x: auto;
            max-width: 100%;
            font-size: 0.9rem;
            color: #2c3e50;
        }

        .structure-donnees pre {
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            border: 1px solid #d0d0d0;
            line-height: 1.6;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .fade-in {
            animation: fadeIn 0.8s ease-in-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .footer {
            background-color: #f0f2f6;
            padding: 1rem;
            text-align: center;
            border-top: 2px solid #3498db;
            margin-top: 2rem;
            border-radius: 10px;
        }

        .sidebar .sidebar-content .streamlit-expanderHeader {
            white-space: normal !important;
            overflow-wrap: break-word !important;
            word-wrap: break-word !important;
            hyphens: auto !important;
            padding-right: 10px !important;
        }

        .sidebar .sidebar-content label {
            color: #2c3e50 !important;
            font-weight: 500 !important;
            font-size: 1rem !important;
        }

        .sidebar .sidebar-content div[role="radiogroup"] label {
            padding-right: 15px !important;
            margin-bottom: 5px !important;
            display: block !important;
            width: 100% !important;
        }

        [data-testid="stSidebar"][aria-expanded="true"] > div:first-child {
            width: 320px;
            min-width: 320px;
        }
        [data-testid="stSidebar"][aria-expanded="false"] > div:first-child {
            width: 320px;
            min-width: 320px;
        }


        [data-testid="stSidebar"] .css-1wvake5,
        [data-testid="stSidebar"] .css-1v0mbdj,
        [data-testid="stSidebar"] label {
            white-space: normal !important;
            word-break: break-word !important;
            font-size: 1.1rem !important;
            font-weight: 500 !important;
            padding: 8px 14px !important;
            margin-bottom: 10px !important;
            border-radius: 8px;
            color: #2c3e50 !important;
            background: none !important;
            transition: background 0.2s;
            display: block;
        }


        [data-testid="stSidebar"] .css-1wvake5[aria-checked="true"],
        [data-testid="stSidebar"] .css-1v0mbdj[aria-checked="true"],
        [data-testid="stSidebar"] label[data-selected="true"] {
            background: linear-gradient(90deg, #eaf6fb 60%, #e0f7fa 100%) !important;
            color: #0077b6 !important;
        }... [data-testid="stSidebar"] svg {
            margin-right: 10px;
            vertical-align: middle;
        }
        </style>
        """
        st.markdown(custom_theme, unsafe_allow_html=True)

        with open(css_path, 'w') as f:
            f.write(custom_theme)

    st.markdown(custom_theme, unsafe_allow_html=True)

set_custom_theme()

def load_visualization_libraries():
    global plt, px, go, sns

    if 'plt' not in globals():
        import matplotlib.pyplot as plt
    if 'px' not in globals():
        import plotly.express as px
    if 'go' not in globals():
        import plotly.graph_objects as go
    if 'sns' not in globals():
        import seaborn as sns

def load_ml_libraries():
    global LGBMClassifier, RandomForestClassifier, LogisticRegression, XGBClassifier
    global StandardScaler, OneHotEncoder, ColumnTransformer, Pipeline, utils
    global chi2_contingency, mannwhitneyu, prince

    if 'RandomForestClassifier' not in globals():
        from sklearn.ensemble import RandomForestClassifier
    if 'LogisticRegression' not in globals():
        from sklearn.linear_model import LogisticRegression
    if 'StandardScaler' not in globals():
        from sklearn.preprocessing import StandardScaler
    if 'OneHotEncoder' not in globals():
        from sklearn.preprocessing import OneHotEncoder
    if 'ColumnTransformer' not in globals():
        from sklearn.compose import ColumnTransformer
    if 'Pipeline' not in globals():
        from sklearn.pipeline import Pipeline
    if 'XGBClassifier' not in globals():
        from xgboost import XGBClassifier
    if 'LGBMClassifier' not in globals():
        from lightgbm import LGBMClassifier
    if 'utils' not in globals():
        from sklearn import utils
    if 'chi2_contingency' not in globals():
        from scipy.stats import chi2_contingency
    if 'mannwhitneyu' not in globals():
        from scipy.stats import mannwhitneyu
    if 'prince' not in globals():
        import prince

@st.cache_resource
def train_advanced_model(df):
    """
    Entra√Æne un mod√®le Random Forest pour la pr√©diction du TSA et retourne
    le mod√®le, le pr√©processeur et les noms des features.

    Args:
        df (pd.DataFrame): DataFrame contenant les donn√©es d'entra√Ænement

    Returns:
        tuple: (mod√®le entra√Æn√©, pr√©processeur, noms des features)
    """
    load_ml_libraries()
    load_metrics_libraries()

    try:

        if 'TSA' not in df.columns:
            st.error("La colonne 'TSA' n'existe pas dans le dataframe")
            return None, None, None

        X = df.drop(columns=['TSA'])
        y = df['TSA'].map({'Yes': 1, 'No': 0})

        numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()
        categorical_cols = X.select_dtypes(include=['object', 'category']).columns.tolist()

        preprocessor = ColumnTransformer(
            transformers=[
                ('num', StandardScaler(), numerical_cols),
                ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
            ],
            remainder='passthrough',
            verbose_feature_names_out=False
        )

        rf_classifier = RandomForestClassifier(
            n_estimators=100,
            max_depth=8,
            min_samples_split=10,
            min_samples_leaf=2,
            max_features='sqrt',
            bootstrap=True,
            random_state=42,
            n_jobs=-1
        )

        pipeline = Pipeline([
            ('preprocessor', preprocessor),
            ('classifier', rf_classifier)
        ])

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        pipeline.fit(X_train, y_train)

        try:
            feature_names = preprocessor.get_feature_names_out()
        except:

            feature_names = [f"feature_{i}" for i in range(pipeline.transform(X.iloc[[0]]).shape[1])]

        return pipeline, preprocessor, feature_names

    except Exception as e:
        st.error(f"Erreur lors de l'entra√Ænement du mod√®le: {str(e)}")
        return None, None, None

def get_question_text(question_number):
    """Fonction utilitaire pour obtenir le texte des questions AQ-10"""
    questions = {
        1: "Je remarque souvent de petits bruits que les autres ne remarquent pas.",
        2: "Je me concentre g√©n√©ralement davantage sur l'ensemble que sur les petits d√©tails.",
        3: "Je trouve facile de faire plusieurs choses en m√™me temps.",
        4: "S'il y a une interruption, je peux rapidement reprendre ce que je faisais.",
        5: "Je trouve facile de ¬´ lire entre les lignes ¬ª quand quelqu'un me parle.",
        6: "Je sais comment savoir si la personne qui m'√©coute commence √† s'ennuyer.",
        7: "Quand je lis une histoire, j'ai du mal √† comprendre les intentions des personnages.",
        8: "J'aime collecter des informations sur des cat√©gories de choses (par exemple : types de voitures, d'oiseaux, de trains, de plantes, etc.).",
        9: "Je trouve facile de comprendre ce que quelqu'un pense ou ressent rien qu'en regardant son visage.",
        10: "J'ai du mal √† comprendre les intentions des gens."
    }
    return questions.get(question_number, f"Question {question_number} non d√©finie")


def load_metrics_libraries():
    global accuracy_score, precision_score, recall_score, f1_score
    global roc_auc_score, confusion_matrix, classification_report
    global cross_val_score, train_test_split

    if 'accuracy_score' not in globals():
        from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
        from sklearn.metrics import roc_auc_score, confusion_matrix, classification_report
    if 'cross_val_score' not in globals():
        from sklearn.model_selection import cross_val_score
    if 'train_test_split' not in globals():
        from sklearn.model_selection import train_test_split


@st.cache_data(ttl=86400)
def get_img_with_href(img_url, target_url, as_banner=False):
    """
    Cr√©e une image cliquable avec un lien (ou non cliquable si target_url est None, vide ou '#')
    """
    if "drive.google.com" in img_url and "/d/" in img_url:
        file_id = img_url.split("/d/")[1].split("/")[0]
        img_url = f"https://drive.google.com/uc?export=view&id={file_id}"

    cache_filename = hashlib.md5(img_url.encode()).hexdigest() + ".webp"
    cache_dir = "image_cache"
    cache_path = os.path.join(cache_dir, cache_filename)
    os.makedirs(cache_dir, exist_ok=True)

    try:
        if os.path.exists(cache_path):
            with open(cache_path, "rb") as f:
                img_data = f.read()
            img = Image.open(BytesIO(img_data))
        else:
            response = requests.get(img_url, timeout=15)
            response.raise_for_status()

            if len(response.content) == 0:
                raise Exception("Contenu vide t√©l√©charg√©")

            img = Image.open(BytesIO(response.content))

            max_width = 1200 if as_banner else 800
            if img.width > max_width:
                ratio = max_width / img.width
                new_height = int(img.height * ratio)
                img = img.resize((max_width, new_height), Image.LANCZOS)

            buffer = BytesIO()
            img.save(buffer, format="WEBP", quality=85, optimize=True)

            with open(cache_path, "wb") as f:
                f.write(buffer.getvalue())

            buffer.seek(0)
            img_data = buffer.getvalue()

        img_str = base64.b64encode(img_data).decode()

        if as_banner:
            style = 'style="width:100%;height:550px;display:block;object-fit:cover;border-radius:10px;" loading="lazy"'
        else:
            style = 'style="width:100%;height:auto;display:block;object-fit:contain;margin:0 auto;padding:0;" loading="lazy"'

        container_style = 'style="width:100%; padding:10px; background-color:white; border-radius:10px; overflow:hidden; margin-bottom:20px;"'
        
        # Ne pas ajouter de lien si target_url est None, vide ou '#'
        if target_url and target_url != "#":
            html_code = f'<div {container_style}><a href="{target_url}" target="_blank" style="display:block; margin:0; padding:0; line-height:0;"><img src="data:image/webp;base64,{img_str}" {style}></a></div>'
        else:
            html_code = f'<div {container_style}><img src="data:image/webp;base64,{img_str}" {style}></div>'

        return html_code
    except Exception as e:
        return f'<div style="text-align:center;padding:20px;background:#f0f2f6;border-radius:10px;"><p>Image non disponible ({str(e)})</p></div>'

@st.cache_data(ttl=86400)
def load_dataset():
    try:
        ds1_id = '1ai1QlLzn0uo-enw4IzC53jJ8qoPc845G'
        ds2_id = '1MOEhPxMNZH8LvXahvYAKiVFb9t8vAxaE'
        ds3_id = '12B-scaR0TF7TuJzelIqmlxXDjnew67-K'
        ds4_id = '1U9buLTKR_XuLWu9l3SOgvF6d9cS_YTFO'
        ds5_id = '1NdXYppnmiheLFtvrdRHDk-W-zHKO0wYp'
        final_id = '1mm6sRacDmoL941POmydQgzdVAi9lFPit'

        cache_dir = "data_cache"
        os.makedirs(cache_dir, exist_ok=True)
        final_path = os.path.join(cache_dir, "final_dataset.csv")

        if os.path.exists(final_path):
            df = pd.read_csv(final_path)
            df_ds1 = pd.read_csv(os.path.join(cache_dir, "ds1.csv"))
            df_ds2 = pd.read_csv(os.path.join(cache_dir, "ds2.csv"))
            df_ds3 = pd.read_csv(os.path.join(cache_dir, "ds3.csv"))
            df_ds4 = pd.read_csv(os.path.join(cache_dir, "ds4.csv"))
            df_ds5 = pd.read_csv(os.path.join(cache_dir, "ds5.csv"))
        else:
            url_final = f'https://drive.google.com/uc?export=download&id={final_id}'
            df = pd.read_csv(url_final)
            df.to_csv(final_path, index=False)

            with ThreadPoolExecutor(max_workers=5) as executor:
                futures = []
                urls = [
                    (f'https://drive.google.com/uc?export=download&id={ds1_id}', "ds1.csv"),
                    (f'https://drive.google.com/uc?export=download&id={ds2_id}', "ds2.csv"),
                    (f'https://drive.google.com/uc?export=download&id={ds3_id}', "ds3.csv"),
                    (f'https://drive.google.com/uc?export=download&id={ds4_id}', "ds4.csv"),
                    (f'https://drive.google.com/uc?export=download&id={ds5_id}', "ds5.csv")
                ]

                for url, filename in urls:
                    futures.append(executor.submit(download_and_save_dataset, url, os.path.join(cache_dir, filename)))

                df_ds1, df_ds2, df_ds3, df_ds4, df_ds5 = [future.result() for future in futures]

        rename_dict = {'tsa': 'TSA', 'gender': 'Genre'}
        df = df.rename(columns={k: v for k, v in rename_dict.items() if k in df.columns})

        if 'Unnamed: 0' in df.columns:
            df = df.drop(columns=['Unnamed: 0'])

        if 'TSA' in df.columns: df['TSA'] = df['TSA'].str.title()
        if 'Genre' in df.columns: df['Genre'] = df['Genre'].str.capitalize()

        aq_columns = [col for col in df.columns if col.startswith('A') and col[1:].isdigit()]
        if aq_columns:
            df['Score_A10'] = df[aq_columns].sum(axis=1)

        if 'Statut_testeur' not in df.columns:
            df['Statut_testeur'] = 'Famille'
        else:
            df['Statut_testeur'].fillna('Famille', inplace=True)

        df_stats = {
            'mean_by_tsa': df.groupby('TSA').mean(numeric_only=True) if 'TSA' in df.columns else pd.DataFrame(),
            'count_by_tsa': df.groupby('TSA').count() if 'TSA' in df.columns else pd.DataFrame(),
            'categorical_cols': df.select_dtypes(include=['object']).columns.tolist(),
            'numeric_cols': df.select_dtypes(exclude=['object']).columns.tolist()
        }

        return df, df_ds1, df_ds2, df_ds3, df_ds4, df_ds5, df_stats
    except Exception as e:
        st.error(f"Erreur lors du chargement: {str(e)}")
        return pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), {}
        pass

def download_and_save_dataset(url, filepath):
    """Fonction auxiliaire pour t√©l√©charger et sauvegarder un dataset"""
    try:
        df = pd.read_csv(url)
        df.to_csv(filepath, index=False)
        return df
    except Exception as e:
        st.error(f"Erreur lors du t√©l√©chargement de {url}: {str(e)}")
        return pd.DataFrame()

palette = {"No": "#1f77b4", "Yes": "#ff7f0e"}

def create_mann_whitney_visualization(data, variable):
    group1 = data[data["TSA"] == "Yes"][variable].dropna()
    group2 = data[data["TSA"] == "No"][variable].dropna()

    fig = go.Figure()

    fig.add_trace(go.Box(
        y=group1,
        name="TSA",
        marker_color=palette["Yes"]
    ))

    fig.add_trace(go.Box(
        y=group2,
        name="Non-TSA",
        marker_color=palette["No"]
    ))

    fig.update_layout(
        title=f"Comparaison de {variable} entre groupes TSA et non-TSA",
        yaxis_title=variable,
        boxmode="group"
    )

    return fig

def create_distribution_chart(data, variable):
    fig = px.histogram(data, x=variable, color="TSA")
    return fig

def create_distribution_chart(data, variable):
    fig = px.histogram(data, x=variable, color="TSA",
                      barmode="group",
                      labels={"count": "Fr√©quence", "TSA": "Diagnostic TSA"},
                      color_discrete_map={"No": "#1f77b4", "Yes": "#ff7f0e"})

    fig.update_layout(
        title=f"Distribution de {variable} par diagnostic",
        xaxis_title=variable,
        yaxis_title="Fr√©quence",
        legend_title="Diagnostic TSA"
    )
    return fig

palette = {"No": "#1f77b4", "Yes": "#ff7f0e"}

def create_chi_squared_visualization(data, variable):
    cross_tab = pd.crosstab(data[variable], data["TSA"])
    data_grouped = pd.DataFrame({
        variable: [],
        "TSA": [],
        "count": [],
        "percentage": []
    })

    for cat in cross_tab.index:
        for tsa in ["No", "Yes"]:
            count = cross_tab.loc[cat, tsa]
            total = cross_tab.loc[cat].sum()
            percentage = (count / total) * 100

            data_grouped = data_grouped._append({
                variable: cat,
                "TSA": tsa,
                "count": count,
                "percentage": percentage
            }, ignore_index=True)

    fig = px.bar(data_grouped, x=variable, y="percentage", color="TSA",
                barmode="group",
                labels={"percentage": "Pourcentage (%)", "TSA": "Diagnostic TSA"},
                color_discrete_map=palette)

    fig.update_layout(
        title=f"R√©partition de {variable} par diagnostic (%)",
        xaxis_title=variable,
        yaxis_title="Pourcentage (%)",
        legend_title="Diagnostic TSA"
    )
    return fig

@st.cache_data(ttl=3600, max_entries=100)
def create_plotly_figure(df, x=None, y=None, color=None, names=None, kind='histogram', title=None):
    """Cr√©e une visualisation Plotly avec mise en cache et optimisations de performance"""

    sample_threshold = 10000
    if len(df) > sample_threshold:
        df = df.sample(sample_threshold, random_state=42)

    if color and color not in df.columns:
        color = None

    categorical_palette = {0: "#3498db", 1: "#2ecc71"}
    palette = {"Yes": "#3498db", "No": "#2ecc71", "Unknown": "#95a5a6"}
    base_layout = dict(
        height=500,
        margin=dict(l=20, r=20, t=40, b=20),
        template="simple_white",
        modebar_remove=['sendDataToCloud', 'select2d', 'lasso2d', 'autoScale2d'],
        hovermode='closest'
    )

    try:
        is_categorical_aq = x and isinstance(x, str) and x.startswith('A') and x[1:].isdigit() and len(x) <= 3

        if is_categorical_aq and kind in ['histogram', 'bar']:
            counts = df[x].value_counts().reset_index()
            counts.columns = [x, 'count']
            fig = px.bar(counts, x=x, y='count',
                        color=x,
                        color_discrete_map=categorical_palette,
                        title=f"Distribution de {x} (cat√©gorielle)")
            fig.update_layout(xaxis_title=f"Valeur de {x}", yaxis_title="Nombre d'occurrences", **base_layout)

        elif kind == 'histogram':
            nbins = 20 if len(df) < 5000 else 10
            marginal = "box" if len(df) < 3000 else None
            fig = px.histogram(df, x=x, color=color, color_discrete_map=palette,
                              marginal=marginal, nbins=nbins)
            fig.update_layout(**base_layout)

        elif kind == 'box':
            points = "all" if len(df) < 1000 else False
            fig = px.box(df, x=x, y=y, color=color, color_discrete_map=palette,
                        points=points, notched=len(df) > 200)
            fig.update_layout(**base_layout)

        elif kind == 'bar':
            fig = px.bar(df, x=x, y=y, color=color, color_discrete_map=palette)
            fig.update_layout(**base_layout)

        elif kind == 'scatter':
            opacity = 1.0 if len(df) < 500 else 0.7 if len(df) < 2000 else 0.5
            fig = px.scatter(df, x=x, y=y, color=color, color_discrete_map=palette, opacity=opacity)
            fig.update_layout(**base_layout)

        elif kind == 'pie':
            if names and isinstance(names, str) and names.startswith('A') and names[1:].isdigit() and len(names) <= 3:
                values_counts = df[names].value_counts().reset_index()
                values_counts.columns = [names, 'count']
                fig = px.pie(values_counts, values='count', names=names,
                          color=names,
                          color_discrete_map=categorical_palette,
                          title=f"R√©partition {names}")
            else:
                fig = px.pie(df, names=names, color=color, color_discrete_map=palette)
            fig.update_layout(**base_layout)

        elif kind == 'violin':
            box = len(df) < 2000
            fig = px.violin(df, x=x, y=y, color=color, color_discrete_map=palette, box=box)
            fig.update_layout(**base_layout)

        elif kind == 'count':
            fig = px.histogram(df, x=x, color=color, color_discrete_map=palette,
                            title=f"Comptage de {x}")
            fig.update_layout(yaxis_title="Nombre d'occurrences", **base_layout)

        if title:
            fig.update_layout(title=title)

        return fig
    except Exception as e:
        st.error(f"Erreur lors de la cr√©ation du graphique: {str(e)}")
        return None

def show_home_page():
    st.markdown("""
    <div style="background: linear-gradient(90deg, #3498db, #2ecc71); padding: 25px; border-radius: 15px; margin-bottom: 30px;">
        <h1 style="color: white; text-align: center; font-size: 2.5rem;">Comprendre les Troubles du Spectre Autistique</h1>
        <p style="color: white; text-align: center; font-size: 1.2rem;">Une approche moderne et scientifique</p>
    </div>
    """, unsafe_allow_html=True)

    # Conservation de l'image Ghibli sans lien cliquable
    image_url = "https://drive.google.com/file/d/1fY4J-WgufGTF6AgorFOspVKkHiRKEaiW/view?usp=drive_link"
    st.markdown(get_img_with_href(image_url, None, as_banner=True), unsafe_allow_html=True)
    
    st.markdown("""
    <div style="padding: 20px; border-radius: 10px; margin: 30px 0; text-align: center;">
        <h2 style="color: #3498db; margin-bottom: 20px; font-size: 2rem;">Qu'est-ce que l'autisme?</h2>
        <p style="font-size: 1.2rem; line-height: 1.6; text-align: justify; max-width: 800px; margin: 0 auto;">
        Les Troubles du Spectre Autistique (TSA) sont des conditions neurod√©veloppementales qui affectent la fa√ßon dont une personne per√ßoit et interagit avec le monde. Caract√©ris√©s par des diff√©rences dans la communication sociale, les interactions sociales et par des comportements ou int√©r√™ts restreints et r√©p√©titifs, les TSA se manifestent sur un large spectre de sympt√¥mes et de niveaux de fonctionnement.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <h2 style="color: #3498db; margin: 40px 0 20px 0; text-align: center;">√âvolution de la compr√©hension de l'autisme</h2>

    <div style="background-color: #f8f9fa; padding: 20px; border-radius: 10px; margin: 20px 0; overflow-x: auto;">
        <div style="display: flex; justify-content: space-between; min-width: 650px;">
            <div style="min-width: 150px; text-align: center; margin: 0 10px;">
                <div style="background: linear-gradient(135deg, #3498db, #2ecc71); color: white; padding: 10px; border-radius: 5px; font-weight: bold;">1943</div>
                <div style="margin-top: 10px; font-size: 0.9rem;">Leo Kanner d√©crit l'autisme infantile</div>
            </div>
            <div style="min-width: 150px; text-align: center; margin: 0 10px;">
                <div style="background: linear-gradient(135deg, #3498db, #2ecc71); color: white; padding: 10px; border-radius: 5px; font-weight: bold;">1980</div>
                <div style="margin-top: 10px; font-size: 0.9rem;">L'autisme dans le DSM-III</div>
            </div>
            <div style="min-width: 150px; text-align: center; margin: 0 10px;">
                <div style="background: linear-gradient(135deg, #3498db, #2ecc71); color: white; padding: 10px; border-radius: 5px; font-weight: bold;">2013</div>
                <div style="margin-top: 10px; font-size: 0.9rem;">Le DSM-5 introduit les TSA</div>
            </div>
            <div style="min-width: 150px; text-align: center; margin: 0 10px;">
                <div style="background: linear-gradient(135deg, #3498db, #2ecc71); color: white; padding: 10px; border-radius: 5px; font-weight: bold;">Aujourd'hui</div>
                <div style="margin-top: 10px; font-size: 0.9rem;">Approche neurodiversit√©</div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Rectangle du spectre autistique recentr√© (image 265)
    st.markdown("## Le spectre autistique", unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 8, 1])  # Utilisation des colonnes pour centrer le contenu

    with col2:  # Utilisation de la colonne centrale pour centrer le contenu
        st.write("""
        L'autisme est aujourd'hui compris comme un **spectre** de conditions, refl√©tant la 
        grande variabilit√© des manifestations. Cette conception reconna√Æt que:
        
        * Chaque personne autiste pr√©sente un profil unique de forces et de d√©fis
        * Les manifestations varient en intensit√© et en expression
        * Les niveaux de soutien n√©cessaires peuvent diff√©rer consid√©rablement
        """)
        
        st.write("Le DSM-5 d√©finit trois niveaux de soutien n√©cessaire:")
        
        niveau_col1, niveau_col2, niveau_col3 = st.columns(3)
        
        with niveau_col1:
            st.info("**Niveau 1**\n\nN√©cessite un soutien")
        
        with niveau_col2:
            st.info("**Niveau 2**\n\nN√©cessite un soutien important")
        
        with niveau_col3:
            st.info("**Niveau 3**\n\nN√©cessite un soutien tr√®s important")
    
    # Section "Contexte du projet" (ajout√©e depuis le rapport)
    st.markdown("## Contexte du projet", unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 8, 1])  # Utilisation des colonnes pour centrer le contenu

    with col2:
        st.write("""
        Ce projet s'inscrit dans le cadre de l'analyse des donn√©es li√©es au diagnostic des **Troubles du Spectre de l'Autisme (TSA)**. 
        L'autisme n'est pas une maladie mais une **diff√©rence neurologique** affectant le fonctionnement du cerveau.
        
        Notre √©quipe a travaill√© sur **5 jeux de donn√©es publics** repr√©sentant plus de 5000 personnes de diff√©rentes origines 
        (√âtats-Unis, Nouvelle-Z√©lande, Arabie Saoudite...) pour identifier les facteurs associ√©s √† la pr√©sence d'un TSA.
        
        L'objectif est de construire des mod√®les pr√©dictifs capables d'assister dans l'√©valuation de la pr√©sence d'un TSA 
        en fonction des caract√©ristiques individuelles, tout en offrant une compr√©hension claire et accessible de ce qu'est 
        l'autisme pour tous les publics.
        """)
        
        st.write("""
        üìä **Pr√©valence de l'autisme:**
        * 1 √† 2% de la population mondiale est concern√©e
        * En France, environ 700 000 personnes sont concern√©es
        * Ratio historique gar√ßons/filles d'environ 4:1 (aujourd'hui remis en question)
        """)
    
    # Section "√Ä qui s'adresse ce projet" (ajout√©e depuis le rapport)
    st.markdown("## √Ä qui s'adresse ce projet", unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 8, 1])  # Utilisation des colonnes pour centrer le contenu

    with col2:
        col_a, col_b = st.columns(2)
        
        with col_a:
            st.info("### Chercheurs en sant√© et psychologie\nUne analyse d√©taill√©e permettant d'√©tayer des hypoth√®ses scientifiques et confirmer des tendances cliniques dans le domaine des TSA.")
            st.warning("### Familles et particuliers\nOutils d'auto-√©valuation et d'information pour r√©pondre aux questions ou suspicions de TSA et faciliter l'orientation.")
            
        with col_b:
            st.success("### Professionnels de sant√©\nDes r√©sultats exploitables permettant d'am√©liorer le d√©pistage et la prise en charge des personnes avec TSA.")
            st.error("### D√©cideurs publics\nDonn√©es et analyses pouvant informer les politiques publiques et orienter les d√©cisions de financement pour les services aux personnes avec TSA.")

        st.write("""
        Notre plateforme facilite la compr√©hension des TSA pour tous ces publics gr√¢ce √† des visualisations claires
        et des explications vulgaris√©es. Les outils de pr√©diction peuvent aider √† une d√©tection pr√©coce, facilitant
        ainsi une prise en charge adapt√©e et personnalis√©e.
        """)
        
    st.markdown("""
    <h2 style="color: #3498db; margin: 40px 0 20px 0; text-align: center;">Accompagnement et soutien</h2>
    """, unsafe_allow_html=True)

    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #3498db, #2980b9); color: white; padding: 20px; border-radius: 10px; height: 300px;">
            <h3 style="border-bottom: 2px solid white; padding-bottom: 10px;">Intervention pr√©coce</h3>
            <ul style="padding-left: 20px; margin-top: 15px;">
                <li>Programmes de stimulation</li>
                <li>Accompagnement parental</li>
                <li>Th√©rapies comportementales</li>
                <li>Approches sensorimotrices</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #2ecc71, #27ae60); color: white; padding: 20px; border-radius: 10px; height: 300px;">
            <h3 style="border-bottom: 2px solid white; padding-bottom: 10px;">Approches √©ducatives</h3>
            <ul style="padding-left: 20px; margin-top: 15px;">
                <li>M√©thodes structur√©es</li>
                <li>Soutien √† l'inclusion</li>
                <li>Am√©nagements adapt√©s</li>
                <li>Programmes individualis√©s</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #9b59b6, #8e44ad); color: white; padding: 20px; border-radius: 10px; height: 300px;">
            <h3 style="border-bottom: 2px solid white; padding-bottom: 10px;">Suivi multidisciplinaire</h3>
            <ul style="padding-left: 20px; margin-top: 15px;">
                <li>Orthophonie</li>
                <li>Ergoth√©rapie</li>
                <li>Psychomotricit√©</li>
                <li>Soutien psychologique</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
    st.markdown("""
    <h2 style="color: #3498db; margin: 40px 0 20px 0; text-align: center;">Caract√©ristiques principales</h2>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div style="background-color: #f2f6f9; padding: 20px; border-radius: 10px; border-left: 4px solid #3498db;">
            <h3 style="color: #3498db;">Communication sociale</h3>
            <ul style="line-height: 1.6;">
                <li>Diff√©rences dans la communication non verbale</li>
                <li>D√©fis dans les interactions sociales</li>
                <li>Interpr√©tation litt√©rale du langage</li>
                <li>Difficult√©s avec les r√®gles sociales implicites</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style="background-color: #f2f9f5; padding: 20px; border-radius: 10px; border-left: 4px solid #2ecc71;">
            <h3 style="color: #2ecc71;">Comportements et int√©r√™ts</h3>
            <ul style="line-height: 1.6;">
                <li>Int√©r√™ts sp√©cifiques et intenses</li>
                <li>Attachement aux routines</li>
                <li>Mouvements r√©p√©titifs</li>
                <li>Sensibilit√©s sensorielles particuli√®res</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # Rectangle "Notre approche" recentr√© sans liens cliquables (image 291)
    st.markdown("## Notre approche", unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 8, 1])  # Utilisation des colonnes pour centrer le contenu

    with col2:
        # Cr√©ation d'un conteneur avec d√©grad√© de couleur pour la section "Notre approche"
        st.markdown("""
        <div style="background: linear-gradient(90deg, #3498db, #2ecc71); padding: 30px; border-radius: 15px; margin-top: 0px; text-align: center; color: white;">
            <p style="font-size: 1.2rem; max-width: 700px; margin: 0 auto;">
            Notre plateforme combine les connaissances scientifiques actuelles et l'intelligence artificielle pour am√©liorer la d√©tection pr√©coce et l'accompagnement des personnes autistes, dans une vision respectueuse de la neurodiversit√©.
            </p>
            <div style="margin-top: 25px; display: flex; justify-content: center; gap: 20px;">
            
        </div>
        """, unsafe_allow_html=True)
            
    # Avertissement professionnel
    st.markdown("""
    <div style="margin-top: 30px; padding: 15px; border-radius: 5px; border-left: 4px solid #e74c3c; background-color: rgba(231, 76, 60, 0.1);">
        <p style="font-size: 0.9rem;">
        <strong style="color: #e74c3c;">Avertissement :</strong> Les informations pr√©sent√©es sur cette plateforme sont √† titre informatif uniquement. Elles ne remplacent pas l'avis m√©dical professionnel.
        </p>
    </div>
    """, unsafe_allow_html=True)


def show_data_exploration():
    import plotly.express as px
    import plotly.graph_objects as go
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    from scipy.stats import chi2_contingency, mannwhitneyu

    df, df_ds1, df_ds2, df_ds3, df_ds4, df_ds5, df_stats = load_dataset()

    st.markdown("""
    <div class="header-container">
        <span style="font-size:2.5rem">'''üîç'''</span>
        <h1 class="app-title">Exploration des Donn√©es TSA</h1>
    </div>
    """, unsafe_allow_html=True)

    if 'expanders_initialized' not in st.session_state:
        st.session_state.expanders_initialized = {
            'structure': True,
            'valeurs_manquantes': True,
            'pipeline': True,
            'variables_cles': True,
            'questionnaire': True,
            'composite': True,
            'statistiques': True,
            'correlation': True,
            'famd': True
        }

    with st.expander("üìÇ Structure des Donn√©es", expanded=True):
        st.markdown("""
            <div style="background:#fff3e0; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.05)">
                <h4 style="color:#e65100; border-bottom:1px solid #ffe0b2; padding-bottom:8px">Jeux de Donn√©es</h4>
                <ul style="padding-left:20px">
                    <li>'üìÅ' <strong>Dataset 1:</strong> <a href="https://www.kaggle.com/datasets/faizunnabi/autism-screening" target="_blank">Autism Screening Dataset</a> (n=1985)</li>
                    <li>'üìÅ' <strong>Dataset 2:</strong> <a href="https://archive.ics.uci.edu/ml/datasets/Autism+Screening+Adult" target="_blank">UCI Machine Learning Repository</a> (n=704)</li>
                    <li>'üìÅ' <strong>Dataset 3:</strong> <a href="https://data.gov.sa/" target="_blank">Open Data Saudi Arabia</a> (n=506)</li>
                    <li>'üìÅ' <strong>Dataset 4:</strong> <a href="https://www.kaggle.com/datasets/fabdelja/autism-screening-for-toddlers" target="_blank">Autism Screening for Toddlers</a> (n=1054)</li>
                    <li>'üìÅ' <strong>Dataset 5:</strong> <a href="https://www.kaggle.com/datasets/reevesii/global-autism-data" target="_blank">Global Autism Data</a> (n=800)</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
        tab_main, tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "Dataset Final", "Dataset 1", "Dataset 2", "Dataset 3", "Dataset 4", "Dataset 5"
        ])

        with tab_main:
            st.caption("Dataset Final")
            st.dataframe(df.head(5), use_container_width=True)
        with tab1:
            st.caption("Dataset 1")
            st.dataframe(df_ds1.head(5), use_container_width=True)
        with tab2:
            st.caption("Dataset 2")
            st.dataframe(df_ds2.head(5), use_container_width=True)
        with tab3:
            st.caption("Dataset 3")
            st.dataframe(df_ds3.head(5), use_container_width=True)
        with tab4:
            st.caption("Dataset 4")
            st.dataframe(df_ds4.head(5), use_container_width=True)
        with tab5:
            st.caption("Dataset 5")
            st.dataframe(df_ds5.head(5), use_container_width=True)

    with st.expander("üßº Pipeline de Nettoyage", expanded=True):
        st.markdown("""
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">√âtapes de Transformation des Donn√©es</h3>
            <p style="color: #7f8c8d;">Processus automatis√© pour pr√©parer les donn√©es √† l'analyse.</p>
        </div>
        """, unsafe_allow_html=True)
        col1, col2 = st.columns([1, 3])
        with col1:
            st.markdown("""
            <div style="background-color: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.05);">
                <h4 style="color: #3498db; margin-top: 0;">√âtapes de Transformation</h4>
                <ol style="padding-left: 20px; color: #2c3e50;">
                    <li><b>Uniformisation</b> des colonnes</li>
                    <li><b>Typage</b> des variables</li>
                    <li><b>Gestion</b> des valeurs manquantes</li>
                    <li><b>Encodage</b> cat√©goriel</li>
                    <li><b>Normalisation</b> des √©chelles</li>
                </ol>
            </div>
            """, unsafe_allow_html=True)
        with col2:
            avant_tab, apres_tab = st.tabs(["Avant Nettoyage", "Apr√®s Nettoyage"])
            with avant_tab:
                raw_data_sample = pd.DataFrame({
                    'A10_Score': [7, 5, None, 3],
                    'Age_Years': [29, None, 'unknown', 383],
                    'asd_traits': ['yes', 'no', 'no', 'yes']
                })
                st.dataframe(raw_data_sample.style.highlight_null(color='#ffcdd2'), use_container_width=True)
            with apres_tab:
                clean_data_sample = pd.DataFrame({
                    'A10': [7, 5, 4, 3],
                    'Age': [29, 35, 42, 38],
                    'TSA': ['Yes', 'No', 'No', 'Yes'],
                    'Statut_testeur': ['Famille', 'Famille', 'Famille', 'Famille']
                })
                st.dataframe(clean_data_sample, use_container_width=True)
                metrics_col1, metrics_col2 = st.columns(2)
                with metrics_col1:
                    st.metric("R√©duction des valeurs manquantes", "92%", "10% ‚Üí 0.8%")
                with metrics_col2:
                    st.metric("Anomalies corrig√©es", "100%", "14 anomalies d√©tect√©es")
                pass

    with st.expander("üìâ Analyse des Valeurs Manquantes", expanded=True):
        st.markdown("""
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">Analyse des Valeurs Manquantes</h3>
            <p style="color: #7f8c8d;">Visualisation et quantification des donn√©es manquantes dans le jeu de donn√©es.</p>
        </div>
        """, unsafe_allow_html=True)
        missing_percent = (df.isnull().sum() / len(df)) * 100
        missing_info = pd.DataFrame({
            'Colonne': missing_percent.index,
            'Pourcentage': missing_percent.values
        })
        missing_info = missing_info[missing_info['Pourcentage'] > 0].sort_values('Pourcentage', ascending=False)
        if not missing_info.empty:
            col1, col2 = st.columns([3, 2])
            with col1:
                fig = px.bar(
                    missing_info,
                    x='Pourcentage',
                    y='Colonne',
                    orientation='h',
                    title="Pourcentage de valeurs manquantes par colonne",
                    color='Pourcentage',
                    color_continuous_scale=px.colors.sequential.Blues,
                    text='Pourcentage'
                )
                fig.update_traces(texttemplate='%{text:.2f}%', textposition='outside')
                fig.update_layout(
                    height=400,
                    xaxis_title="Pourcentage (%)",
                    yaxis_title="",
                    coloraxis_showscale=False,
                    margin=dict(l=20, r=20, t=40, b=20),
                )
                st.plotly_chart(fig, use_container_width=True)
            with col2:
                st.metric(
                    "Nombre de colonnes avec valeurs manquantes",
                    missing_info.shape[0],
                    delta=f"{missing_info.shape[0]/df.shape[1]:.1%} des colonnes"
                )
                st.markdown("### D√©tail des valeurs manquantes")
                st.dataframe(missing_info, use_container_width=True)
                total_missing = (df.isnull().sum().sum() / (df.shape[0] * df.shape[1])) * 100
                st.info(f"Taux global de donn√©es manquantes : {total_missing:.2f}%")
        else:
            st.success("‚úÖ Aucune valeur manquante d√©tect√©e dans le jeu de donn√©es.")

    
    with st.expander("üìà Statistiques du Dataset Final", expanded=True):
        st.subheader("Statistiques Descriptives")
        tab1, tab2 = st.tabs(["Num√©riques", "Cat√©gorielles"])
        with tab1:
            st.write(df.describe())
        with tab2:
            categorical_stats = df.select_dtypes(include=['object']).describe().T
            st.dataframe(categorical_stats)           

    with st.expander("üìä Distribution des Variables Cl√©s", expanded=True):
        st.markdown("""
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">Distribution des Variables Cl√©s</h3>
            <p style="color: #7f8c8d;">Analyse interactive des distributions par variable.</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Dictionnaire de commentaires pour les variables
        variable_comments = {
            'A1': "Variable li√©e au questionnaire AQ-10 : √©value la capacit√© √† remarquer des d√©tails que d'autres pourraient manquer.",
            'A2': "Variable li√©e au questionnaire AQ-10 : √©value la capacit√© √† imaginer des histoires.",
            'A3': "Variable li√©e au questionnaire AQ-10 : √©value la pr√©f√©rence pour la socialisation vs activit√©s solitaires.",
            'A4': "Variable li√©e au questionnaire AQ-10 : √©value la tendance √† se concentrer sur un sujet sp√©cifique.",
            'A5': "Variable li√©e au questionnaire AQ-10 : √©value l'attention aux d√©tails num√©riques et dates.",
            'A6': "Variable li√©e au questionnaire AQ-10 : √©value la capacit√© √† comprendre les intentions des autres.",
            'A7': "Variable li√©e au questionnaire AQ-10 : √©value la capacit√© √† r√©agir de mani√®re appropri√©e socialement.",
            'A8': "Variable li√©e au questionnaire AQ-10 : √©value les interactions sociales en groupe.",
            'A9': "Variable li√©e au questionnaire AQ-10 : √©value la reconnaissance des √©motions chez autrui.",
            'A10': "Variable li√©e au questionnaire AQ-10 : √©value la capacit√© √† g√©rer plusieurs t√¢ches simultan√©ment.",
            'Jaunisse': "Indique si l'individu a eu une jaunisse √† la naissance, facteur potentiellement associ√© au risque d'autisme.",
            'Statut_testeur': "Indique la relation entre le testeur et la personne √©valu√©e (Famille, Professionnel de sant√©, Individu, etc.).",
        }
        
        # D√©finition par d√©faut pour les variables sans commentaire sp√©cifique
        default_comment = "Distribution de la variable dans l'ensemble du dataset."
        
        all_columns = [col for col in df.columns if col != 'TSA']
        analysis_var = st.selectbox("Choisir une variable √† analyser", all_columns, key="analysis_var_in_exploration")
        
        # Afficher le commentaire pour la variable s√©lectionn√©e
        comment = variable_comments.get(analysis_var, default_comment)
        st.info(comment)
        
        col1, col2 = st.columns(2)
        with col1:
            color_var = None  # Ne pas utiliser la coloration par TSA
            if analysis_var == 'Jaunisse':
                fig = px.histogram(df, x='Jaunisse',
                                   title=f"Distribution de la jaunisse dans le dataset")
                st.plotly_chart(fig, use_container_width=True)
            else:
                is_categorical_aq = analysis_var.startswith('A') and analysis_var[1:].isdigit() and len(analysis_var) <= 3
                if is_categorical_aq:
                    fig = create_plotly_figure(df, x=analysis_var, color=color_var, kind='bar', title=f"Distribution de {analysis_var} (cat√©gorielle)")
                else:
                    fig = create_plotly_figure(df, x=analysis_var, color=color_var, kind='histogram', title=f"Distribution de {analysis_var}")
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
        with col2:
            stats = df[analysis_var].describe().to_frame().T
            st.dataframe(stats, use_container_width=True)


    with st.expander("üìù Analyse des R√©ponses au Questionnaire AQ-10", expanded=True):
        st.subheader("Analyse des R√©ponses au Questionnaire AQ-10")
        question_tabs = st.tabs([f"Q{i+1}" for i in range(10)])
        for i, tab in enumerate(question_tabs):
            with tab:
                col1, col2 = st.columns([2,3])
                with col1:
                    st.write(f"**Question A{i+1} :**")
                    st.markdown("> " + get_question_text(i+1))
                with col2:
                    try:
                        values_counts = df[f'A{i+1}'].value_counts().reset_index()
                        values_counts.columns = [f'A{i+1}', 'count']
                        color_discrete_map = {0: "#2ecc71", 1: "#3498db"}
                        fig = px.pie(
                            values_counts,
                            values='count',
                            names=f'A{i+1}',
                            color=f'A{i+1}',
                            color_discrete_map=color_discrete_map,
                            title=f"R√©partition des r√©ponses A{i+1}"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        st.error(f"Erreur lors de la cr√©ation du graphique: {str(e)}")

    with st.expander("‚öôÔ∏è Cr√©ation de Variables Composites", expanded=True):
        st.subheader("Cr√©ation de Variables Composites")
        col1, col2 = st.columns(2)
        with col1:
            st.write("**Score A10 :**")
            st.markdown("""
            $$
            \\text{Score\\_A10} = \\sum_{i=1}^{10} A_i
            $$
            """)
            if 'TSA' in df.columns:
                yes_mean = df[df['TSA'] == 'Yes']['Score_A10'].mean()
                no_mean = df[df['TSA'] == 'No']['Score_A10'].mean()
                st.metric("Score Moyen (TSA)", f"{yes_mean:.1f} ¬± {df[df['TSA'] == 'Yes']['Score_A10'].std():.1f}")
                st.metric("Score Moyen (Non-TSA)", f"{no_mean:.1f} ¬± {df[df['TSA'] == 'No']['Score_A10'].std():.1f}")
            else:
                overall_mean = df['Score_A10'].mean()
                st.metric("Score Moyen", f"{overall_mean:.1f} ¬± {df['Score_A10'].std():.1f}")
        with col2:
            color_var = 'TSA' if 'TSA' in df.columns else None
            fig = create_plotly_figure(df, y='Score_A10', color=color_var, kind='violin', title="Distribution des Scores")
            if fig:
                st.plotly_chart(fig, use_container_width=True)

    with st.expander("üîó Matrice de Corr√©lation", expanded=True):
        try:
            df_corr = df.copy()
            if 'Jaunisse' in df_corr.columns:
                df_corr = df_corr.drop(columns=['Jaunisse'])
            if 'TSA' in df_corr.columns:
                df_corr['TSA_num'] = df_corr['TSA'].map({'Yes': 1, 'No': 0})
            categorical_cols = df_corr.select_dtypes(include=['object']).columns
            if not categorical_cols.empty:
                from sklearn.preprocessing import OneHotEncoder
                ohe = OneHotEncoder(sparse_output=False, drop='first')
                encoded_data = ohe.fit_transform(df_corr[categorical_cols])
                feature_names = ohe.get_feature_names_out(categorical_cols)
                encoded_df = pd.DataFrame(encoded_data, columns=feature_names)
                numeric_df = df_corr.select_dtypes(exclude=['object']).reset_index(drop=True)
                df_corr_processed = pd.concat([numeric_df, encoded_df], axis=1)
                corr_matrix = df_corr_processed.corr(numeric_only=True)
            else:
                df_corr_processed = df_corr.select_dtypes(exclude=['object'])
                corr_matrix = df_corr_processed.corr(numeric_only=True)

            mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
            fig, ax = plt.subplots(figsize=(14, 12))
            cmap = sns.diverging_palette(200, 120, as_cmap=True)
            sns.heatmap(
                corr_matrix,
                mask=mask,
                cmap=cmap,
                vmax=1.0,
                vmin=-1.0,
                center=0,
                square=True,
                linewidths=0.8,
                fmt='.2f',
                annot=True,
                annot_kws={"size": 9, "weight": "bold"},
                cbar_kws={"shrink": 0.8, "label": "Coefficient de corr√©lation"}
            )
            plt.title("Matrice de corr√©lation des variables", fontsize=16, pad=20)
            plt.xticks(rotation=45, ha='right', fontsize=9)
            plt.yticks(fontsize=9)
            plt.tight_layout()
            st.pyplot(fig)
        except Exception as e:
            st.error(f"Erreur lors du calcul de la matrice de corr√©lation: {str(e)}")

    with st.expander("üß™ Tests Statistiques", expanded=True):
        test_type = st.radio(
            "Choisir le type de test:",
            ["Chi-carr√© (variables cat√©gorielles)", "Mann-Whitney (variables num√©riques)"],
            key="stat_test_type"
        )
        if test_type == "Chi-carr√© (variables cat√©gorielles)":
            from scipy.stats import chi2_contingency

            st.markdown("""
            <div style="background-color: #f0f7ff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                <h4 style="color: #3498db; margin-top: 0;">Test d'ind√©pendance du Chi-carr√©</h4>
                <p>Ce test √©value si deux variables cat√©gorielles sont ind√©pendantes. Un p-value < 0.05 sugg√®re une relation significative entre les variables.</p>
            </div>
            """, unsafe_allow_html=True)

            df = df.copy()
            categorical_cols = df.select_dtypes(include=['object']).columns.tolist()

            aq_columns = [col for col in df.columns if col.startswith('A') and col[1:].isdigit()]
            categorical_cols.extend([col for col in aq_columns if col not in categorical_cols])

            if 'TSA' in categorical_cols:
                categorical_cols.remove('TSA')

                if categorical_cols:
                    cat_var = st.selectbox(
                        "S√©lectionner une variable cat√©gorielle:",
                        categorical_cols,
                        key="chi2_var_selector"
                    )

                    try:
                        contingency_table = pd.crosstab(df[cat_var], df['TSA'])

                        chi2_stat, p_val, dof, expected = chi2_contingency(contingency_table)

                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown("### Table de contingence")
                            st.dataframe(contingency_table.style.set_properties(**{'background-color': 'white'}), use_container_width=True)
                            st.markdown("### Fr√©quences relatives (%)")
                            contingency_percent = contingency_table.div(contingency_table.sum(axis=1), axis=0) * 100
                            st.dataframe(
                                contingency_percent.style.format("{:.1f}%"),
                                use_container_width=True
                            )

                        with col2:
                            st.markdown("### R√©sultats du test")
                            st.metric("Statistique œá¬≤", f"{chi2_stat:.3f}")
                            st.metric("p-value", f"{p_val:.5f}")
                            st.metric("Degr√©s de libert√©", dof)

                            if p_val < 0.05:
                                st.success(f"**Significatif** (p < 0.05) : Il existe une relation significative entre '{cat_var}' et le diagnostic TSA.")
                            else:
                                st.info(f"**Non significatif** (p > 0.05) : Pas de relation significative d√©tect√©e entre '{cat_var}' et le diagnostic TSA.")

                        st.markdown("### Visualisation de la relation")
                        fig = px.bar(
                            contingency_percent.reset_index().melt(id_vars=cat_var),
                            x=cat_var, y='value', color='TSA',
                            barmode='group',
                            color_discrete_map=palette,
                            labels={'value': 'Pourcentage (%)'},
                            title=f"Distribution de '{cat_var}' par diagnostic TSA"
                        )
                        st.plotly_chart(fig, use_container_width=True)

                    except Exception as e:
                        st.error(f"Erreur lors du test Chi-carr√©: {str(e)}")
                        st.info("Assurez-vous que la variable s√©lectionn√©e contient suffisamment de donn√©es non-nulles.")
                else:
                    st.warning("Aucune variable cat√©gorielle trouv√©e dans le dataset (en excluant TSA).")

        else:
            st.markdown("""
                <div style="background-color: #f0f7ff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                    <h4 style="color: #3498db; margin-top: 0;">Test de Mann-Whitney U</h4>
                    <p>Ce test non-param√©trique compare les distributions de deux groupes ind√©pendants. Un p-value < 0.05 sugg√®re une diff√©rence significative entre les groupes.</p>
                </div>
                """, unsafe_allow_html=True)


            numeric_cols = df.select_dtypes(include=['float', 'int']).columns.tolist()
            numeric_cols = [col for col in numeric_cols if not (col.startswith('A') and col[1:].isdigit() and len(col) <= 3)]

            if 'Score_A10' in numeric_cols:
                numeric_cols.remove('Score_A10')
                numeric_cols = ['Score_A10'] + numeric_cols

            if numeric_cols:
                num_var = st.selectbox(
                    "S√©lectionner une variable num√©rique:",
                    numeric_cols,
                    key="mw_var_selector"
                    )
                try:
                    if 'TSA' in df.columns and df['TSA'].nunique() >= 2:
                        yes_group = df[df['TSA'] == 'Yes'][num_var].dropna()
                        no_group = df[df['TSA'] == 'No'][num_var].dropna()

                        if len(yes_group) > 0 and len(no_group) > 0:
                            stat, p_val = mannwhitneyu(yes_group, no_group, alternative='two-sided')

                            col1, col2 = st.columns(2)
                            with col1:
                                st.markdown("### Statistiques descriptives")
                                group_stats = df.groupby('TSA')[num_var].agg(['count', 'mean', 'std', 'min', 'median', 'max'])
                                st.dataframe(
                                    group_stats.style.format("{:.2f}", subset=['mean', 'std', 'min', 'median', 'max']),
                                    use_container_width=True
                                    )

                                mean_diff = yes_group.mean() - no_group.mean()
                                st.metric(
                                        "Diff√©rence des moyennes (TSA - Non TSA)",
                                    f"{mean_diff:.2f}",
                                    delta=f"{(mean_diff / no_group.mean()) * 100:.1f}%"
                                    )

                            with col2:
                                st.markdown("### R√©sultats du test")
                                st.metric("Statistique U", f"{stat:.1f}")
                                st.metric("p-value", f"{p_val:.5f}")
                                st.metric("Taille √©chantillon (TSA / Non TSA)", f"{len(yes_group)} / {len(no_group)}")

                                if p_val < 0.05:
                                    st.success(f"**Significatif** (p < 0.05) : Il existe une diff√©rence significative de '{num_var}' entre les groupes TSA et non-TSA.")
                                else:
                                    st.info(f"**Non significatif** (p > 0.05) : Pas de diff√©rence significative de '{num_var}' d√©tect√©e entre les groupes TSA et non-TSA.")
                            st.markdown("### Visualisation de la comparaison")
                            fig = px.box(
                                df.dropna(subset=[num_var]), x='TSA', y=num_var,
                                color='TSA', color_discrete_map=palette,
                                points='all', notched=True,
                                title=f"Comparaison de '{num_var}' entre les groupes TSA et non-TSA"
                                )
                            fig.add_annotation(
                                x=0.5, y=df[num_var].max() * 0.95,
                                text=f"p-value = {p_val:.5f}" + (" (significatif)" if p_val < 0.05 else ""),
                                showarrow=False,
                                font=dict(size=14, color='red' if p_val < 0.05 else 'gray')
                                )
                            st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.warning(f"Impossible de r√©aliser le test: donn√©es insuffisantes pour '{num_var}' dans un ou les deux groupes.")
                    else:
                        st.warning("Pour effectuer ce test, le dataset doit contenir une colonne 'TSA' avec au moins deux groupes distincts.")
                except Exception as e:
                    st.error(f"Erreur lors du test de Mann-Whitney: {str(e)}")
                    st.info("Assurez-vous que la variable s√©lectionn√©e contient suffisamment de donn√©es num√©riques non-nulles.")
            else:
                st.warning("Aucune variable num√©rique trouv√©e dans le dataset.")

    with st.expander("üìê Analyse Factorielle (FAMD)", expanded=True):
        st.markdown("""
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">Analyse Factorielle Mixte (FAMD)</h3>
            <p style="color: #7f8c8d;">R√©duction de dimensions pour visualiser la structure des donn√©es et les relations entre variables.</p>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        L'**Analyse Factorielle de Donn√©es Mixtes (FAMD)** est une m√©thode particuli√®rement adapt√©e √† nos donn√©es car elle permet de traiter simultan√©ment:
        - Des variables num√©riques (comme l'√¢ge, les scores A1-A10)
        - Des variables cat√©gorielles (comme le genre, l'ethnie, les ant√©c√©dents familiaux)

        Cette m√©thode nous permet de projeter les donn√©es sur un plan √† deux dimensions pour visualiser les relations entre les variables et les individus.
        """)

        try:
            import prince
            from sklearn import utils
            import numpy as np

            df_famd = df.copy()
            if 'Jaunisse' in df_famd.columns:
                df_famd = df_famd.drop(columns=['Jaunisse'])
            df_famd = df_famd.reset_index(drop=True)

            class FAMD_Custom(prince.FAMD):
                """Classe personnalis√©e pour contourner le probl√®me d'indexation bool√©enne dans Prince"""
                def transform(self, X):
                    utils.validation.check_is_fitted(self, 's_')
                    return self.row_coordinates(X)

                def column_correlations_custom(self, X):
                    """M√©thode personnalis√©e pour calculer les corr√©lations des colonnes"""
                    row_pc = self.row_coordinates(X)
                    correlations = {}

                    for feature in X.columns:
                        if X[feature].dtype.kind in 'ifc':  
                            corrs = []
                            for component in row_pc.columns:
                                corrs.append(np.corrcoef(X[feature], row_pc[component])[0, 1])
                            correlations[feature] = corrs
                      
                        else: 
                            means = {}
                            for component in row_pc.columns:
                                means[component] = []

                            for category in X[feature].unique():
                                mask = (X[feature] == category).values
                                for component in row_pc.columns:
                                    coord_mean = row_pc.loc[mask, component].mean()
                                    means[component].append(coord_mean)

                            max_abs = max(abs(v) for comp_means in means.values() for v in comp_means)
                            if max_abs > 0:  
                                for component in means:
                                    means[component] = [v/max_abs for v in means[component]]

                            corrs = []
                            for component in row_pc.columns:
                                corrs.append(sum(means[component])/len(means[component]))
                            correlations[feature] = corrs

                    return pd.DataFrame(
                        data=[[correlations[feature][i] for feature in X.columns] for i in range(len(row_pc.columns))],
                        columns=X.columns
                    ).T

            for col in df_famd.select_dtypes(include=['object']).columns:
                df_famd[col] = df_famd[col].astype('category')

            for col in df_famd.select_dtypes(include=['number']).columns:
                df_famd[col] = df_famd[col].astype('float64')

            df_famd = df_famd.dropna()
            df_famd = df_famd.reset_index(drop=True)

            n_components = min(5, min(df_famd.shape) - 1)
            X_famd = df_famd.copy()

            famd = FAMD_Custom(
                n_components=n_components,
                n_iter=10,
                random_state=42,
                copy=True,
                engine='sklearn'
            )
            famd = famd.fit(X_famd)

            coordinates = famd.transform(X_famd)

            eigenvalues = famd.eigenvalues_
            explained_variance = eigenvalues / sum(eigenvalues)

            famd_tabs = st.tabs([
                "Projection des individus",
                "Cercle des corr√©lations",
                "Variables explicatives",
                "FAMD score A10",
                "Interpr√©tation"
            ])

            with famd_tabs[0]:
                st.subheader("Projection des individus sur les axes principaux")
                st.markdown("""
                Ce graphique montre la projection des individus selon les deux axes principaux extraits de la FAMD.
                Les points sont color√©s selon le diagnostic TSA (rouge pour pr√©sent, bleu pour absent).
                """)

                fig, ax = plt.subplots(figsize=(10, 8))
                if 'TSA' in X_famd.columns:
                    coordinates_array = coordinates.values
                    for i, category in enumerate(X_famd['TSA'].unique()):
                        mask_array = (X_famd['TSA'] == category).values
                        color = "#e74c3c" if category == "Yes" else "#3498db"
                        ax.scatter(
                            coordinates_array[mask_array, 0],
                            coordinates_array[mask_array, 1],
                            label=category,
                            color=color,
                            alpha=0.6
                        )
                    ax.legend(title="Diagnostic TSA")
                else:
                    ax.scatter(coordinates.values[:, 0], coordinates.values[:, 1], alpha=0.7)

                ax.set_xlabel(f'Composante 1 ({explained_variance[0]:.2%} variance expliqu√©e)')
                ax.set_ylabel(f'Composante 2 ({explained_variance[1]:.2%} variance expliqu√©e)')
                ax.set_title('Projection des individus sur les deux premi√®res composantes')
                ax.grid(True, linestyle='--', alpha=0.7)
                st.pyplot(fig)

            with famd_tabs[1]:
                st.subheader("Cercle des corr√©lations")
                st.markdown("""
                Le cercle des corr√©lations met en √©vidence les variables qui contribuent le plus √† la formation des axes factoriels.
                Plus une variable est √©loign√©e du centre, plus sa contribution est importante.
                """)

                try:
                    if hasattr(famd, 'column_correlations'):
                        column_corr = famd.column_correlations(X_famd)
                    else:
                        st.info("Utilisation d'une m√©thode alternative pour calculer les corr√©lations...")
                        column_corr = famd.column_correlations_custom(X_famd)

                    fig, ax = plt.subplots(figsize=(10, 10))
                    circle = plt.Circle((0, 0), 1, color='gray', fill=False, linestyle='--')
                    ax.add_artist(circle)

                    ax.axhline(y=0, color='gray', linestyle='-', alpha=0.3)
                    ax.axvline(x=0, color='gray', linestyle='-', alpha=0.3)

                    for i, var in enumerate(column_corr.index):
                        x = column_corr.iloc[i, 0]
                        y = column_corr.iloc[i, 1]

                        ax.arrow(0, 0, x, y, head_width=0.05, head_length=0.05, fc='blue', ec='blue', alpha=0.7)

                        if var == 'Score_A10':
                            ax.text(x*1.1, y*1.1, var, fontsize=12, color='red', fontweight='bold')
                        elif var in ['Ethnie', 'Statut_testeur', 'TSA', 'Age']:
                            ax.text(x*1.1, y*1.1, var, fontsize=10, color='green')
                        else:
                            ax.text(x*1.1, y*1.1, var, fontsize=8)

                    ax.set_xlim(-1.1, 1.1)
                    ax.set_ylim(-1.1, 1.1)
                    ax.set_xlabel(f'Composante 1 ({explained_variance[0]:.2%})')
                    ax.set_ylabel(f'Composante 2 ({explained_variance[1]:.2%})')
                    ax.set_title('Cercle des corr√©lations des variables')
                    ax.grid(True, linestyle='--', alpha=0.5)
                    st.pyplot(fig)
                except Exception as e:
                    st.warning(f"Impossible de g√©n√©rer le cercle des corr√©lations: {str(e)}")
                    st.info("Essayez d'installer une version ant√©rieure de prince: `pip install prince==0.7.1`")

            with famd_tabs[2]:
                st.subheader("Variables explicatives")
                st.markdown("""
                Ce graphique montre les variables qui contribuent le plus √† chaque composante principale.
                """)

                try:
                    if hasattr(famd, 'column_contributions_'):
                        contribs = famd.column_contributions_

                        fig, ax = plt.subplots(figsize=(12, 8))
                        contribs.iloc[:, :2].sort_values(by=0, ascending=False).plot(
                            kind='bar', ax=ax
                        )
                        ax.set_title('Contribution des variables aux deux premi√®res composantes')
                        ax.set_ylabel('Contribution (%)')
                        ax.legend(['Composante 1', 'Composante 2'])
                        st.pyplot(fig)
                    else:
                        st.info("Les contributions des variables ne sont pas disponibles dans cette version de prince.")

                        if 'column_corr' in locals():
                            fig, ax = plt.subplots(figsize=(12, 8))
                            abs_corr = column_corr.iloc[:, :2].abs().sort_values(by=0, ascending=False)
                            abs_corr.plot(kind='bar', ax=ax)
                            ax.set_title('Magnitude des corr√©lations avec les composantes principales')
                            ax.set_ylabel('|Corr√©lation|')
                            ax.legend(['Composante 1', 'Composante 2'])
                            st.pyplot(fig)
                except Exception as e:
                    st.warning(f"Impossible de g√©n√©rer le graphique des contributions: {str(e)}")

            with famd_tabs[3]:
                st.subheader("FAMD centr√©e sur Score A10")
                st.markdown("""
                Analyse sp√©cifique mettant en √©vidence la relation entre le Score A10 et le diagnostic TSA.
                """)
            
                try:
                    if 'Score_A10' in X_famd.columns:
                        # Cr√©ation d'une liste de variables √† exclure
                        excluded_vars = [f'A{i}' for i in range(1, 11)]
                        
                        # Filtrer X_famd pour exclure les variables A1-A10
                        filtered_cols = [col for col in X_famd.columns if col not in excluded_vars]
                        X_filtered = X_famd[filtered_cols].copy()
                        
                        # D√©finir les variables cl√©s pour l'analyse FAMD centr√©e sur Score_A10
                        key_vars = ['Score_A10', 'TSA']
                        for var in ['Age', 'Genre', 'Ethnie']:
                            if var in X_filtered.columns:
                                key_vars.append(var)
                                
                        # Cr√©er le dataset final pour l'analyse
                        X_a10 = X_filtered[key_vars].copy()
                        
                        famd_a10 = FAMD_Custom(
                            n_components=min(3, len(key_vars)-1),
                            n_iter=10,
                            random_state=42,
                            copy=True,
                            engine='sklearn'
                        )
                        famd_a10 = famd_a10.fit(X_a10)
                        coords_a10 = famd_a10.transform(X_a10)
                        
                        # Cr√©ation du graphique de projection unique
                        fig, ax = plt.subplots(figsize=(10, 8))
                        coords_array = coords_a10.values
                        
                        if 'TSA' in X_a10.columns:
                            for category in X_a10['TSA'].unique():
                                mask = (X_a10['TSA'] == category).values
                                color = "#e74c3c" if category == "Yes" else "#3498db"
                                ax.scatter(
                                    coords_array[mask, 0],
                                    coords_array[mask, 1],
                                    label=category,
                                    color=color,
                                    alpha=0.7
                                )
                            ax.legend(title="Diagnostic TSA")
                        else:
                            ax.scatter(coords_array[:, 0], coords_array[:, 1], alpha=0.7)
                            
                        ax.set_xlabel('Composante 1')
                        ax.set_ylabel('Composante 2')
                        ax.set_title('FAMD centr√©e sur Score_A10 et variables cl√©s')
                        ax.grid(True, linestyle='--', alpha=0.7)
                        st.pyplot(fig)
                    else:
                        st.warning("La variable Score_A10 n'est pas disponible dans le dataset.")
                except Exception as e:
                    st.warning(f"Impossible de g√©n√©rer l'analyse FAMD centr√©e sur Score_A10: {str(e)}")

            with famd_tabs[4]:
                st.subheader("Interpr√©tation des r√©sultats")
                st.markdown("""
                ### Points cl√©s de l'analyse FAMD

                L'analyse factorielle de donn√©es mixtes nous permet d'identifier plusieurs tendances importantes:

                1. **Structure des donn√©es** : Les deux premi√®res composantes principales expliquent environ {:.1%} de la variance totale, ce qui indique une bonne capture de la structure des donn√©es.

                2. **Variables discriminantes** : Les variables qui contribuent le plus √† la distinction entre les groupes incluent le Score A10 et d'autres variables d√©mographiques.

                3. **Regroupement des cas TSA** : On observe une tendance au regroupement des cas diagnostiqu√©s TSA dans l'espace factoriel, ce qui sugg√®re des patterns communs dans leurs profils.

                4. **Influence du Score A10** : Le Score A10 montre une corr√©lation significative avec la premi√®re composante principale, confirmant son importance dans le processus diagnostique.
                """.format(explained_variance[0] + explained_variance[1]))

                st.subheader("R√©capitulatif des composantes principales")
                summary_df = pd.DataFrame({
                    'Composante': [f"Composante {i+1}" for i in range(len(eigenvalues))],
                    'Valeur propre': eigenvalues,
                    'Variance expliqu√©e (%)': explained_variance * 100,
                    'Variance cumul√©e (%)': np.cumsum(explained_variance) * 100
                })
                st.dataframe(summary_df.style.format({
                    'Valeur propre': '{:.3f}',
                    'Variance expliqu√©e (%)': '{:.2f}%',
                    'Variance cumul√©e (%)': '{:.2f}%'
                }))
                

        except Exception as e:
            st.error(f"Erreur globale lors de l'analyse FAMD: {str(e)}")

            st.info("""
            Pour r√©soudre ce probl√®me, essayez les solutions suivantes:

            1. Installer une version sp√©cifique de prince compatible:
              ```
              !pip install prince==0.7.1
              ```

            2. Red√©marrer votre environnement d'ex√©cution apr√®s l'installation

            3. Si le probl√®me persiste, utilisez numpy √† la place de pandas pour les op√©rations d'indexation:
              ```
              # Au lieu de:
              # df.iloc[mask]
              # Utilisez:
              mask_array = mask.values  # conversion en numpy array
              df.values[mask_array]
              ```
            """)
            pass


def show_ml_analysis():
    import plotly.express as px
    import plotly.graph_objects as go
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib.pyplot as plt
    from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
    from sklearn.linear_model import LogisticRegression
    from sklearn.preprocessing import StandardScaler, OneHotEncoder
    from sklearn.compose import ColumnTransformer
    from sklearn.pipeline import Pipeline
    from xgboost import XGBClassifier
    from lightgbm import LGBMClassifier
    from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
    from sklearn.metrics import roc_auc_score, confusion_matrix, classification_report
    from sklearn.metrics import balanced_accuracy_score
    from sklearn.model_selection import cross_val_score, train_test_split
    import time
    import os
    import joblib
    from joblib import Memory, Parallel, delayed
    import hashlib

    # Cr√©ation du dossier de cache s'il n'existe pas
    cache_dir = "model_cache"
    os.makedirs(cache_dir, exist_ok=True)

    df, _, _, _, _, _, _ = load_dataset()

    aq_columns = [f'A{i}' for i in range(1, 11) if f'A{i}' in df.columns]
    if aq_columns:
        df = df.drop(columns=aq_columns)

    if 'Jaunisse' in df.columns:
        df = df.drop(columns=['Jaunisse'])
    if 'TSA' not in df.columns:
        st.error("La colonne 'TSA' n'existe pas dans le dataframe")
        return
    
    X = df.drop(columns=['TSA'])
    y = df['TSA'].map({'Yes': 1, 'No': 0})
    
    # Diviser les donn√©es en ensembles d'entra√Ænement et de test
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    
    # Identifier les colonnes num√©riques et cat√©gorielles
    numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()
    categorical_cols = X.select_dtypes(include=['object', 'category']).columns.tolist()
    
    # Cr√©er le pr√©processeur
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', StandardScaler(), numerical_cols),
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
        ],
        remainder='passthrough',
        verbose_feature_names_out=False
    )
    
    # Cr√©er et entra√Æner le pipeline avec RandomForest
    rf_classifier = RandomForestClassifier(
        n_estimators=100,
        max_depth=8,
        min_samples_split=10,
        min_samples_leaf=2,
        max_features='sqrt',
        bootstrap=True,
        random_state=42,
        n_jobs=-1
    )
    
    pipeline = Pipeline([
        ('preprocessor', preprocessor),
        ('classifier', rf_classifier)
    ])
    
    # Entra√Æner le mod√®le principal et calculer les m√©triques r√©elles
    pipeline.fit(X_train, y_train)
    y_pred = pipeline.predict(X_test)
    y_prob = pipeline.predict_proba(X_test)[:, 1]
    
    # Calculer les vraies m√©triques
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    auc = roc_auc_score(y_test, y_prob)
    
    # Cr√©er la vraie matrice de confusion
    cm = confusion_matrix(y_test, y_pred)
    
    # G√©n√©rer le rapport de classification r√©el
    report_dict = classification_report(y_test, y_pred, output_dict=True)
    report_df = pd.DataFrame(report_dict).transpose()
    
    # Fonction pour entra√Æner et √©valuer plusieurs mod√®les
    def train_and_evaluate_models():
        models = {
            "R√©gression Logistique": LogisticRegression(random_state=42, max_iter=1000),
            "XGBoost": XGBClassifier(random_state=42),
            "LightGBM": LGBMClassifier(random_state=42),
            "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
            "Gradient Boosting": GradientBoostingClassifier(random_state=42)
        }
        
        results = []
        
        # Pr√©processer les donn√©es
        X_train_prep = preprocessor.fit_transform(X_train)
        X_test_prep = preprocessor.transform(X_test)
        
        for name, model in models.items():
            try:
                model.fit(X_train_prep, y_train)
                y_pred = model.predict(X_test_prep)
                y_prob = model.predict_proba(X_test_prep)[:, 1] if hasattr(model, "predict_proba") else None
                
                acc = accuracy_score(y_test, y_pred)
                prec = precision_score(y_test, y_pred)
                rec = recall_score(y_test, y_pred)
                f1 = f1_score(y_test, y_pred)
                auc = roc_auc_score(y_test, y_prob) if y_prob is not None else None
                
                results.append({
                    'Mod√®le': name,
                    'Accuracy': acc,
                    'Precision': prec,
                    'Recall': rec,
                    'F1-Score': f1,
                    'AUC': auc if auc is not None else float('nan')
                })
            except Exception as e:
                st.error(f"Erreur avec {name}: {str(e)}")
            
        return pd.DataFrame(results)

    st.markdown("""
    <div class="header-container">
        <span style="font-size:2.5rem">üß†</span>
        <h1 class="app-title">Analyse par Machine Learning</h1>
    </div>
    """, unsafe_allow_html=True)

    ml_tabs = st.tabs([
        "üìä Pr√©processing",
        "üöÄ Comparaison des mod√®les",  # Fusion des onglets "Lazy Predict" et "Comparaison des mod√®les"
        "üå≤ Random Forest"
    ])

    with ml_tabs[0]:
        st.subheader("Pipeline de pr√©traitement des donn√©es")

        st.markdown("""
        <div style="background-color: #f0f7ff; padding: 20px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #3498db;">
            <h3 style="color: #2c3e50; margin-top: 0;">Pr√©paration des donn√©es pour la mod√©lisation</h3>
            <p style="color: #34495e;">Un pr√©traitement robuste est essentiel pour garantir la qualit√© des mod√®les pr√©dictifs.</p>
        </div>
        """, unsafe_allow_html=True)

        col1, col2 = st.columns([1, 1])
        with col1:
            st.markdown("""
            ### √âtapes du pr√©processing

            1. **Nettoyage des donn√©es**
               - Gestion des valeurs manquantes
               - Correction des incoh√©rences
               - Suppression des doublons

            2. **Encodage des variables cat√©gorielles**
               - One-Hot Encoding pour les variables nominales
               - Encodage ordinal pour les variables ordinales

            3. **Standardisation des variables num√©riques**
               - Z-score standardization (moyenne=0, √©cart-type=1)
               - Important pour les algorithmes sensibles √† l'√©chelle

            4. **R√©duction de dimensionnalit√©**
               - FAMD pour l'analyse exploratoire
               - Feature selection pour la mod√©lisation
            """)

        with col2:
            preprocessing_code = """
            digraph preprocessing {
                rankdir=TB;
                node [shape=box, style=filled, fillcolor="#f5f7fa", fontname="Arial", margin="0.2,0.1"];
                edge [arrowhead=vee, arrowsize=0.8];
                data [label="Donn√©es brutes", fillcolor="#e1f5fe"];
                cleaning [label="Nettoyage des donn√©es"];
                encoding [label="Encodage des variables\ncat√©gorielles"];
                scaling [label="Standardisation des\nvariables num√©riques"];
                feature_eng [label="Feature Engineering"];
                split [label="Train/Test Split", fillcolor="#e8f5e9"];

                data -> cleaning;
                cleaning -> encoding;
                encoding -> scaling;
                scaling -> feature_eng;
                feature_eng -> split;
            }
            """

            try:
                from graphviz import Source
                st.graphviz_chart(preprocessing_code)
            except:
                st.warning("Graphviz n'est pas disponible. Installation requise: `pip install graphviz`")
                st.code(preprocessing_code, language="python")
        
        st.markdown("### Pipeline de pr√©processing utilis√©")

        st.code("""
        # D√©finition du pr√©processeur pour variables mixtes
        preprocessor = ColumnTransformer(
            transformers=[
                ('num', StandardScaler(), numerical_cols),
                ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_cols)
            ],
            remainder='passthrough',
            verbose_feature_names_out=False
        )

        # Pipeline complet avec pr√©processeur et mod√®le
        pipeline = Pipeline([
            ('preprocessor', preprocessor),
            ('classifier', RandomForestClassifier())
        ])
        """, language="python")

        st.subheader("Transformation des donn√©es")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("#### Donn√©es avant pr√©processing")
            # Utiliser des donn√©es r√©elles du DataFrame
            if not df.empty:
                sample_rows = min(4, len(df))
                raw_sample = df.iloc[:sample_rows].copy()
                columns_to_show = [col for col in raw_sample.columns if col in ['A1', 'A2', 'A3', 'Genre', 'Age', 'TSA']][:6]
                st.dataframe(raw_sample[columns_to_show])
            else:
                st.error("Aucune donn√©e disponible.")

        with col2:
            st.markdown("#### Donn√©es apr√®s pr√©processing")
            # Afficher un exemple r√©el de transformation
            if not df.empty:
                try:
                    sample_X = X.iloc[:4]
                    transformed_sample = preprocessor.fit_transform(sample_X)
                    st.code(f"{transformed_sample[:, :10]}")
                except Exception as e:
                    st.error(f"Erreur lors de la transformation: {str(e)}")

    # Nouvel onglet fusionn√© "Comparaison des mod√®les"
    with ml_tabs[1]:
        st.header("Comparaison des mod√®les et √©valuation des performances")

        st.markdown("""
        <div style="background-color: #fff8e1; padding: 20px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #ffa000;">
            <h3 style="color: #2c3e50; margin-top: 0;">Analyse comparative des algorithmes de Machine Learning</h3>
            <p style="color: #34495e;">Cette section compare diff√©rents algorithmes de machine learning pour identifier les plus performants sur notre jeu de donn√©es.</p>
        </div>
        """, unsafe_allow_html=True)

        tabs_comparison = st.tabs(["Comparaison rapide", "M√©triques d√©taill√©es", "Visualisations"])

        with tabs_comparison[0]:
            st.subheader("Comparaison rapide des algorithmes")

            col1, col2 = st.columns([2, 1])

            with col1:
                st.markdown("""
                ### Mod√®les √©valu√©s

                Nous comparons plusieurs algorithmes de classification:

                1. **Random Forest** - Ensemble d'arbres de d√©cision
                2. **Gradient Boosting** - Mod√®le additif d'arbres de d√©cision
                3. **XGBoost** - Impl√©mentation optimis√©e du gradient boosting
                4. **LightGBM** - Framework de gradient boosting l√©ger et rapide  
                5. **R√©gression Logistique** - Mod√®le lin√©aire de r√©f√©rence
                """)

            with col2:
                st.markdown("### Avantages")
                st.markdown("""
                ‚úÖ **Vue d'ensemble** des performances

                ‚úÖ **Identification** des meilleurs mod√®les
                
                ‚úÖ **√âconomie** de temps de d√©veloppement

                ‚úÖ **S√©lection optimale** pour le d√©ploiement
                """)

            # Bouton pour lancer l'analyse comparative
            if st.button("üöÄ Lancer la comparaison des mod√®les", type="primary", use_container_width=True):
                with st.spinner("Analyse en cours... Cette op√©ration peut prendre quelques instants..."):
                    try:
                        # Ex√©cuter notre fonction personnalis√©e qui remplace LazyPredict
                        comparison_results = train_and_evaluate_models()
                        
                        # Stocker les r√©sultats dans l'√©tat de session
                        st.session_state.comparison_results = comparison_results
                        
                        # Afficher les r√©sultats
                        st.success("‚úÖ Analyse termin√©e avec succ√®s!")
                        st.dataframe(comparison_results.style.format({
                            'Accuracy': '{:.2%}',
                            'Precision': '{:.2%}',
                            'Recall': '{:.2%}',
                            'F1-Score': '{:.2%}',
                            'AUC': '{:.2%}'
                        }).background_gradient(cmap='Blues', subset=['Accuracy', 'F1-Score']), use_container_width=True)
                        
                        # Visualiser les performances
                        try:
                            fig = px.bar(
                                comparison_results,
                                y='Mod√®le',
                                x='Accuracy',
                                orientation='h',
                                title="Pr√©cision des mod√®les",
                                color='Accuracy',
                                color_continuous_scale='Blues'
                            )
                            st.plotly_chart(fig, use_container_width=True)
                            
                            # Ajouter les recommandations bas√©es sur les r√©sultats
                            st.markdown("""
                            <div style="background-color: #e3f2fd; padding: 20px; border-radius: 10px; margin-top: 30px; border-left: 4px solid #2196f3;">
                                <h3 style="color: #0d47a1; margin-top: 0;">Recommandations bas√©es sur les r√©sultats</h3>
                                <p>En fonction des performances des mod√®les, voici nos recommandations :</p>
                                <ol>
                                    <li><strong>S√©lectionnez les 2-3 meilleurs mod√®les</strong> pour une optimisation plus pouss√©e</li>
                                    <li><strong>√âquilibrez pr√©cision et interpr√©tabilit√©</strong> : parfois un mod√®le l√©g√®rement moins pr√©cis mais plus interpr√©table est pr√©f√©rable</li>
                                    <li><strong>√âvitez le surajustement</strong> : v√©rifiez la stabilit√© des performances avec validation crois√©e</li>
                                    <li><strong>√âvaluez d'autres m√©triques</strong> comme le F1-Score pour les donn√©es d√©s√©quilibr√©es</li>
                                    <li><strong>Optimisez les hyperparam√®tres</strong> du mod√®le s√©lectionn√© avec GridSearchCV ou RandomizedSearchCV</li>
                                </ol>
                                <h4 style="color: #0d47a1; margin-top: 15px;">Prochaines √©tapes recommand√©es :</h4>
                                <ul>
                                    <li>Effectuer une analyse des caract√©ristiques importantes du mod√®le le plus performant</li>
                                    <li>Utiliser la validation crois√©e pour confirmer la robustesse des performances</li>
                                    <li>Calibrer les probabilit√©s pour am√©liorer l'interpr√©tabilit√© des pr√©dictions</li>
                                    <li>Explorer l'onglet Random Forest pour une analyse plus d√©taill√©e du mod√®le principal</li>
                                </ul>
                            </div>
                            """, unsafe_allow_html=True)
                        except Exception as e:
                            st.error(f"Erreur lors de la visualisation: {str(e)}")
                    
                    except Exception as e:
                        st.error(f"Erreur lors de l'analyse: {str(e)}")
            else:
                # Si l'analyse n'a pas encore √©t√© lanc√©e
                st.info("üëà Cliquez sur le bouton pour lancer l'analyse comparative des mod√®les.")

        with tabs_comparison[1]:
            st.subheader("M√©triques d'√©valuation d√©taill√©es")
            
            # Afficher les m√©triques r√©elles calcul√©es
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Pr√©cision (Accuracy)", f"{accuracy:.2%}")
                st.metric("Rappel (Sensitivity)", f"{recall:.2%}")
            with col2:
                st.metric("Sp√©cificit√© (Precision)", f"{precision:.2%}")
                st.metric("Score F1", f"{f1:.2%}")
            with col3:
                st.metric("AUC-ROC", f"{auc:.2%}")
                st.metric("Erreur", f"{1-accuracy:.2%}")

            st.subheader("Matrice de confusion")

            # Afficher la v√©ritable matrice de confusion
            fig, ax = plt.subplots(figsize=(8, 6))
            sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
            plt.xlabel('Pr√©diction')
            plt.ylabel('R√©alit√©')
            plt.title('Matrice de confusion')
            ax.set_xticklabels(['Non-TSA', 'TSA'])
            ax.set_yticklabels(['Non-TSA', 'TSA'])
            st.pyplot(fig)

            st.markdown("""
            <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <p><strong>Interpr√©tation :</strong></p>
                <ul>
                    <li>Vrai N√©gatif (coin sup√©rieur gauche) : Cas correctement identifi√©s comme non-TSA</li>
                    <li>Faux Positif (coin sup√©rieur droit) : Cas incorrectement identifi√©s comme TSA</li>
                    <li>Faux N√©gatif (coin inf√©rieur gauche) : Cas de TSA manqu√©s par le mod√®le</li>
                    <li>Vrai Positif (coin inf√©rieur droit) : Cas de TSA correctement identifi√©s</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

            st.subheader("Rapport de classification d√©taill√©")
            st.dataframe(report_df.style.format({
                'precision': '{:.2%}',
                'recall': '{:.2%}',
                'f1-score': '{:.2%}'
            }).background_gradient(cmap='Blues', subset=['precision', 'recall', 'f1-score']), use_container_width=True)

        with tabs_comparison[2]:
            st.subheader("Visualisations des performances")
            
            if 'comparison_results' in st.session_state:
                results = st.session_state.comparison_results
                
                # Graphe de comparaison des m√©triques par mod√®le
                fig = px.bar(
                    results.melt(id_vars='Mod√®le', value_vars=['Accuracy', 'Precision', 'Recall', 'F1-Score'], 
                               var_name='M√©trique', value_name='Valeur'),
                    x='Mod√®le', y='Valeur', color='M√©trique',
                    barmode='group',
                    title="Comparaison des m√©triques par mod√®le",
                    color_discrete_sequence=px.colors.qualitative.Set1
                )
                fig.update_layout(yaxis_tickformat='.0%')
                st.plotly_chart(fig, use_container_width=True)
                
                # Graphe radar pour comparer les mod√®les
                try:
                    fig = go.Figure()
                    for i, model in enumerate(results['Mod√®le']):
                        fig.add_trace(go.Scatterpolar(
                            r=[results.iloc[i]['Accuracy'], results.iloc[i]['Precision'], 
                               results.iloc[i]['Recall'], results.iloc[i]['F1-Score']],
                            theta=['Accuracy', 'Precision', 'Recall', 'F1-Score'],
                            fill='toself',
                            name=model
                        ))
                    fig.update_layout(
                        polar=dict(
                            radialaxis=dict(
                                visible=True,
                                range=[0, 1]
                            )),
                        showlegend=True,
                        title="Radar chart des performances des mod√®les"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.warning(f"Impossible d'afficher le graphique radar: {str(e)}")
            else:
                st.info("Ex√©cutez d'abord l'analyse des mod√®les pour voir les visualisations.")

    with ml_tabs[2]:
        st.header("Mod√®le Random Forest")
    
        st.markdown("""
        <div style="background-color: #e8f5e9; padding: 20px; border-radius: 10px; margin-bottom: 20px; border-left: 4px solid #2ecc71;">
            <h3 style="color: #2c3e50; margin-top: 0;">Random Forest pour la d√©tection des TSA</h3>
            <p style="color: #34495e;">Un mod√®le d'apprentissage automatique bas√© sur un ensemble d'arbres de d√©cision pour la classification des cas TSA.</p>
        </div>
        """, unsafe_allow_html=True)
    
        st.subheader("Principe de fonctionnement de Random Forest")
    
        col1, col2 = st.columns([1, 1])
    
        with col1:
            st.markdown("""
            ### Comment fonctionne Random Forest?
    
            La m√©thode Random Forest est un algorithme d'apprentissage supervis√© qui:
    
            1. **Cr√©e plusieurs arbres de d√©cision** sur des sous-√©chantillons al√©atoires des donn√©es
    
            2. **Utilise le principe du bagging** (Bootstrap Aggregating) pour r√©duire la variance et √©viter le surapprentissage
    
            3. **S√©lectionne al√©atoirement des sous-ensembles de caract√©ristiques** pour chaque n≈ìud de division
    
            4. **Agr√®ge les pr√©dictions** de tous les arbres par vote majoritaire pour la classification
    
            Cette approche d'ensemble am√©liore significativement la robustesse et la pr√©cision par rapport √† un arbre de d√©cision unique.
            """)
    
        with col2:
            rf_diagram = """
            digraph RandomForest {
                rankdir=TB;
                node [shape=box, style=filled, fillcolor="#f5f7fa", fontname="Arial", margin="0.2,0.1"];
                edge [arrowhead=vee, arrowsize=0.8];
    
                data [label="Donn√©es d'entra√Ænement", fillcolor="#e1f5fe"];
    
                sample1 [label="√âchantillon 1\n(bootstrap)", fillcolor="#e8f5e9"];
                sample2 [label="√âchantillon 2\n(bootstrap)", fillcolor="#e8f5e9"];
                sample3 [label="√âchantillon 3\n(bootstrap)", fillcolor="#e8f5e9"];
    
                tree1 [label="Arbre 1", fillcolor="#d4efdf"];
                tree2 [label="Arbre 2", fillcolor="#d4efdf"];
                tree3 [label="Arbre 3", fillcolor="#d4efdf"];
    
                predict [label="Agr√©gation\n(vote majoritaire)", fillcolor="#bbdefb"];
    
                data -> sample1;
                data -> sample2;
                data -> sample3;
    
                sample1 -> tree1;
                sample2 -> tree2;
                sample3 -> tree3;
    
                tree1 -> predict;
                tree2 -> predict;
                tree3 -> predict;
            }
            """
    
            try:
                from graphviz import Source
                st.graphviz_chart(rf_diagram)
            except:
                st.warning("Graphviz n'est pas disponible. Sch√©ma en texte uniquement.")
                st.code(rf_diagram, language="dot")
    
        # Importance des caract√©ristiques r√©elles
        st.subheader("Analyse de l'importance des variables")
    
        try:
            # Obtenir l'importance des caract√©ristiques du mod√®le entra√Æn√©
            rf = pipeline.named_steps['classifier']
            
            # Tenter d'obtenir les noms des caract√©ristiques apr√®s pr√©traitement
            try:
                feature_names = preprocessor.get_feature_names_out()
            except:
                # Si cela √©choue, cr√©er des noms g√©n√©riques
                feature_names = [f"feature_{i}" for i in range(len(rf.feature_importances_))]
            
            # Cr√©er le DataFrame d'importance des caract√©ristiques
            importance_df = pd.DataFrame({
                'Feature': feature_names,
                'Importance': rf.feature_importances_
            }).sort_values('Importance', ascending=False).head(15)  # Montrer les 15 plus importantes
            
            # Visualiser l'importance des caract√©ristiques
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.barplot(
                x='Importance',
                y='Feature',
                data=importance_df,
                orient='h',
                palette='viridis'
            )
            ax.set_title("Contribution des variables √† la pr√©diction")
            st.pyplot(fig)
            
        except Exception as e:
            st.error(f"Erreur lors de l'analyse d'importance des variables: {str(e)}")
            
        # Validation crois√©e r√©elle
        st.subheader("Validation crois√©e du mod√®le")
        
        try:
            # Effectuer la validation crois√©e avec le mod√®le
            cv_scores = cross_val_score(pipeline, X, y, cv=5, scoring='accuracy')
            
            # Afficher les r√©sultats
            st.success(f"**Score moyen de validation crois√©e (5-fold)**: {cv_scores.mean():.4f} ¬± {cv_scores.std():.4f}")
            
            # Afficher les scores individuels
            st.write("Scores par fold:", cv_scores)
            
            # Visualiser les scores
            fig, ax = plt.subplots(figsize=(10, 4))
            ax.bar(range(1, len(cv_scores)+1), cv_scores, color='#3498db')
            ax.axhline(y=cv_scores.mean(), color='red', linestyle='-', label=f'Moyenne: {cv_scores.mean():.4f}')
            ax.set_xlabel('Fold')
            ax.set_ylabel('Score')
            ax.set_title('Scores de validation crois√©e')
            ax.legend()
            st.pyplot(fig)
        except Exception as e:
            st.error(f"Erreur lors de la validation crois√©e: {str(e)}")

        
def show_aq10_and_prediction():
    """
    Fonction combin√©e pour l'√©valuation AQ-10 et la pr√©diction TSA.
    """
    import pandas as pd
    import plotly.express as px
    import plotly.graph_objects as go
    from plotly.subplots import make_subplots
    import numpy as np

    try:
        df, _, _, _, _, _, _ = load_dataset()
    
        aq_columns = [f'A{i}' for i in range(1, 11) if f'A{i}' in df.columns]
        if aq_columns:
            df = df.drop(columns=aq_columns)
        
        # Puis la suite du code existant
        if 'Jaunisse' in df.columns:
            df = df.drop(columns=['Jaunisse'])
        rf_model, preprocessor, feature_names = train_advanced_model(df)
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es ou du mod√®le: {str(e)}")
        rf_model, preprocessor, feature_names = None, None, None

    st.markdown(
        f"""<div class="header-container" style="text-align: center;">
            <span style="font-size:2.5rem">''üìù''</span>
            <h1 class="app-title">Test AQ-10 et Pr√©diction TSA</h1>
        </div>""", unsafe_allow_html=True
    )

    image_url = "https://drive.google.com/file/d/1c2RrCChdmOv9IsGRY_T0i0QOgNB-oHt0/view?usp=sharing"
    st.markdown(get_img_with_href(image_url, "#", as_banner=True), unsafe_allow_html=True)

    st.markdown("""
    <p style="text-align: center;">Ce questionnaire aide √† √©valuer les traits autistiques potentiels. R√©pondez √† toutes les questions puis compl√©tez vos informations personnelles pour obtenir une pr√©diction par intelligence artificielle.</p>
    """, unsafe_allow_html=True)

    st.markdown("""
    <style>
    .result-card {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 6px 16px rgba(52,152,219,0.1);
        padding: 1.5rem 1.5rem 1.2rem 1.5rem;
        margin-top: 28px;
        margin-bottom: 22px;
        text-align: center;
    }
    .result-card.success {
        border-left: 6px solid #2ecc71;
        background: linear-gradient(90deg, #eafaf1 80%, #f8fff8 100%);
    }
    .result-card.warning {
        border-left: 6px solid #e67e22;
        background: linear-gradient(90deg, #fff6e0 80%, #fff8f2 100%);
    }
    .result-card.danger {
        border-left: 6px solid #e74c3c;
        background: linear-gradient(90deg, #ffeaea 80%, #fff6f6 100%);
    }
    .result-score {
        font-size: 2.1rem;
        font-weight: bold;
        color: #3498db;
        margin-bottom: 0.5rem;
        text-align: center;
    }
    .result-title {
        font-size: 1.6rem;
        font-weight: bold;
        margin-bottom: 1rem;
        color: #3498db;
        text-align: center;
    }
    .kpi-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        margin: 20px 0;
        text-align: center;
    }
    .kpi-card {
        background: white;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        text-align: center;
        box-shadow: 0 3px 10px rgba(0,0,0,0.08);
        transition: transform 0.3s ease;
    }
    .kpi-card:hover {
        transform: translateY(-5px);
    }
    .kpi-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: #3498db;
        margin: 5px 0;
        text-align: center;
    }
    .kpi-title {
        font-size: 1rem;
        color: #7f8c8d;
        text-align: center;
    }
    .kpi-comparison {
        font-size: 0.9rem;
        color: #2c3e50;
        margin-top: 5px;
        text-align: center;
    }
    .question-container {
        text-align: left;
    }
    p {
        text-align: center;
    }
    .stButton > button {
        display: block;
        margin: 0 auto;
    }
    .diagnostic-box {
        padding: 20px;
        border-radius: 10px;
        margin-top: 25px;
        text-align: center;
    }
    </style>
    """, unsafe_allow_html=True)

    questions = [
        {"question": "üëÇ 1. Je remarque souvent de petits bruits que les autres ne remarquent pas.",
         "scoring": {"Tout √† fait d'accord": 1, "Plut√¥t d'accord": 1, "Plut√¥t pas d'accord": 0, "Pas du tout d'accord": 0}},
        {"question": "üîç 2. Je me concentre g√©n√©ralement davantage sur l'ensemble que sur les petits d√©tails.",
         "scoring": {"Tout √† fait d'accord": 0, "Plut√¥t d'accord": 0, "Plut√¥t pas d'accord": 1, "Pas du tout d'accord": 1}},
        {"question": "üîÑ 3. Je trouve facile de faire plusieurs choses en m√™me temps.",
         "scoring": {"Tout √† fait d'accord": 0, "Plut√¥t d'accord": 0, "Plut√¥t pas d'accord": 1, "Pas du tout d'accord": 1}},
        {"question": "‚èØÔ∏è 4. S'il y a une interruption, je peux rapidement reprendre ce que je faisais.",
         "scoring": {"Tout √† fait d'accord": 0, "Plut√¥t d'accord": 0, "Plut√¥t pas d'accord": 1, "Pas du tout d'accord": 1}},
        {"question": "üóØÔ∏è 5. Je trouve facile de ¬´ lire entre les lignes ¬ª quand quelqu'un me parle.",
         "scoring": {"Tout √† fait d'accord": 0, "Plut√¥t d'accord": 0, "Plut√¥t pas d'accord": 1, "Pas du tout d'accord": 1}},
        {"question": "üò¥ 6. Je sais comment savoir si la personne qui m'√©coute commence √† s'ennuyer.",
         "scoring": {"Tout √† fait d'accord": 0, "Plut√¥t d'accord": 0, "Plut√¥t pas d'accord": 1, "Pas du tout d'accord": 1}},
        {"question": "üìö 7. Quand je lis une histoire, j'ai du mal √† comprendre les intentions des personnages.",
         "scoring": {"Tout √† fait d'accord": 1, "Plut√¥t d'accord": 1, "Plut√¥t pas d'accord": 0, "Pas du tout d'accord": 0}},
        {"question": "üóÇÔ∏è 8. J'aime collecter des informations sur des cat√©gories de choses (par exemple : types de voitures, d'oiseaux, de trains, de plantes, etc.).",
         "scoring": {"Tout √† fait d'accord": 1, "Plut√¥t d'accord": 1, "Plut√¥t pas d'accord": 0, "Pas du tout d'accord": 0}},
        {"question": "üòä 9. Je trouve facile de comprendre ce que quelqu'un pense ou ressent rien qu'en regardant son visage.",
         "scoring": {"Tout √† fait d'accord": 0, "Plut√¥t d'accord": 0, "Plut√¥t pas d'accord": 1, "Pas du tout d'accord": 1}},
        {"question": "‚ùì 10. J'ai du mal √† comprendre les intentions des gens.",
         "scoring": {"Tout √† fait d'accord": 1, "Plut√¥t d'accord": 1, "Plut√¥t pas d'accord": 0, "Pas du tout d'accord": 0}}
    ]

    with st.form("questionnaire_aq10_prediction", clear_on_submit=False):
        st.markdown('<p class="questionnaire-title" style="text-align: center;">Questionnaire AQ-10</p>', unsafe_allow_html=True)
        st.markdown("<p style='text-align: center;'>R√©pondez aux 10 questions suivantes :</p>", unsafe_allow_html=True)

        form_responses = {}

        for i, q in enumerate(questions):
            options = list(q["scoring"].keys())
            question_key = f"aq10_question_{i}"

            st.markdown(f'<div class="question-container"><p class="question-text">{q["question"]}</p>', unsafe_allow_html=True)

            selected_response = st.radio(
                "",
                options,
                key=f"form_radio_{i}",
                index=None,
                label_visibility="collapsed",
                horizontal=True
            )

            form_responses[question_key] = selected_response
            st.markdown('</div>', unsafe_allow_html=True)

        st.markdown('<p class="questionnaire-title" style="text-align: center;">Informations personnelles</p>', unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            age = st.number_input("√Çge", min_value=2, max_value=99, value=24, help="√Çge de la personne concern√©e")

            genres = ["Female", "Male"]
            genre = st.selectbox("Genre", genres)

            ethnies = ["Middle Eastern", "White European", "Asian", "Black", "Hispanic", "Others", "Latino"]
            ethnicite = st.selectbox("Origine ethnique", ethnies)

        with col2:
            antecedents = st.selectbox("Ant√©c√©dents familiaux d'autisme", ["No", "Yes"])
            testeur = st.selectbox("Statut du testeur", ["Professionnel de sant√©", "Famille", "Enseignant", "Auto-√©valuation", "Professionnel", "M√©decin", "Autre"])

        submitted = st.form_submit_button("Calculer mon score et obtenir une pr√©diction", use_container_width=True)

        if submitted:
            if None in form_responses.values():
                st.error("‚ö†Ô∏è Veuillez r√©pondre √† toutes les questions du questionnaire.")
            else:
                total_score = 0
                scores_individuels = []

                for i, q in enumerate(questions):
                    selected_option = form_responses[f"aq10_question_{i}"]
                    if selected_option is not None:
                        score = q["scoring"][selected_option]
                        total_score += score
                        scores_individuels.append(score)
                    else:
                        scores_individuels.append(0)
                st.session_state.aq10_total = total_score
                st.session_state.aq10_responses = scores_individuels
                user_data = {
                    'Age': age,
                    'Genre': genre,
                    'Ethnie': ethnicite,
                    'Antecedent_autisme': antecedents,
                    'Statut_testeur': testeur,
                }

                for i, score in enumerate(scores_individuels):
                    user_data[f'A{i+1}'] = score

                user_data['Score_A10'] = total_score

                user_df = pd.DataFrame([user_data])

                if total_score >= 6:
                    st.markdown(f"""
                        <div class="result-card warning">
                            <div class="result-title">R√©sultat du questionnaire AQ-10</div>
                            <div class="result-score">{total_score}/10</div>
                            <p>Votre score est de {total_score}/10, ce qui sugg√®re un d√©pistage positif.</p>
                            <p><strong>Un suivi par un professionnel de sant√© est recommand√©.</strong></p>
                        </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                        <div class="result-card success">
                            <div class="result-title">R√©sultat du questionnaire AQ-10</div>
                            <div class="result-score">{total_score}/10</div>
                            <p>Votre score est de {total_score}/10, ce qui est en dessous du seuil clinique de d√©pistage positif.</p>
                        </div>
                    """, unsafe_allow_html=True)

                st.markdown("""<h3 style="text-align: center; margin-top: 2rem;">Pr√©diction par intelligence artificielle</h3>""", unsafe_allow_html=True)
                if rf_model is not None and preprocessor is not None:
                    try:
                        # 1. Cr√©er une structure de donn√©es coh√©rente avec celle utilis√©e pour l'entra√Ænement
                        required_columns = ['Age', 'Genre', 'Ethnie', 'Antecedent_autisme', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'Score_A10']
                        for col in required_columns:
                            if col not in user_df.columns:
                                if col.startswith('A') and col[1:].isdigit():
                                    idx = int(col[1:]) - 1
                                    if idx < len(scores_individuels):
                                        user_df[col] = scores_individuels[idx]
                                    else:
                                        user_df[col] = 0
                                else:
                                    user_df[col] = 0  # Valeur par d√©faut

                        column_mapping = {
                            'Antecedent_autisme': 'Autisme_familial',
                        }
                        user_df = user_df.rename(columns=column_mapping)

                        # Ajouter les colonnes manquantes avec des valeurs par d√©faut
                        if 'Jaunisse' not in user_df.columns:
                            user_df['Jaunisse'] = "No"

                        # S'assurer que toutes les colonnes n√©cessaires existent
                        required_columns = ['Age', 'Genre', 'Ethnie', 'Autisme_familial', 'Statut_testeur', 'Jaunisse',
                                          'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'Score_A10']

                        for col in required_columns:
                            if col not in user_df.columns:
                                user_df[col] = 0  # Valeur par d√©faut

                        # R√©organiser les colonnes pour correspondre √† l'ordre attendu par le mod√®le
                        user_df = user_df[required_columns]

                        user_df = user_df[required_columns]

                        # 3. Effectuer la pr√©diction
                        prediction_proba = rf_model.predict_proba(user_df)

                        # 4. R√©cup√©rer la probabilit√© de la classe positive (TSA)
                        tsa_probability = prediction_proba[0][1]

                        # 5. Classification et affichage
                        prediction_class = "TSA probable" if tsa_probability > 0.5 else "TSA peu probable"

                        probability_percentage = int(tsa_probability * 100)

                        color_class = "danger" if probability_percentage > 75 else "warning" if probability_percentage > 50 else "success"

                        st.markdown(f"""
                            <div class="result-card {color_class}">
                                <div class="result-title">Pr√©diction IA</div>
                                <div class="result-score">{probability_percentage}%</div>
                                <p>Probabilit√© estim√©e de traits autistiques: <strong>{probability_percentage}%</strong></p>
                                <p>Classification: <strong>{prediction_class}</strong></p>
                            </div>

                            <div class="diagnostic-box" style="background-color: #f8f9fa;">
                                <p><strong>Important:</strong> Cette √©valuation est uniquement un outil d'aide au d√©pistage et ne constitue pas un diagnostic m√©dical.</p>
                                <p>Si votre score ou la pr√©diction indiquent un risque √©lev√©, nous vous recommandons de consulter un professionnel de sant√© sp√©cialis√©.</p>
                            </div>
                        """, unsafe_allow_html=True)

                        # 6. Affichage du graphique comparatif
                        st.markdown("### Analyse comparative")

                        fig = go.Figure()

                        if 'Score_A10' in df.columns and 'TSA' in df.columns:
                            avg_tsa = df[df['TSA'] == 'Yes']['Score_A10'].mean()
                            avg_non_tsa = df[df['TSA'] == 'No']['Score_A10'].mean()
                        else:
                            avg_tsa = 7.2  # Valeur moyenne typique
                            avg_non_tsa = 2.8  # Valeur moyenne typique

                        categories = ['Votre score', 'Moyenne TSA', 'Moyenne non-TSA']
                        scores = [total_score, avg_tsa, avg_non_tsa]
                        colors = ['#3498db', '#e74c3c', '#2ecc71']

                        fig.add_trace(go.Bar(
                            x=categories,
                            y=scores,
                            marker_color=colors,
                            text=scores,
                            textposition='auto'
                        ))

                        fig.update_layout(
                            title='Comparaison de votre score avec les moyennes de r√©f√©rence',
                            yaxis=dict(
                                title='Score AQ-10',
                                range=[0, 10.5]
                            ),
                            height=400
                        )

                        st.plotly_chart(fig, use_container_width=True)

                    except Exception as e:
                        st.error(f"Le mod√®le n'a pas pu g√©n√©rer de pr√©diction: {str(e)}")
                        st.info("Veuillez v√©rifier que toutes les donn√©es ont √©t√© correctement saisies.")
                else:
                    st.warning("Le mod√®le de pr√©diction n'est pas disponible. Veuillez r√©essayer ult√©rieurement.")

                    st.html("""
                        <div style="background-color: #f0f7fa; border-left: 4px solid #3498db; padding: 20px; border-radius: 5px; margin: 30px 0; text-align: left;">
                            <h4 style="color: #3498db; margin-top: 0; text-align: center;">Comment fonctionne cette pr√©diction ?</h4>
                            <p style="margin-bottom: 10px; text-align: left;">Cette pr√©diction est calcul√©e par un algorithme d'<strong>intelligence artificielle</strong> appel√© "<em>Random Forest</em>" (for√™t al√©atoire) qui a √©t√© entra√Æn√© sur des milliers de cas cliniques.</p>

                            <p style="text-align: left;">L'algorithme prend en compte :</p>
                            <ul style="text-align: left;">
                                <li><strong>Vos r√©ponses au questionnaire AQ-10</strong> : chaque question a √©t√© valid√©e scientifiquement pour d√©tecter des traits autistiques sp√©cifiques</li>
                                <li><strong>Vos donn√©es d√©mographiques</strong> : √¢ge, genre, origine ethnique</li>
                                <li><strong>Les ant√©c√©dents familiaux</strong> : la pr√©sence de TSA dans la famille est un facteur important</li>
                            </ul>

                            <p style="text-align: left;">Le mod√®le compare ensuite votre profil √† tous les cas qu'il a appris et d√©termine la probabilit√© que vous pr√©sentiez des traits autistiques similaires √† ceux diagnostiqu√©s TSA.</p>

                            <p style="font-style: italic; margin-top: 10px; text-align: left;">Ce pourcentage repr√©sente le niveau de confiance du mod√®le dans sa pr√©diction, pas la "gravit√©" ou l'"intensit√©" de l'autisme.</p>
                        </div>
                        """)

                    st.html("""
                        <div style="background-color: #fef9e7; border-left: 4px solid #f39c12; padding: 15px; border-radius: 5px; margin-top: 20px;">
                            <h4 style="color: #f39c12; margin-top: 0;">Limites de cette pr√©diction</h4>
                            <p>Ce mod√®le est un <strong>outil de d√©pistage</strong>, pas un instrument de diagnostic. Un diagnostic formel de TSA n√©cessite une √©valuation compl√®te par des professionnels de sant√© qualifi√©s.</p>

                            <p>Facteurs non pris en compte par ce mod√®le :</p>
                            <ul>
                                <li>Observation directe des comportements sociaux</li>
                                <li>D√©veloppement pr√©coce et historique m√©dical complet</li>
                                <li>Impact des traits sur la vie quotidienne</li>
                                <li>Autres conditions m√©dicales ou psychiatriques</li>
                            </ul>
                        </div>
                        """)

                    st.markdown("""
                        <h3 style="text-align: center; margin-top: 40px; margin-bottom: 20px; color: #3498db;">
                            Comparaison avec la population de r√©f√©rence
                        </h3>
                        """, unsafe_allow_html=True)

                    mean_tsa = df[df['TSA'] == 'Yes']['Score_A10'].mean()
                    mean_non_tsa = df[df['TSA'] == 'No']['Score_A10'].mean()
                    overall_mean = df['Score_A10'].mean()

                    percentile = 100 * (df['Score_A10'] <= total_score).mean()
                    col1, col2, col3 = st.columns(3)

                    with col1:
                        st.markdown(f"""
                            <div class="kpi-card">
                                <div class="kpi-title">Percentile</div>
                                <div class="kpi-value">{percentile:.0f}<sup>√®me</sup></div>
                                <div class="kpi-comparison">Votre score d√©passe {percentile:.0f}% de la population test√©e</div>
                            </div>
                            """, unsafe_allow_html=True)

                    with col2:
                        diff_non_tsa = total_score - mean_non_tsa
                        color_non_tsa = "#e74c3c" if diff_non_tsa > 0 else "#2ecc71"

                        st.markdown(f"""
                            <div class="kpi-card">
                                <div class="kpi-title">Comparaison groupe non-TSA</div>
                                <div class="kpi-value" style="color:{color_non_tsa};">{diff_non_tsa:+.1f}</div>
                                <div class="kpi-comparison">Par rapport √† la moyenne des personnes sans diagnostic ({mean_non_tsa:.1f})</div>
                            </div>
                            """, unsafe_allow_html=True)

                    with col3:
                        diff_tsa = total_score - mean_tsa
                        color_tsa = "#2ecc71" if diff_tsa < 0 else "#e74c3c"

                        st.markdown(f"""
                            <div class="kpi-card">
                                <div class="kpi-title">Comparaison groupe TSA</div>
                                <div class="kpi-value" style="color:{color_tsa};">{diff_tsa:+.1f}</div>
                                <div class="kpi-comparison">Par rapport √† la moyenne des personnes avec diagnostic ({mean_tsa:.1f})</div>
                            </div>
                            """, unsafe_allow_html=True)

                        st.markdown("""
                        <h4 style="text-align: center; margin-top: 30px; margin-bottom: 15px; color: #34495e;">
                            Analyse d√©taill√©e de vos r√©ponses par question
                        </h4>
                        """, unsafe_allow_html=True)

                        categories = [f'Q{i+1}' for i in range(10)]
                        user_scores = scores_individuels

                        tsa_mean_scores = [df[df['TSA'] == 'Yes'][f'A{i+1}'].mean() for i in range(10)]
                        non_tsa_mean_scores = [df[df['TSA'] == 'No'][f'A{i+1}'].mean() for i in range(10)]

                        fig = make_subplots(rows=1, cols=3,
                                        specs=[[{'type': 'polar'}]*3],
                                        subplot_titles=["Vos r√©ponses", "Profil moyen TSA", "Profil moyen non-TSA"])

                        fig.add_trace(
                            go.Scatterpolar(
                                r=user_scores,
                                theta=categories,
                                fill='toself',
                                name='Vos r√©ponses',
                                line_color='#2ecc71',
                                fillcolor='rgba(46, 204, 113, 0.5)'
                            ),
                            row=1, col=1
                        )

                        fig.add_trace(
                            go.Scatterpolar(
                                r=tsa_mean_scores,
                                theta=categories,
                                fill='toself',
                                name='Moyenne TSA',
                                line_color='#e74c3c',
                                fillcolor='rgba(231, 76, 60, 0.5)'
                            ),
                            row=1, col=2
                        )

                        fig.add_trace(
                            go.Scatterpolar(
                                r=non_tsa_mean_scores,
                                theta=categories,
                                fill='toself',
                                name='Moyenne non-TSA',
                                line_color='#3498db',
                                fillcolor='rgba(52, 152, 219, 0.5)'
                            ),
                            row=1, col=3
                        )

                        fig.update_layout(
                            polar=dict(
                                radialaxis=dict(
                                    visible=True,
                                    range=[0, 1],
                                    tickvals=[0, 0.25, 0.5, 0.75, 1],
                                    ticktext=["0", "1", "2", "3", "4"],
                                    tickangle=45
                                ),
                                angularaxis=dict(
                                    tickfont_size=11
                                ),
                                gridshape='circular'
                            ),
                            polar2=dict(
                                radialaxis=dict(
                                    visible=True,
                                    range=[0, 1],
                                    tickvals=[0, 0.25, 0.5, 0.75, 1],
                                    ticktext=["0", "1", "2", "3", "4"],
                                    tickangle=45
                                ),
                                angularaxis=dict(
                                    tickfont_size=11
                                ),
                                gridshape='circular'
                            ),
                            polar3=dict(
                                radialaxis=dict(
                                    visible=True,
                                    range=[0, 1],
                                    tickvals=[0, 0.25, 0.5, 0.75, 1],
                                    ticktext=["0", "1", "2", "3", "4"],
                                    tickangle=45
                                ),
                                angularaxis=dict(
                                    tickfont_size=11
                                ),
                                gridshape='circular'
                            ),
                            height=450,
                            margin=dict(l=80, r=80, t=80, b=50),
                            paper_bgcolor='rgba(0,0,0,0)',
                            plot_bgcolor='rgba(0,0,0,0)',
                            font=dict(size=12),
                            showlegend=False
                        )

                        st.plotly_chart(fig, use_container_width=True)

                        with st.expander("üîç Comprendre la signification des questions"):
                            st.markdown("""
                            | Question | Description | Score √©lev√© indique |
                            |----------|-------------|---------------------|
                            | Q1 | Perception des petits bruits | ‚Üë Hypersensibilit√© auditive |
                            | Q2 | Focus sur les d√©tails vs l'ensemble | ‚Üë Attention aux d√©tails |
                            | Q3 | Capacit√© √† faire plusieurs choses | ‚Üì Difficult√©s avec le multit√¢che |
                            | Q4 | Reprise d'activit√© apr√®s interruption | ‚Üì Difficult√©s avec les transitions |
                            | Q5 | Compr√©hension du langage figur√© | ‚Üì Interpr√©tation litt√©rale |
                            | Q6 | Perception de l'ennui chez autrui | ‚Üì Difficult√© √† lire les signaux sociaux |
                            | Q7 | Compr√©hension des intentions des personnages | ‚Üë Difficult√© avec la th√©orie de l'esprit |
                            | Q8 | Collection d'informations sur des cat√©gories | ‚Üë Int√©r√™ts restreints |
                            | Q9 | Compr√©hension des √©motions par l'expression | ‚Üì Difficult√© √† lire les √©motions |
                            | Q10 | Compr√©hension des intentions d'autrui | ‚Üë Difficult√© d'interpr√©tation sociale |
                            """)

                        st.info("‚ö†Ô∏è Ce r√©sultat est une indication bas√©e sur un mod√®le statistique et ne constitue pas un diagnostic m√©dical. Consultez un professionnel de sant√© pour une √©valuation compl√®te.")

                st.markdown("""
                <h3 style="text-align: center; margin-top: 40px; margin-bottom: 20px;">
                    Pr√©valence du Trouble du Spectre Autistique
                </h3>
                """, unsafe_allow_html=True)

                col1, col2, col3 = st.columns(3)

                with col1:
                    st.markdown("""
                    <div style="background-color: #f5f7fa; border-radius: 15px; padding: 20px; text-align: center; height: 100%; box-shadow: 0 4px 10px rgba(0,0,0,0.05);">
                        <h3 style="color: #3498db; margin-bottom: 10px;">Monde</h3>
                        <div style="font-size: 2.8rem; font-weight: bold; color: #3498db; margin: 15px 0;">1 sur 100</div>
                        <p style="color: #2c3e50;">enfants dans le monde est concern√© par un trouble du spectre autistique selon l'OMS</p>
                    </div>
                    """, unsafe_allow_html=True)

                with col2:
                    st.markdown("""
                    <div style="background-color: #f5f7fa; border-radius: 15px; padding: 20px; text-align: center; height: 100%; box-shadow: 0 4px 10px rgba(0,0,0,0.05);">
                        <h3 style="color: #e74c3c; margin-bottom: 10px;">France</h3>
                        <div style="font-size: 2.8rem; font-weight: bold; color: #e74c3c; margin: 15px 0;">~1 million</div>
                        <p style="color: #2c3e50;">de personnes en France, soit entre 1% et 2% de la population fran√ßaise</p>
                    </div>
                    """, unsafe_allow_html=True)

                with col3:
                    st.markdown("""
                    <div style="background-color: #f5f7fa; border-radius: 15px; padding: 20px; text-align: center; height: 100%; box-shadow: 0 4px 10px rgba(0,0,0,0.05);">
                        <h3 style="color: #2ecc71; margin-bottom: 10px;">√âtats-Unis</h3>
                        <div style="font-size: 2.8rem; font-weight: bold; color: #2ecc71; margin: 15px 0;">1 sur 36</div>
                        <p style="color: #2c3e50;">enfants de 8 ans pr√©sentent un TSA selon les derni√®res donn√©es CDC</p>
                    </div>
                    """, unsafe_allow_html=True)

def show_documentation():
    st.markdown("""
    <div class="header-container">
        <span style="font-size:2.5rem">''üìö''</span>
        <h1 class="app-title">Documentation</h1>
    </div>
    """, unsafe_allow_html=True)

    with st.expander("üìã √Ä propos du questionnaire AQ-10", expanded=True):
        st.markdown("""
        ### Le questionnaire AQ-10

        L'AQ-10 est une version abr√©g√©e du Quotient du Spectre Autistique (AQ), un outil de d√©pistage valid√© scientifiquement.

        - **D√©velopp√© par** : Professeur Simon Baron-Cohen et son √©quipe √† l'Universit√© de Cambridge
        - **Objectif** : Identifier rapidement les traits autistiques chez les adultes et adolescents
        - **Utilisation** : Outil de d√©pistage initial, non diagnostique
        - **Validation** : √âtudes internationales avec sensibilit√© et sp√©cificit√© √©lev√©es
        """)

        st.markdown("""
        ### Interpr√©tation des scores

        - **Score ‚â• 6** : D√©pistage positif, sugg√©rant la pr√©sence de traits autistiques significatifs
        - **Score < 6** : D√©pistage n√©gatif

        Un d√©pistage positif n'est pas un diagnostic mais indique qu'une √©valuation plus approfondie pourrait √™tre b√©n√©fique.
        """)

    with st.expander("üß† Signification des questions", expanded=True):
        st.markdown("""
        ### Comprendre les questions du test AQ-10

        Chaque question √©value un aspect sp√©cifique des traits associ√©s aux TSA :
        """)

        q_tabs = st.tabs(["Q1-3", "Q4-7", "Q8-10"])

        with q_tabs[0]:
            st.markdown("""
            #### Questions 1 √† 3

            **Q1: Je remarque souvent de petits bruits que les autres ne remarquent pas.**
            - √âvalue l'hypersensibilit√© sensorielle, trait fr√©quent dans les TSA

            **Q2: Je me concentre g√©n√©ralement davantage sur l'ensemble que sur les petits d√©tails.**
            - √âvalue la tendance √† la coh√©rence centrale (vision d'ensemble vs d√©tails)

            **Q3: Je trouve facile de faire plusieurs choses en m√™me temps.**
            - √âvalue les fonctions ex√©cutives et la flexibilit√© cognitive
            """)

        with q_tabs[1]:
            st.markdown("""
            #### Questions 4 √† 7

            **Q4: S'il y a une interruption, je peux rapidement reprendre ce que je faisais.**
            - √âvalue la flexibilit√© attentionnelle et l'adaptation aux changements

            **Q5: Je trouve facile de ¬´ lire entre les lignes ¬ª quand quelqu'un me parle.**
            - √âvalue la compr√©hension des messages implicites et du langage indirect

            **Q6: Je sais comment savoir si la personne qui m'√©coute commence √† s'ennuyer.**
            - √âvalue la capacit√© √† d√©tecter les signaux sociaux non verbaux

            **Q7: Quand je lis une histoire, j'ai du mal √† comprendre les intentions des personnages.**
            - √âvalue la th√©orie de l'esprit (comprendre les √©tats mentaux d'autrui)
            """)

        with q_tabs[2]:
            st.markdown("""
            #### Questions 8 √† 10

            **Q8: J'aime collecter des informations sur des cat√©gories de choses.**
            - √âvalue la tendance aux int√©r√™ts restreints et sp√©cifiques

            **Q9: Je trouve facile de comprendre ce que quelqu'un pense ou ressent rien qu'en regardant son visage.**
            - √âvalue la capacit√© √† lire les expressions faciales

            **Q10: J'ai du mal √† comprendre les intentions des gens.**
            - √âvalue la compr√©hension des intentions et motivations sociales
            """)

    with st.expander("üîç Sources Acad√©miques", expanded=True):
        st.markdown("""
          <div style="border-left:4px solid #1e88e5; padding-left:15px; margin-bottom:20px">
              <h3 style="color:#1e88e5">R√©f√©rences Bibliographiques</h3>
          </div>
          """, unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
              st.markdown("""
              <div style="background:#f8f9fa; padding:15px; border-radius:8px; height:100%">
                  <h4 style="color:#0d47a1; border-bottom:1px solid #ddd; padding-bottom:8px">Manuels de R√©f√©rence</h4>
                  <ul style="padding-left:20px">
                      <li>American Psychiatric Association. (2013). <em>Diagnostic and statistical manual of mental disorders</em> (5th ed.). <a href="https://doi.org/10.1176/appi.books.9780890425596" target="_blank">DOI</a></li>
                      <li>World Health Organization. (2019). <em>International classification of diseases</em> (11th ed.). <a href="https://icd.who.int/" target="_blank">Site web</a></li>
                      <li>Baron-Cohen, S. (2017). <em>The Pattern Seekers: How Autism Drives Human Invention</em>. <a href="https://www.simonandschuster.com/books/The-Pattern-Seekers/Simon-Baron-Cohen/9781541647145" target="_blank">√âditeur</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        with col2:
              st.markdown("""
              <div style="background:#f8f9fa; padding:15px; border-radius:8px; height:100%">
                  <h4 style="color:#0d47a1; border-bottom:1px solid #ddd; padding-bottom:8px">√âtudes Fondatrices</h4>
                  <ul style="padding-left:20px">
                      <li>Bergeron, M., & H√©bert, M. (2006). <em>√âvaluation d'une intervention de groupe d'approche f√©ministe aupr√®s de femmes victimes d'agression sexuelle</em>.</li>
                      <li>Mottron, L. (2020). <em>L'intervention pr√©coce pour enfants autistes : Nouveaux principes pour soutenir une autre intelligence</em>.</li>
                      <li>Silberman, S. (2015). <em>NeuroTribes: The Legacy of Autism and the Future of Neurodiversity</em>. <a href="https://www.penguinrandomhouse.com/books/310415/neurotribes-by-steve-silberman/" target="_blank">√âditeur</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        st.markdown("""
          <div style="margin-top:20px; background:#f8f9fa; padding:15px; border-radius:8px">
              <h4 style="color:#0d47a1; border-bottom:1px solid #ddd; padding-bottom:8px">Articles Scientifiques R√©cents</h4>
              <ul style="padding-left:20px">
                  <li>Culotta, L. et al. (2024). "Brain Structural Differences in Autism Spectrum Disorder". <em>Journal of Autism and Developmental Disorders</em>.</li>
                  <li>Anderson, J. S. (2023). "Connectivity Patterns in the Autistic Brain". <em>Autism Research</em>, 16(3), 456-472.</li>
                  <li>Grandin, T. (2023). "The Autistic Brain: Updated Perspectives". <em>Journal of Neuropsychology</em>, 15(2), 112-128.</li>
                  <li>Baron-Cohen, S. (2022). "Autism, Invention, and the STEM Connection". <em>Nature Neuroscience</em>, 25(1), 45-57.</li>
              </ul>
          </div>
          """, unsafe_allow_html=True)

    with st.expander("üß† Ressources sur l'Autisme", expanded=True):
        st.markdown("""
          <div style="border-left:4px solid #4caf50; padding-left:15px; margin-bottom:20px">
              <h3 style="color:#4caf50">Comprendre l'Autisme</h3>
          </div>
          """, unsafe_allow_html=True)

        st.markdown("""
          <h4 style="color:#2e7d32; margin-top:20px">Vid√©os √âducatives</h4>
          """, unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("""
              <div style="background:#f1f8e9; padding:15px; border-radius:8px; height:100%">
                  <h5 style="color:#33691e">Conf√©rences TED</h5>
                  <ul style="padding-left:20px">
                      <li><a href="https://www.ted.com/talks/temple_grandin_the_world_needs_all_kinds_of_minds?language=fr" target="_blank">Temple Grandin : Le monde a besoin de toutes sortes d'esprits</a></li>
                      <li><a href="https://www.youtube.com/watch?v=kHmvZBQjB0g" target="_blank">Comment l'autisme stimule l'invention humaine - Simon Baron-Cohen</a></li>
                      <li><a href="https://www.ted.com/talks/steve_silberman_the_forgotten_history_of_autism" target="_blank">Steve Silberman : L'histoire oubli√©e de l'autisme</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        with col2:
            st.markdown("""
              <div style="background:#f1f8e9; padding:15px; border-radius:8px; height:100%">
                  <h5 style="color:#33691e">Documentaires</h5>
                  <ul style="padding-left:20px">
                      <li><a href="https://www.youtube.com/watch?v=J9ZxvR_cm94" target="_blank">The Reason I Jump - Bande annonce officielle</a></li>
                      <li><a href="https://www.youtube.com/watch?v=Lr4_dOorquQ" target="_blank">Autism: The Musical - HBO Documentary</a></li>
                      <li><a href="https://www.arte.tv/fr/videos/RC-014294/dans-la-tete-des-autistes/" target="_blank">Dans la t√™te des autistes - Arte</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        st.markdown("""
          <h4 style="color:#2e7d32; margin-top:20px">Sites Web et Organisations</h4>
          """, unsafe_allow_html=True)

        col1, col2, col3 = st.columns(3)

        with col1:
              st.markdown("""
              <div style="background:#f1f8e9; padding:15px; border-radius:8px; height:100%">
                  <h5 style="color:#33691e">France</h5>
                  <ul style="padding-left:20px">
                      <li><a href="https://www.autisme-france.fr" target="_blank">Autisme France</a></li>
                      <li><a href="https://www.autismeinfoservice.fr" target="_blank">Autisme Info Service</a></li>
                      <li><a href="https://maisondelautisme.gouv.fr" target="_blank">Maison de l'autisme</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        with col2:
              st.markdown("""
              <div style="background:#f1f8e9; padding:15px; border-radius:8px; height:100%">
                  <h5 style="color:#33691e">International</h5>
                  <ul style="padding-left:20px">
                      <li><a href="https://www.autismspeaks.org" target="_blank">Autism Speaks</a></li>
                      <li><a href="https://www.autism.org" target="_blank">National Autistic Society (UK)</a></li>
                      <li><a href="https://www.cdc.gov/ncbddd/autism/" target="_blank">CDC - Autism Spectrum Disorder</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        with col3:
              st.markdown("""
              <div style="background:#f1f8e9; padding:15px; border-radius:8px; height:100%">
                  <h5 style="color:#33691e">Recherche et Formation</h5>
                  <ul style="padding-left:20px">
                      <li><a href="https://www.gncra.fr" target="_blank">GNCRA - Groupement National des CRA</a></li>
                      <li><a href="https://researchautism.org" target="_blank">Research Autism</a></li>
                      <li><a href="https://www.autism-uni.org" target="_blank">Autism&Uni</a></li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        st.markdown("""
          <h4 style="color:#2e7d32; margin-top:20px">Livres Recommand√©s</h4>
          <div style="display:flex; overflow-x:auto; padding:10px 0; gap:15px">
              <div style="min-width:200px; background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1)">
                  <div style="width:100%; height:120px; background:#e8f5e9; display:flex; align-items:center; justify-content:center; border-radius:5px; margin-bottom:10px">
                      <span style="font-weight:bold; color:#2e7d32">NeuroTribes</span>
                  </div>
                  <h5 style="margin:10px 0 5px 0">NeuroTribes</h5>
                  <p style="font-size:0.9rem; margin:0">Steve Silberman (2015)</p>
              </div>
              <div style="min-width:200px; background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1)">
                  <div style="width:100%; height:120px; background:#e3f2fd; display:flex; align-items:center; justify-content:center; border-radius:5px; margin-bottom:10px">
                      <span style="font-weight:bold; color:#1565c0">The Autistic Brain</span>
                  </div>
                  <h5 style="margin:10px 0 5px 0">The Autistic Brain</h5>
                  <p style="font-size:0.9rem; margin:0">Temple Grandin (2014)</p>
              </div>
              <div style="min-width:200px; background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1)">
                  <div style="width:100%; height:120px; background:#fff3e0; display:flex; align-items:center; justify-content:center; border-radius:5px; margin-bottom:10px">
                      <span style="font-weight:bold; color:#e65100">Uniquely Human</span>
                  </div>
                  <h5 style="margin:10px 0 5px 0">Uniquely Human</h5>
                  <p style="font-size:0.9rem; margin:0">Barry M. Prizant (2022)</p>
              </div>
              <div style="min-width:200px; background:#fff; padding:10px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1)">
                  <div style="width:100%; height:120px; background:#f3e5f5; display:flex; align-items:center; justify-content:center; border-radius:5px; margin-bottom:10px">
                      <span style="font-weight:bold; color:#6a1b9a">The Pattern Seekers</span>
                  </div>
                  <h5 style="margin:10px 0 5px 0">The Pattern Seekers</h5>
                  <p style="font-size:0.9rem; margin:0">Simon Baron-Cohen (2021)</p>
              </div>
          </div>
          """, unsafe_allow_html=True)

    with st.expander("üìä Donn√©es et Mod√®les", expanded=True):
        st.markdown("""
          <div style="border-left:4px solid #ff9800; padding-left:15px; margin-bottom:20px">
              <h3 style="color:#ff9800">Sources des Donn√©es et Mod√©lisation</h3>
          </div>
          """, unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
              st.markdown("""
              <div style="background:#fff3e0; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.05)">
                  <h4 style="color:#e65100; border-bottom:1px solid #ffe0b2; padding-bottom:8px">Jeux de Donn√©es</h4>
                  <ul style="padding-left:20px">
                      <li>üìÅ <a href="https://www.kaggle.com/datasets/faizunnabi/autism-screening" target="_blank">Autism Screening Dataset</a> (n=1985)</li>
                      <li>üìÅ <a href="https://archive.ics.uci.edu/ml/datasets/Autism+Screening+Adult" target="_blank">UCI Machine Learning Repository</a> (n=704)</li>
                      <li>üìÅ <a href="https://data.gov.sa/" target="_blank">Open Data Saudi Arabia</a> (n=506)</li>
                      <li>üìÅ <a href="https://www.kaggle.com/datasets/fabdelja/autism-screening-for-toddlers" target="_blank">Autism Screening for Toddlers</a> (n=1054)</li>
                      <li>üìÅ <a href="https://www.kaggle.com/datasets/reevesii/global-autism-data" target="_blank">Global Autism Data</a> (n=800)</li>
                  </ul>
              </div>
              """, unsafe_allow_html=True)

        with col2:
              st.markdown("""
              <div style="background:#fff3e0; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.05)">
                  <h4 style="color:#e65100; border-bottom:1px solid #ffe0b2; padding-bottom:8px">Mod√®les Utilis√©s</h4>
                  <div style="display:grid; grid-template-columns:repeat(2,1fr); gap:10px; margin-top:10px">
                      <div style="padding:10px; background:#e3f2fd; border-radius:5px; box-shadow:0 1px 3px rgba(0,0,0,0.1)">
                          <h5 style="margin:0 0 8px 0; color:#0d47a1">Random Forest</h5>
                          <ul style="margin:0; padding-left:15px; font-size:0.9rem">
                              <li>n_estimators=100</li>
                              <li>max_depth=10</li>
                              <li>min_samples_split=10</li>
                              <li>min_samples_leaf=1</li>
                          </ul>
                      </div>
                      <div style="padding:10px; background:#e8f5e9; border-radius:5px; box-shadow:0 1px 3px rgba(0,0,0,0.1)">
                          <h5 style="margin:0 0 8px 0; color:#1b5e20">LightGBM</h5>
                          <ul style="margin:0; padding-left:15px; font-size:0.9rem">
                              <li>learning_rate=0.1</li>
                              <li>max_depth=15</li>
                              <li>n_estimators=150</li>
                              <li>boosting_type='gbdt'</li>
                          </ul>
                      </div>
                      <div style="padding:10px; background:#fff8e1; border-radius:5px; box-shadow:0 1px 3px rgba(0,0,0,0.1)">
                          <h5 style="margin:0 0 8px 0; color:#ff6f00">XGBoost</h5>
                          <ul style="margin:0; padding-left:15px; font-size:0.9rem">
                              <li>learning_rate=0.1</li>
                              <li>max_depth=5</li>
                              <li>n_estimators=100</li>
                              <li>objective='binary:logistic'</li>
                          </ul>
                      </div>
                      <div style="padding:10px; background:#f3e5f5; border-radius:5px; box-shadow:0 1px 3px rgba(0,0,0,0.1)">
                          <h5 style="margin:0 0 8px 0; color:#4a148c">Logistic Regression</h5>
                          <ul style="margin:0; padding-left:15px; font-size:0.9rem">
                              <li>C=1.0</li>
                              <li>penalty='l2'</li>
                              <li>solver='lbfgs'</li>
                              <li>max_iter=200</li>
                          </ul>
                      </div>
                  </div>
              </div>
              """, unsafe_allow_html=True)

        st.markdown("""
          <div style="margin-top:20px; background:#fff3e0; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.05)">
              <h4 style="color:#e65100; border-bottom:1px solid #ffe0b2; padding-bottom:8px">Performance des Mod√®les</h4>
              <div style="overflow-x:auto; margin-top:10px">
                  <table style="width:100%; border-collapse:collapse; text-align:center">
                      <thead>
                          <tr style="background:#fff3e0">
                              <th style="padding:8px; border-bottom:2px solid #ffcc80">Mod√®le</th>
                              <th style="padding:8px; border-bottom:2px solid #ffcc80">Accuracy</th>
                              <th style="padding:8px; border-bottom:2px solid #ffcc80">Precision</th>
                              <th style="padding:8px; border-bottom:2px solid #ffcc80">Recall</th>
                              <th style="padding:8px; border-bottom:2px solid #ffcc80">F1 Score</th>
                          </tr>
                      </thead>
                      <tbody>
                          <tr style="background:#fff">
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2"><strong>Random Forest</strong></td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.97</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.96</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.97</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.96</td>
                          </tr>
                          <tr style="background:#fafafa">
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2"><strong>LightGBM</strong></td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.97</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.96</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.96</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.96</td>
                          </tr>
                          <tr style="background:#fff">
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2"><strong>XGBoost</strong></td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.96</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.95</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.96</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.96</td>
                          </tr>
                          <tr style="background:#fafafa">
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2"><strong>Logistic Regression</strong></td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.83</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.84</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.82</td>
                              <td style="padding:8px; border-bottom:1px solid #ffe0b2">0.83</td>
                          </tr>
                      </tbody>
                  </table>
              </div>
          </div>
          """, unsafe_allow_html=True)

    with st.expander("üìù R√©f√©rences Techniques", expanded=True):
        st.markdown("""
        <div style="border-left:4px solid #9c27b0; padding-left:15px; margin-bottom:20px">
            <h3 style="color:#9c27b0">Stack Technologique</h3>
        </div>
        """, unsafe_allow_html=True)

        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("""
            <div style="background:#fff; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1); height:100%">
                <h4 style="color:#4a148c; border-bottom:1px solid #e1bee7; padding-bottom:8px">
                    <span style="font-size:1.2rem; margin-right:5px">'üìö'</span> Biblioth√®ques Principales
                </h4>
                <ul style="padding-left:20px; margin-top:10px">
                    <li><strong>Scikit-learn 1.3.2</strong> - Mod√®les et pr√©traitement</li>
                    <li><strong>Plotly 5.18.0</strong> - Visualisations interactives</li>
                    <li><strong>XGBoost 2.0.3</strong> - Mod√®les boosting</li>
                    <li><strong>LightGBM 4.1.0</strong> - Mod√®les gradient boosting</li>
                    <li><strong>Pandas 2.1.3</strong> - Manipulation des donn√©es</li>
                    <li><strong>NumPy 1.26.0</strong> - Calculs num√©riques</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown("""
            <div style="background:#fff; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1); height:100%">
                <h4 style="color:#4a148c; border-bottom:1px solid #e1bee7; padding-bottom:8px">
                    <span style="font-size:1.2rem; margin-right:5px">üñ•Ô∏è</span> Infrastructure
                </h4>
                <ul style="padding-left:20px; margin-top:10px">
                    <li><strong>Streamlit 1.29.0</strong> - Interface utilisateur</li>
                    <li><strong>Docker 24.0.7</strong> - Conteneurisation</li>
                    <li><strong>AWS EC2 t3.large</strong> - H√©bergement</li>
                    <li><strong>GitHub Actions</strong> - CI/CD</li>
                    <li><strong>Python 3.10</strong> - Langage principal</li>
                    <li><strong>NGINX</strong> - Serveur web</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            st.markdown("""
            <div style="background:#fff; padding:15px; border-radius:8px; box-shadow:0 2px 4px rgba(0,0,0,0.1); height:100%">
                <h4 style="color:#4a148c; border-bottom:1px solid #e1bee7; padding-bottom:8px">
                    <span style="font-size:1.2rem; margin-right:5px">üîó</span> Sources Externes
                </h4>
                <ul style="padding-left:20px; margin-top:10px">
                    <li><a href="https://autism-resources.org" target="_blank"><strong>Autism Resources Initiative</strong></a></li>
                    <li><a href="https://www.cdc.gov/ncbddd/autism/data.html" target="_blank"><strong>CDC Autism Data</strong></a></li>
                    <li><a href="https://www.kaggle.com/datasets" target="_blank"><strong>Kaggle Datasets</strong></a></li>
                    <li><a href="https://archive.ics.uci.edu/ml/" target="_blank"><strong>UCI ML Repository</strong></a></li>
                    <li><a href="https://huggingface.co/datasets" target="_blank"><strong>Hugging Face Datasets</strong></a></li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

def show_about_page():

    st.markdown(
        f"""<div class="header-container">
            <span style="font-size:2.5rem">‚ÑπÔ∏è</span>
            <h1 class="app-title">√Ä propos</h1>
        </div>""", unsafe_allow_html=True
    )

    html_code = """
    <div style="padding: 20px; background-color: white; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); margin-bottom: 20px;">
        <!-- Contenu HTML -->
    </div>
    """

    st.markdown("""
    ## √Ä propos du projet

    Ce projet a √©t√© r√©alis√© dans le cadre d'une √©tude sur les m√©thodes de d√©pistage des Troubles du Spectre Autistique (TSA).

    ### Objectifs du Projet

    1. Identifier les facteurs associ√©s √† la pr√©sence d'un TSA
    2. Explorer les donn√©es pour d√©celer des tendances et biais
    3. Construire des mod√®les pr√©dictifs pour l'√©valuation du TSA

    ### Remerciements

    Nous remercions toutes les personnes ayant contribu√© √† ce projet, en particulier notre mentor Yohan Cohen pour son soutien et ses conseils pr√©cieux.""")

    st.markdown("""
    ### Licence
    Cette application est mise √† disposition sous licence open-source. Le code et les donn√©es anonymis√©es sont disponibles pour des fins de recherche uniquement.""")


    html_code = """
        <h4 style="color:#0d47a1; margin-top:20px">Auteurs du Projet</h4>
        <div style="display:flex; flex-wrap:wrap; gap:20px; margin-top:15px">
            <div style="flex:1; min-width:200px; background:#f5f5f5; padding:20px; border-radius:10px; text-align:center; box-shadow:0 3px 6px rgba(0,0,0,0.1)">
                <div style="width:100px; height:100px; border-radius:50%; background:#e3f2fd; margin:0 auto 15px auto; display:flex; justify-content:center; align-items:center; border:2px solid #bbdefb">
                    <span style="font-size:40px">AB</span>
                </div>
                <h4 style="margin:0 0 5px 0; color:#1565c0">Alexandre Bernard</h4>
                <p style="margin:0 0 10px 0; color:#546e7a; font-style:italic">Data Analyst</p>
            </div>

            <div style="flex:1; min-width:200px; background:#f5f5f5; padding:20px; border-radius:10px; text-align:center; box-shadow:0 3px 6px rgba(0,0,0,0.1)">
                <div style="width:100px; height:100px; border-radius:50%; background:#e8f5e9; margin:0 auto 15px auto; display:flex; justify-content:center; align-items:center; border:2px solid #c8e6c9">
                    <span style="font-size:40px">RC</span>
                </div>
                <h4 style="margin:0 0 5px 0; color:#2e7d32">R√©mi Chenouri</h4>
                <p style="margin:0 0 10px 0; color:#546e7a; font-style:italic">Data Analyst</p>
            </div>

            <div style="flex:1; min-width:200px; background:#f5f5f5; padding:20px; border-radius:10px; text-align:center; box-shadow:0 3px 6px rgba(0,0,0,0.1)">
                <div style="width:100px; height:100px; border-radius:50%; background:#fff3e0; margin:0 auto 15px auto; display:flex; justify-content:center; align-items:center; border:2px solid #ffe0b2">
                    <span style="font-size:40px">AI</span>
                </div>
                <h4 style="margin:0 0 5px 0; color:#e65100">Ahmed Ibnabasse</h4>
                <p style="margin:0 0 10px 0; color:#546e7a; font-style:italic">Data Analyst</p>
            </div>

            <div style="flex:1; min-width:200px; background:#f5f5f5; padding:20px; border-radius:10px; text-align:center; box-shadow:0 3px 6px rgba(0,0,0,0.1)">
                <div style="width:100px; height:100px; border-radius:50%; background:#f3e5f5; margin:0 auto 15px auto; display:flex; justify-content:center; align-items:center; border:2px solid #e1bee7">
                    <span style="font-size:40px">LS</span>
                </div>
                <h4 style="margin:0 0 5px 0; color:#6a1b9a">Laurence Souppayaraza</h4>
                <p style="margin:0 0 10px 0; color:#546e7a; font-style:italic">Data Analyst</p>
            </div>
        </div>
        """
    components.html(html_code, height=300)

    image_url = "https://drive.google.com/file/d/1tbARR43xi1GCnfY9XrEc-O2FbMnTmPcW/view?usp=sharing"
    st.markdown(get_img_with_href(image_url, "#", as_banner=False), unsafe_allow_html=True)


    st.markdown("""
    &copy; 2025 - Projet Autisme - Tous droits r√©serv√©s
    """)
    pass

def main():
    if "initialized" not in st.session_state:
        set_custom_theme()
        st.session_state.initialized = True

        if "aq10_total" not in st.session_state:
            st.session_state.aq10_total = 0

        if "expanders_initialized" not in st.session_state:
            st.session_state.expanders_initialized = {
                'structure': True,
                'valeurs_manquantes': False,
                'pipeline': False,
                'variables_cles': True,
                'questionnaire': False,
                'composite': False,
                'statistiques': False,
                'correlation': False,
                'famd': False
            }

    if 'df' not in st.session_state:
        with st.spinner("Chargement des donn√©es..."):
            st.session_state.df, st.session_state.df_ds1, st.session_state.df_ds2, st.session_state.df_ds3, st.session_state.df_ds4, st.session_state.df_ds5, st.session_state.df_stats = load_dataset()

    with st.sidebar:
        st.markdown('<p class="sidebar-title">üß© Autisme - Navigation</p>', unsafe_allow_html=True)
        pages = [
            "üè† Accueil",
            "üîç Exploration des Donn√©es",
            "üß† Analyse ML",
            "ü§ñ Pr√©diction par IA",
            "üìö Documentation",
            "‚ÑπÔ∏è √Ä propos"
        ]
        selection = st.sidebar.radio("Choisissez un outil :", pages)

    palette = {
        "Yes": "#3498db",
        "No": "#2ecc71",
        "Unknown": "#95a5a6"
    }

    if "üè† Accueil" in selection:
        show_home_page()
    elif "üîç Exploration des Donn√©es" in selection:
        show_data_exploration()
    elif "üß† Analyse ML" in selection:
        show_ml_analysis()
    elif "ü§ñ Pr√©diction par IA" in selection:
        show_aq10_and_prediction()
    elif "üìö Documentation" in selection:
        show_documentation()
    elif "‚ÑπÔ∏è √Ä propos" in selection:
        show_about_page()

if __name__ == "__main__":
    main()

